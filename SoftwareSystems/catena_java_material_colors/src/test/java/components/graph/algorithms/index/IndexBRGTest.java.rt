<color=#89DDFF>package</color> <color=#FFCB6B>test.java.components.graph.algorithms.index</color><color=#89DDFF>;</color>

<color=#89DDFF>import static</color> <color=#FFCB6B>org.junit.Assert.*</color><color=#89DDFF>;</color>

<color=#89DDFF>import</color> <color=#FFCB6B>java.io.File</color><color=#89DDFF>;</color>

<color=#89DDFF>import</color> <color=#FFCB6B>org.json.JSONArray</color><color=#89DDFF>;</color>
<color=#89DDFF>import</color> <color=#FFCB6B>org.json.JSONObject</color><color=#89DDFF>;</color>
<color=#89DDFF>import</color> <color=#FFCB6B>org.junit.Test</color><color=#89DDFF>;</color>

<color=#89DDFF>import</color> <color=#FFCB6B>main.java.Helper</color><color=#89DDFF>;</color>
<color=#89DDFF>import</color> <color=#FFCB6B>main.java.components.graph.algorithms.GenericGraph</color><color=#89DDFF>;</color>
<color=#89DDFF>import</color> <color=#FFCB6B>main.java.components.graph.algorithms.IdxInterface</color><color=#89DDFF>;</color>
<color=#89DDFF>import</color> <color=#FFCB6B>main.java.components.graph.algorithms.index.IndexBRG</color><color=#89DDFF>;</color>
<color=#89DDFF>import</color> <color=#FFCB6B>main.java.components.hash.HashInterface</color><color=#89DDFF>;</color>
<color=#89DDFF>import</color> <color=#FFCB6B>main.java.components.hash.algorithms.Blake2b</color><color=#89DDFF>;</color>
<color=#89DDFF>import</color> <color=#FFCB6B>main.java.components.hash.algorithms.Blake2b_1</color><color=#89DDFF>;</color>

<color=#BB80B3>public</color> <color=#BB80B3>class</color> <color=#FFCB6B>IndexBRGTest</color> <color=#89DDFF>{</color>
	
	<color=#BB80B3>private</color> <color=#EEFFFF>IdxInterface</color> <color=#EEFFFF>idxBrg</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>IndexBRG</color><color=#89DDFF>();</color>
	
	<color=#BB80B3>private</color> <color=#EEFFFF>String</color> <color=#EEFFFF>pathBrgAny</color> <color=#89DDFF>=</color> <color=#C3E88D>"src/test/resources/brgAny.json"</color><color=#89DDFF>;</color>
	<color=#BB80B3>private</color> <color=#EEFFFF>File</color> <color=#EEFFFF>fileBrgAny</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>File</color><color=#89DDFF>(</color><color=#EEFFFF>pathBrgAny</color><color=#89DDFF>);</color>
	
	<color=#BB80B3>private</color> <color=#EEFFFF>String</color> <color=#EEFFFF>pathbrgAnyFull</color> <color=#89DDFF>=</color> <color=#C3E88D>"src/test/resources/brgAnyFull.json"</color><color=#89DDFF>;</color>
	<color=#BB80B3>private</color> <color=#EEFFFF>File</color> <color=#EEFFFF>filebrgAnyFull</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>File</color><color=#89DDFF>(</color><color=#EEFFFF>pathbrgAnyFull</color><color=#89DDFF>);</color>
	
	<color=#BB80B3>private</color> <color=#EEFFFF>String</color> <color=#EEFFFF>pathbrgIndex</color> <color=#89DDFF>=</color> <color=#C3E88D>"src/test/resources/brgIndex.json"</color><color=#89DDFF>;</color>
	<color=#BB80B3>private</color> <color=#EEFFFF>File</color> <color=#EEFFFF>filebrgIndex</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>File</color><color=#89DDFF>(</color><color=#EEFFFF>pathbrgIndex</color><color=#89DDFF>);</color>
	
	
	<color=#BB80B3>private</color> <color=#EEFFFF>Helper</color> <color=#EEFFFF>helper</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>Helper</color><color=#89DDFF>();</color>

	<color=#82AAFF>@Test</color>
	<color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>testBRGAny</color><color=#89DDFF>(){</color>
		<color=#EEFFFF>GenericGraph</color> <color=#EEFFFF>graph</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>GenericGraph</color><color=#89DDFF>();</color>
		
		<color=#EEFFFF>IdxInterface</color> <color=#EEFFFF>idx</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>IndexBRG</color><color=#89DDFF>();</color>
		
		<color=#EEFFFF>HashInterface</color> <color=#EEFFFF>h</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>Blake2b</color><color=#89DDFF>();</color>
		<color=#EEFFFF>HashInterface</color> <color=#EEFFFF>hPrime</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>Blake2b_1</color><color=#89DDFF>();</color>
		
		<color=#EEFFFF>graph</color><color=#89DDFF>.</color><color=#BB80B3>setH</color><color=#89DDFF>(</color><color=#EEFFFF>h</color><color=#89DDFF>);</color>
		<color=#EEFFFF>graph</color><color=#89DDFF>.</color><color=#BB80B3>setHPrime</color><color=#89DDFF>(</color><color=#EEFFFF>hPrime</color><color=#89DDFF>);</color>
		<color=#EEFFFF>graph</color><color=#89DDFF>.</color><color=#BB80B3>setIndexing</color><color=#89DDFF>(</color><color=#EEFFFF>idx</color><color=#89DDFF>);</color>
		
		<color=#EEFFFF>JSONArray</color> <color=#EEFFFF>jsonObj</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>jsonParserArr</color><color=#89DDFF>(</color><color=#EEFFFF>fileBrgAny</color><color=#89DDFF>);</color>
		<color=#BB80B3>for</color> <color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>i</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#EEFFFF>i</color><color=#89DDFF><</color><color=#EEFFFF>jsonObj</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>();</color> <color=#89DDFF>++</color><color=#EEFFFF>i</color> <color=#89DDFF>){</color>
			
			<color=#EEFFFF>hPrime</color><color=#89DDFF>.</color><color=#BB80B3>reset</color><color=#89DDFF>();</color>
			
			<color=#EEFFFF>JSONObject</color> <color=#EEFFFF>o</color> <color=#89DDFF>=</color> <color=#89DDFF>(</color><color=#EEFFFF>JSONObject</color><color=#89DDFF>)</color> <color=#EEFFFF>jsonObj</color><color=#89DDFF>.</color><color=#BB80B3>get</color><color=#89DDFF>(</color><color=#EEFFFF>i</color><color=#89DDFF>);</color>
			
			<color=#EEFFFF>JSONObject</color> <color=#EEFFFF>inputs</color> <color=#89DDFF>=</color> <color=#EEFFFF>o</color><color=#89DDFF>.</color><color=#BB80B3>getJSONObject</color><color=#89DDFF>(</color><color=#C3E88D>"inputs"</color><color=#89DDFF>);</color>
			<color=#EEFFFF>JSONObject</color> <color=#EEFFFF>outputs</color> <color=#89DDFF>=</color> <color=#EEFFFF>o</color><color=#89DDFF>.</color><color=#BB80B3>getJSONObject</color><color=#89DDFF>(</color><color=#C3E88D>"outputs"</color><color=#89DDFF>);</color>
			
			<color=#BB80B3>int</color> <color=#EEFFFF>garlic</color> <color=#89DDFF>=</color> <color=#EEFFFF>inputs</color><color=#89DDFF>.</color><color=#BB80B3>getInt</color><color=#89DDFF>(</color><color=#C3E88D>"garlic"</color><color=#89DDFF>);</color>
			<color=#EEFFFF>String</color> <color=#EEFFFF>state</color> <color=#89DDFF>=</color> <color=#EEFFFF>inputs</color><color=#89DDFF>.</color><color=#BB80B3>getString</color><color=#89DDFF>(</color><color=#C3E88D>"state"</color><color=#89DDFF>);</color>
			<color=#BB80B3>int</color> <color=#EEFFFF>lambda</color> <color=#89DDFF>=</color> <color=#EEFFFF>inputs</color><color=#89DDFF>.</color><color=#BB80B3>getInt</color><color=#89DDFF>(</color><color=#C3E88D>"lambda"</color><color=#89DDFF>);</color>
			
			<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>stateArr</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>hex2bytes</color><color=#89DDFF>(</color><color=#EEFFFF>state</color><color=#89DDFF>);</color>
			<color=#BB80B3>byte</color><color=#89DDFF>[][]</color> <color=#EEFFFF>twoDimStateArr</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>oneDimByteArrToTwoDim</color><color=#89DDFF>(</color><color=#EEFFFF>stateArr</color><color=#89DDFF>,</color> <color=#F78C6C>64</color><color=#89DDFF>);</color>

			<color=#EEFFFF>String</color> <color=#EEFFFF>res</color> <color=#89DDFF>=</color> <color=#EEFFFF>outputs</color><color=#89DDFF>.</color><color=#BB80B3>getString</color><color=#89DDFF>(</color><color=#C3E88D>"res"</color><color=#89DDFF>);</color>

			<color=#BB80B3>byte</color><color=#89DDFF>[][]</color> <color=#EEFFFF>graphOutput</color> <color=#89DDFF>=</color> <color=#EEFFFF>graph</color><color=#89DDFF>.</color><color=#BB80B3>graph</color><color=#89DDFF>(</color><color=#EEFFFF>garlic</color><color=#89DDFF>,</color> <color=#EEFFFF>twoDimStateArr</color><color=#89DDFF>,</color> <color=#EEFFFF>lambda</color><color=#89DDFF>);</color>
			<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>output</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>twoDimByteArrayToOne</color><color=#89DDFF>(</color><color=#EEFFFF>graphOutput</color><color=#89DDFF>);</color>
			
			<color=#EEFFFF>assertTrue</color><color=#89DDFF>(</color><color=#EEFFFF>res</color><color=#89DDFF>.</color><color=#BB80B3>equals</color><color=#89DDFF>(</color><color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>bytes2hex</color><color=#89DDFF>(</color><color=#EEFFFF>output</color><color=#89DDFF>).</color><color=#BB80B3>toLowerCase</color><color=#89DDFF>()));</color>
		<color=#89DDFF>}</color>
	<color=#89DDFF>}</color>
	
	<color=#82AAFF>@Test</color>
	<color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>testBRGAnyFull</color><color=#89DDFF>(){</color>
		<color=#EEFFFF>GenericGraph</color> <color=#EEFFFF>graph</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>GenericGraph</color><color=#89DDFF>();</color>
		
		<color=#EEFFFF>IdxInterface</color> <color=#EEFFFF>idx</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>IndexBRG</color><color=#89DDFF>();</color>
		
		<color=#EEFFFF>HashInterface</color> <color=#EEFFFF>h</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>Blake2b</color><color=#89DDFF>();</color>
		<color=#EEFFFF>HashInterface</color> <color=#EEFFFF>hPrime</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>Blake2b</color><color=#89DDFF>();</color>
		
		<color=#EEFFFF>graph</color><color=#89DDFF>.</color><color=#BB80B3>setH</color><color=#89DDFF>(</color><color=#EEFFFF>h</color><color=#89DDFF>);</color>
		<color=#EEFFFF>graph</color><color=#89DDFF>.</color><color=#BB80B3>setHPrime</color><color=#89DDFF>(</color><color=#EEFFFF>hPrime</color><color=#89DDFF>);</color>
		<color=#EEFFFF>graph</color><color=#89DDFF>.</color><color=#BB80B3>setIndexing</color><color=#89DDFF>(</color><color=#EEFFFF>idx</color><color=#89DDFF>);</color>
		
		<color=#EEFFFF>JSONArray</color> <color=#EEFFFF>jsonObj</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>jsonParserArr</color><color=#89DDFF>(</color><color=#EEFFFF>filebrgAnyFull</color><color=#89DDFF>);</color>
		<color=#BB80B3>for</color> <color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>i</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#EEFFFF>i</color><color=#89DDFF><</color><color=#EEFFFF>jsonObj</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>();</color> <color=#89DDFF>++</color><color=#EEFFFF>i</color> <color=#89DDFF>){</color>
			<color=#EEFFFF>JSONObject</color> <color=#EEFFFF>o</color> <color=#89DDFF>=</color> <color=#89DDFF>(</color><color=#EEFFFF>JSONObject</color><color=#89DDFF>)</color> <color=#EEFFFF>jsonObj</color><color=#89DDFF>.</color><color=#BB80B3>get</color><color=#89DDFF>(</color><color=#EEFFFF>i</color><color=#89DDFF>);</color>
			
			<color=#EEFFFF>JSONObject</color> <color=#EEFFFF>inputs</color> <color=#89DDFF>=</color> <color=#EEFFFF>o</color><color=#89DDFF>.</color><color=#BB80B3>getJSONObject</color><color=#89DDFF>(</color><color=#C3E88D>"inputs"</color><color=#89DDFF>);</color>
			<color=#EEFFFF>JSONObject</color> <color=#EEFFFF>outputs</color> <color=#89DDFF>=</color> <color=#EEFFFF>o</color><color=#89DDFF>.</color><color=#BB80B3>getJSONObject</color><color=#89DDFF>(</color><color=#C3E88D>"outputs"</color><color=#89DDFF>);</color>
			
			<color=#BB80B3>int</color> <color=#EEFFFF>garlic</color> <color=#89DDFF>=</color> <color=#EEFFFF>inputs</color><color=#89DDFF>.</color><color=#BB80B3>getInt</color><color=#89DDFF>(</color><color=#C3E88D>"garlic"</color><color=#89DDFF>);</color>
			<color=#EEFFFF>String</color> <color=#EEFFFF>state</color> <color=#89DDFF>=</color> <color=#EEFFFF>inputs</color><color=#89DDFF>.</color><color=#BB80B3>getString</color><color=#89DDFF>(</color><color=#C3E88D>"state"</color><color=#89DDFF>);</color>
			<color=#BB80B3>int</color> <color=#EEFFFF>lambda</color> <color=#89DDFF>=</color> <color=#EEFFFF>inputs</color><color=#89DDFF>.</color><color=#BB80B3>getInt</color><color=#89DDFF>(</color><color=#C3E88D>"lambda"</color><color=#89DDFF>);</color>
			
			<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>stateArr</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>hex2bytes</color><color=#89DDFF>(</color><color=#EEFFFF>state</color><color=#89DDFF>);</color>
			<color=#BB80B3>byte</color><color=#89DDFF>[][]</color> <color=#EEFFFF>twoDimStateArr</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>oneDimByteArrToTwoDim</color><color=#89DDFF>(</color><color=#EEFFFF>stateArr</color><color=#89DDFF>,</color> <color=#F78C6C>64</color><color=#89DDFF>);</color>

			<color=#EEFFFF>String</color> <color=#EEFFFF>res</color> <color=#89DDFF>=</color> <color=#EEFFFF>outputs</color><color=#89DDFF>.</color><color=#BB80B3>getString</color><color=#89DDFF>(</color><color=#C3E88D>"res"</color><color=#89DDFF>);</color>

			<color=#BB80B3>byte</color><color=#89DDFF>[][]</color> <color=#EEFFFF>graphOutput</color> <color=#89DDFF>=</color> <color=#EEFFFF>graph</color><color=#89DDFF>.</color><color=#BB80B3>graph</color><color=#89DDFF>(</color><color=#EEFFFF>garlic</color><color=#89DDFF>,</color> <color=#EEFFFF>twoDimStateArr</color><color=#89DDFF>,</color> <color=#EEFFFF>lambda</color><color=#89DDFF>);</color>
			<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>output</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>twoDimByteArrayToOne</color><color=#89DDFF>(</color><color=#EEFFFF>graphOutput</color><color=#89DDFF>);</color>
			
			<color=#EEFFFF>assertTrue</color><color=#89DDFF>(</color><color=#EEFFFF>res</color><color=#89DDFF>.</color><color=#BB80B3>equals</color><color=#89DDFF>(</color><color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>bytes2hex</color><color=#89DDFF>(</color><color=#EEFFFF>output</color><color=#89DDFF>).</color><color=#BB80B3>toLowerCase</color><color=#89DDFF>()));</color>
		<color=#89DDFF>}</color>
	<color=#89DDFF>}</color>
	
	<color=#82AAFF>@Test</color> 
	<color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>testBRGIndex</color><color=#89DDFF>(){</color>
		
		
		<color=#EEFFFF>JSONArray</color> <color=#EEFFFF>jsonObj</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>jsonParserArr</color><color=#89DDFF>(</color><color=#EEFFFF>filebrgIndex</color><color=#89DDFF>);</color>
		<color=#BB80B3>for</color> <color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>i</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#EEFFFF>i</color><color=#89DDFF><</color><color=#EEFFFF>jsonObj</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>();</color> <color=#89DDFF>++</color><color=#EEFFFF>i</color> <color=#89DDFF>){</color>
			<color=#EEFFFF>JSONObject</color> <color=#EEFFFF>o</color> <color=#89DDFF>=</color> <color=#89DDFF>(</color><color=#EEFFFF>JSONObject</color><color=#89DDFF>)</color> <color=#EEFFFF>jsonObj</color><color=#89DDFF>.</color><color=#BB80B3>get</color><color=#89DDFF>(</color><color=#EEFFFF>i</color><color=#89DDFF>);</color>
			
			<color=#EEFFFF>JSONObject</color> <color=#EEFFFF>inputs</color> <color=#89DDFF>=</color> <color=#EEFFFF>o</color><color=#89DDFF>.</color><color=#BB80B3>getJSONObject</color><color=#89DDFF>(</color><color=#C3E88D>"inputs"</color><color=#89DDFF>);</color>
			<color=#EEFFFF>JSONObject</color> <color=#EEFFFF>outputs</color> <color=#89DDFF>=</color> <color=#EEFFFF>o</color><color=#89DDFF>.</color><color=#BB80B3>getJSONObject</color><color=#89DDFF>(</color><color=#C3E88D>"outputs"</color><color=#89DDFF>);</color>
			
			<color=#BB80B3>int</color> <color=#EEFFFF>index</color> <color=#89DDFF>=</color> <color=#EEFFFF>inputs</color><color=#89DDFF>.</color><color=#BB80B3>getInt</color><color=#89DDFF>(</color><color=#C3E88D>"index"</color><color=#89DDFF>);</color>
			<color=#BB80B3>int</color> <color=#EEFFFF>g</color> <color=#89DDFF>=</color> <color=#EEFFFF>inputs</color><color=#89DDFF>.</color><color=#BB80B3>getInt</color><color=#89DDFF>(</color><color=#C3E88D>"g"</color><color=#89DDFF>);</color>
			
			<color=#BB80B3>int</color> <color=#EEFFFF>exp</color> <color=#89DDFF>=</color> <color=#EEFFFF>outputs</color><color=#89DDFF>.</color><color=#BB80B3>getInt</color><color=#89DDFF>(</color><color=#C3E88D>"res"</color><color=#89DDFF>);</color>
			
			<color=#BB80B3>int</color> <color=#EEFFFF>act</color> <color=#89DDFF>=</color> <color=#EEFFFF>idxBrg</color><color=#89DDFF>.</color><color=#BB80B3>getIndex</color><color=#89DDFF>(</color><color=#EEFFFF>index</color><color=#89DDFF>,</color> <color=#EEFFFF>g</color><color=#89DDFF>);</color>
			
			<color=#EEFFFF>assertEquals</color><color=#89DDFF>(</color><color=#EEFFFF>exp</color><color=#89DDFF>,</color> <color=#EEFFFF>act</color><color=#89DDFF>);</color>
		<color=#89DDFF>}</color>
	<color=#89DDFF>}</color>
	
	<color=#82AAFF>@Test</color>
	<color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>test</color><color=#89DDFF>()</color> <color=#89DDFF>{</color>
		<color=#EEFFFF>assertEquals</color><color=#89DDFF>(</color><color=#F78C6C>12</color><color=#89DDFF>,</color> <color=#EEFFFF>idxBrg</color><color=#89DDFF>.</color><color=#BB80B3>getIndex</color><color=#89DDFF>(</color><color=#F78C6C>3</color><color=#89DDFF>,</color> <color=#F78C6C>4</color><color=#89DDFF>));</color>
		<color=#EEFFFF>assertEquals</color><color=#89DDFF>(</color><color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>idxBrg</color><color=#89DDFF>.</color><color=#BB80B3>getIndex</color><color=#89DDFF>(</color><color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#F78C6C>4</color><color=#89DDFF>));</color>
		<color=#EEFFFF>assertEquals</color><color=#89DDFF>(</color><color=#F78C6C>1</color><color=#89DDFF>,</color> <color=#EEFFFF>idxBrg</color><color=#89DDFF>.</color><color=#BB80B3>getIndex</color><color=#89DDFF>(</color><color=#F78C6C>1</color><color=#89DDFF>,</color> <color=#F78C6C>1</color><color=#89DDFF>));</color>
		<color=#EEFFFF>assertEquals</color><color=#89DDFF>(</color><color=#F78C6C>15</color><color=#89DDFF>,</color> <color=#EEFFFF>idxBrg</color><color=#89DDFF>.</color><color=#BB80B3>getIndex</color><color=#89DDFF>(</color><color=#F78C6C>15</color><color=#89DDFF>,</color> <color=#F78C6C>4</color><color=#89DDFF>));</color>
		<color=#EEFFFF>assertEquals</color><color=#89DDFF>(</color><color=#F78C6C>1</color><color=#89DDFF>,</color> <color=#EEFFFF>idxBrg</color><color=#89DDFF>.</color><color=#BB80B3>getIndex</color><color=#89DDFF>(</color><color=#F78C6C>8</color><color=#89DDFF>,</color> <color=#F78C6C>4</color><color=#89DDFF>));</color>
		<color=#EEFFFF>assertEquals</color><color=#89DDFF>(</color><color=#F78C6C>4</color><color=#89DDFF>,</color> <color=#EEFFFF>idxBrg</color><color=#89DDFF>.</color><color=#BB80B3>getIndex</color><color=#89DDFF>(</color><color=#F78C6C>4</color><color=#89DDFF>,</color> <color=#F78C6C>5</color><color=#89DDFF>));</color>
		<color=#EEFFFF>assertEquals</color><color=#89DDFF>(</color><color=#F78C6C>86</color><color=#89DDFF>,</color> <color=#EEFFFF>idxBrg</color><color=#89DDFF>.</color><color=#BB80B3>getIndex</color><color=#89DDFF>(</color><color=#F78C6C>53</color><color=#89DDFF>,</color> <color=#F78C6C>7</color><color=#89DDFF>));</color>
		<color=#EEFFFF>assertEquals</color><color=#89DDFF>(</color><color=#F78C6C>2688</color><color=#89DDFF>,</color> <color=#EEFFFF>idxBrg</color><color=#89DDFF>.</color><color=#BB80B3>getIndex</color><color=#89DDFF>(</color><color=#F78C6C>42</color><color=#89DDFF>,</color> <color=#F78C6C>13</color><color=#89DDFF>));</color>
		
<color=#546E7A>//		System.out.println(idxBrg.getIndex(20, 21));</color>
<color=#546E7A>//		System.out.println(idxBrg.getIndex((long)2097151, 21));</color>
<color=#546E7A>//		</color>
		<color=#EEFFFF>assertEquals</color><color=#89DDFF>(</color><color=#F78C6C>12</color><color=#89DDFF>,</color> <color=#EEFFFF>idxBrg</color><color=#89DDFF>.</color><color=#BB80B3>getIndex</color><color=#89DDFF>((</color><color=#BB80B3>long</color><color=#89DDFF>)</color><color=#F78C6C>3</color><color=#89DDFF>,</color> <color=#F78C6C>4</color><color=#89DDFF>));</color>
		<color=#EEFFFF>assertEquals</color><color=#89DDFF>(</color><color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>idxBrg</color><color=#89DDFF>.</color><color=#BB80B3>getIndex</color><color=#89DDFF>((</color><color=#BB80B3>long</color><color=#89DDFF>)</color><color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#F78C6C>4</color><color=#89DDFF>));</color>
		<color=#EEFFFF>assertEquals</color><color=#89DDFF>(</color><color=#F78C6C>1</color><color=#89DDFF>,</color> <color=#EEFFFF>idxBrg</color><color=#89DDFF>.</color><color=#BB80B3>getIndex</color><color=#89DDFF>((</color><color=#BB80B3>long</color><color=#89DDFF>)</color><color=#F78C6C>1</color><color=#89DDFF>,</color> <color=#F78C6C>1</color><color=#89DDFF>));</color>
		<color=#EEFFFF>assertEquals</color><color=#89DDFF>(</color><color=#F78C6C>15</color><color=#89DDFF>,</color> <color=#EEFFFF>idxBrg</color><color=#89DDFF>.</color><color=#BB80B3>getIndex</color><color=#89DDFF>((</color><color=#BB80B3>long</color><color=#89DDFF>)</color><color=#F78C6C>15</color><color=#89DDFF>,</color> <color=#F78C6C>4</color><color=#89DDFF>));</color>
		<color=#EEFFFF>assertEquals</color><color=#89DDFF>(</color><color=#F78C6C>1</color><color=#89DDFF>,</color> <color=#EEFFFF>idxBrg</color><color=#89DDFF>.</color><color=#BB80B3>getIndex</color><color=#89DDFF>((</color><color=#BB80B3>long</color><color=#89DDFF>)</color><color=#F78C6C>8</color><color=#89DDFF>,</color> <color=#F78C6C>4</color><color=#89DDFF>));</color>
		<color=#EEFFFF>assertEquals</color><color=#89DDFF>(</color><color=#F78C6C>4</color><color=#89DDFF>,</color> <color=#EEFFFF>idxBrg</color><color=#89DDFF>.</color><color=#BB80B3>getIndex</color><color=#89DDFF>((</color><color=#BB80B3>long</color><color=#89DDFF>)</color><color=#F78C6C>4</color><color=#89DDFF>,</color> <color=#F78C6C>5</color><color=#89DDFF>));</color>
		<color=#EEFFFF>assertEquals</color><color=#89DDFF>(</color><color=#F78C6C>86</color><color=#89DDFF>,</color> <color=#EEFFFF>idxBrg</color><color=#89DDFF>.</color><color=#BB80B3>getIndex</color><color=#89DDFF>((</color><color=#BB80B3>long</color><color=#89DDFF>)</color><color=#F78C6C>53</color><color=#89DDFF>,</color> <color=#F78C6C>7</color><color=#89DDFF>));</color>
		<color=#EEFFFF>assertEquals</color><color=#89DDFF>(</color><color=#F78C6C>2688</color><color=#89DDFF>,</color> <color=#EEFFFF>idxBrg</color><color=#89DDFF>.</color><color=#BB80B3>getIndex</color><color=#89DDFF>((</color><color=#BB80B3>long</color><color=#89DDFF>)</color><color=#F78C6C>42</color><color=#89DDFF>,</color> <color=#F78C6C>13</color><color=#89DDFF>));</color>
	<color=#89DDFF>}</color>
	
	<color=#82AAFF>@Test</color>
	<color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>testIndexBRG1</color><color=#89DDFF>(){</color>
		<color=#BB80B3>int</color> <color=#EEFFFF>input1</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color>
		<color=#BB80B3>int</color> <color=#EEFFFF>input2</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color>
		<color=#BB80B3>int</color> <color=#EEFFFF>input3</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color>
		<color=#EEFFFF>IdxInterface</color> <color=#EEFFFF>idx</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>IndexBRG</color><color=#89DDFF>();</color>
		<color=#BB80B3>long</color> <color=#EEFFFF>actual</color> <color=#89DDFF>=</color> <color=#EEFFFF>idx</color><color=#89DDFF>.</color><color=#BB80B3>getIndex</color><color=#89DDFF>(</color><color=#EEFFFF>input1</color><color=#89DDFF>,</color> <color=#EEFFFF>input2</color><color=#89DDFF>,</color> <color=#EEFFFF>input3</color><color=#89DDFF>);</color>
		<color=#BB80B3>long</color> <color=#EEFFFF>expected</color> <color=#89DDFF>=</color> <color=#89DDFF>-</color><color=#F78C6C>1</color><color=#89DDFF>;</color>
		<color=#EEFFFF>assertEquals</color><color=#89DDFF>(</color><color=#EEFFFF>expected</color><color=#89DDFF>,</color> <color=#EEFFFF>actual</color><color=#89DDFF>);</color>
	<color=#89DDFF>}</color>
	
	<color=#82AAFF>@Test</color>
	<color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>testIndexBRG2</color><color=#89DDFF>(){</color>
		<color=#BB80B3>long</color> <color=#EEFFFF>input1</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color>
		<color=#BB80B3>long</color> <color=#EEFFFF>input2</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color>
		<color=#BB80B3>int</color> <color=#EEFFFF>input3</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color>
		<color=#EEFFFF>IdxInterface</color> <color=#EEFFFF>idx</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>IndexBRG</color><color=#89DDFF>();</color>
		<color=#BB80B3>long</color> <color=#EEFFFF>actual</color> <color=#89DDFF>=</color> <color=#EEFFFF>idx</color><color=#89DDFF>.</color><color=#BB80B3>getIndex</color><color=#89DDFF>(</color><color=#EEFFFF>input1</color><color=#89DDFF>,</color> <color=#EEFFFF>input2</color><color=#89DDFF>,</color> <color=#EEFFFF>input3</color><color=#89DDFF>);</color>
		<color=#BB80B3>long</color> <color=#EEFFFF>expected</color> <color=#89DDFF>=</color> <color=#89DDFF>-</color><color=#F78C6C>1</color><color=#89DDFF>;</color>
		<color=#EEFFFF>assertEquals</color><color=#89DDFF>(</color><color=#EEFFFF>expected</color><color=#89DDFF>,</color> <color=#EEFFFF>actual</color><color=#89DDFF>);</color>
	<color=#89DDFF>}</color>
<color=#89DDFF>}</color>