<color=#89DDFF>package</color> <color=#FFCB6B>test.java</color><color=#89DDFF>;</color>

<color=#89DDFF>import static</color> <color=#FFCB6B>org.junit.Assert.*</color><color=#89DDFF>;</color>

<color=#89DDFF>import</color> <color=#FFCB6B>org.junit.Test</color><color=#89DDFF>;</color>

<color=#89DDFF>import</color> <color=#FFCB6B>main.java.Helper</color><color=#89DDFF>;</color>


<color=#BB80B3>public</color> <color=#BB80B3>class</color> <color=#FFCB6B>HelperTest</color> <color=#89DDFF>{</color>
	
	<color=#BB80B3>private</color> <color=#EEFFFF>Helper</color> <color=#EEFFFF>helper</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>Helper</color><color=#89DDFF>();</color>
	
	<color=#EEFFFF>String</color> <color=#EEFFFF>hash1XORING</color> <color=#89DDFF>=</color> <color=#C3E88D>"1568"</color><color=#89DDFF>;</color>
	<color=#EEFFFF>String</color> <color=#EEFFFF>hash2XORING</color> <color=#89DDFF>=</color> <color=#C3E88D>"10ab"</color><color=#89DDFF>;</color>

	<color=#82AAFF>@Test</color>
	<color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>testConcateByteArrays</color><color=#89DDFF>()</color> <color=#89DDFF>{</color>
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>a</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#F78C6C>2</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>b</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#F78C6C>3</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
		
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>c</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>concateByteArrays</color><color=#89DDFF>(</color><color=#EEFFFF>a</color><color=#89DDFF>,</color> <color=#EEFFFF>b</color><color=#89DDFF>);</color>
		
		<color=#EEFFFF>assertEquals</color><color=#89DDFF>(</color><color=#EEFFFF>c</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>,</color> <color=#EEFFFF>a</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>+</color><color=#EEFFFF>b</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>);</color>
	<color=#89DDFF>}</color>
	
	<color=#82AAFF>@Test</color>
	<color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>testoneDimByteArrToTwoDim</color><color=#89DDFF>(){</color>
		<color=#BB80B3>int</color> <color=#EEFFFF>len</color> <color=#89DDFF>=</color> <color=#F78C6C>64</color><color=#89DDFF>;</color>
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>b</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>hex2bytes</color><color=#89DDFF>(</color><color=#C3E88D>"3d6d5d5b1b159210437827d4956b9775bfd3"</color>
				<color=#89DDFF>+</color> <color=#C3E88D>"dab68f98e958cff9f64f62155168b432f1e248b41573918"</color>
				<color=#89DDFF>+</color> <color=#C3E88D>"7dc7894e2c53167e0c3142dea5a8e4faac7d29fdac127b7"</color>
				<color=#89DDFF>+</color> <color=#C3E88D>"7b4f34758083a59b44e9c22917d6ee598485f414500bbd0"</color>
				<color=#89DDFF>+</color> <color=#C3E88D>"69c142177fba6b7815ab47fe7a6a01e7ab20f9217a5549a"</color>
				<color=#89DDFF>+</color> <color=#C3E88D>"f3aaba255957bb979f46db5e2014cbb733e161e765fa206"</color>
				<color=#89DDFF>+</color> <color=#C3E88D>"42ef4e1c18a8b7fee7339cd547aaf9bdbdbe5f11739118b"</color>
				<color=#89DDFF>+</color> <color=#C3E88D>"b3f6c9abce48337e6cfaff168d7910fbcb0aa3c265ba426"</color>
				<color=#89DDFF>+</color> <color=#C3E88D>"ff71ff5d2c2d74c5f769716a0ee29b7bf4ad1f1f9eab0a4"</color>
				<color=#89DDFF>+</color> <color=#C3E88D>"58cf222a89f0a1822c5d21b3d7db9092aacabaee9cd97b6"</color>
				<color=#89DDFF>+</color> <color=#C3E88D>"870987b9fddf97180cbd496c2e459eca027eae9f9798acc"</color>
				<color=#89DDFF>+</color> <color=#C3E88D>"255835"</color><color=#89DDFF>);</color>
		
		<color=#BB80B3>byte</color><color=#89DDFF>[][]</color> <color=#EEFFFF>expected</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#F78C6C>4</color><color=#89DDFF>][</color><color=#F78C6C>64</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
		<color=#EEFFFF>expected</color><color=#89DDFF>[</color><color=#F78C6C>0</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>hex2bytes</color><color=#89DDFF>(</color><color=#C3E88D>"3d6d5d5b1b159210437827d4956"</color>
				<color=#89DDFF>+</color> <color=#C3E88D>"b9775bfd3dab68f98e958cff9f64f62155168b432f1e248b"</color>
				<color=#89DDFF>+</color> <color=#C3E88D>"415739187dc7894e2c53167e0c3142dea5a8e4faac7d29fd"</color>
				<color=#89DDFF>+</color> <color=#C3E88D>"ac127"</color><color=#89DDFF>);</color>
		<color=#EEFFFF>expected</color><color=#89DDFF>[</color><color=#F78C6C>1</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>hex2bytes</color><color=#89DDFF>(</color><color=#C3E88D>"b77b4f34758083a59b44e9c2291"</color>
				<color=#89DDFF>+</color> <color=#C3E88D>"7d6ee598485f414500bbd069c142177fba6b7815ab47fe7a"</color>
				<color=#89DDFF>+</color> <color=#C3E88D>"6a01e7ab20f9217a5549af3aaba255957bb979f46db5e201"</color>
				<color=#89DDFF>+</color> <color=#C3E88D>"4cbb7"</color><color=#89DDFF>);</color>
		<color=#EEFFFF>expected</color><color=#89DDFF>[</color><color=#F78C6C>2</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>hex2bytes</color><color=#89DDFF>(</color><color=#C3E88D>"33e161e765fa20642ef4e1c18a8"</color>
				<color=#89DDFF>+</color> <color=#C3E88D>"b7fee7339cd547aaf9bdbdbe5f11739118bb3f6c9abce483"</color>
				<color=#89DDFF>+</color> <color=#C3E88D>"37e6cfaff168d7910fbcb0aa3c265ba426ff71ff5d2c2d74"</color>
				<color=#89DDFF>+</color> <color=#C3E88D>"c5f76"</color><color=#89DDFF>);</color>
		<color=#EEFFFF>expected</color><color=#89DDFF>[</color><color=#F78C6C>3</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>hex2bytes</color><color=#89DDFF>(</color><color=#C3E88D>"9716a0ee29b7bf4ad1f1f9eab0a"</color>
				<color=#89DDFF>+</color> <color=#C3E88D>"458cf222a89f0a1822c5d21b3d7db9092aacabaee9cd97b6"</color>
				<color=#89DDFF>+</color> <color=#C3E88D>"870987b9fddf97180cbd496c2e459eca027eae9f9798acc2"</color>
				<color=#89DDFF>+</color> <color=#C3E88D>"55835"</color><color=#89DDFF>);</color>

		<color=#BB80B3>byte</color><color=#89DDFF>[][]</color> <color=#EEFFFF>out</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>oneDimByteArrToTwoDim</color><color=#89DDFF>(</color><color=#EEFFFF>b</color><color=#89DDFF>,</color> <color=#EEFFFF>len</color><color=#89DDFF>);</color>
		
		<color=#BB80B3>for</color> <color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>i</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#EEFFFF>i</color> <color=#89DDFF><</color> <color=#EEFFFF>expected</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>;</color> <color=#89DDFF>++</color><color=#EEFFFF>i</color><color=#89DDFF>){</color>
			<color=#EEFFFF>assertArrayEquals</color><color=#89DDFF>(</color><color=#EEFFFF>expected</color><color=#89DDFF>[</color><color=#EEFFFF>i</color><color=#89DDFF>]</color><color=#89DDFF>,</color> <color=#EEFFFF>out</color><color=#89DDFF>[</color><color=#EEFFFF>i</color><color=#89DDFF>]</color><color=#89DDFF>);</color>
		<color=#89DDFF>}</color>
	<color=#89DDFF>}</color>
	
	<color=#82AAFF>@Test</color>
	<color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>testXor</color><color=#89DDFF>(){</color>
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>a</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color><color=#89DDFF>{</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>1</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>1</color><color=#89DDFF>};</color>
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>b</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color><color=#89DDFF>{</color><color=#F78C6C>1</color><color=#89DDFF>,</color><color=#F78C6C>1</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>1</color><color=#89DDFF>};</color>
		
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>res</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color><color=#89DDFF>{</color><color=#F78C6C>1</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>};</color>
		
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>c</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>xor</color><color=#89DDFF>(</color><color=#EEFFFF>a</color><color=#89DDFF>,</color> <color=#EEFFFF>b</color><color=#89DDFF>);</color>
		<color=#BB80B3>for</color> <color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>i</color><color=#89DDFF>=</color><color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#EEFFFF>i</color><color=#89DDFF><</color><color=#EEFFFF>res</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>;</color> <color=#89DDFF>++</color><color=#EEFFFF>i</color><color=#89DDFF>){</color>
			<color=#EEFFFF>assertEquals</color><color=#89DDFF>(</color><color=#EEFFFF>res</color><color=#89DDFF>[</color><color=#EEFFFF>i</color><color=#89DDFF>]</color><color=#89DDFF>,</color> <color=#EEFFFF>c</color><color=#89DDFF>[</color><color=#EEFFFF>i</color><color=#89DDFF>]</color><color=#89DDFF>);</color>
		<color=#89DDFF>}</color>
	<color=#89DDFF>}</color>
	
	<color=#82AAFF>@Test</color>
	<color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>testXorHash</color><color=#89DDFF>(){</color>
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>a</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>hex2bytes</color><color=#89DDFF>(</color><color=#EEFFFF>hash1XORING</color><color=#89DDFF>);</color>
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>b</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>hex2bytes</color><color=#89DDFF>(</color><color=#EEFFFF>hash1XORING</color><color=#89DDFF>);</color>
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>c</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>hex2bytes</color><color=#89DDFF>(</color><color=#EEFFFF>hash2XORING</color><color=#89DDFF>);</color>
		
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>x</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>xor</color><color=#89DDFF>(</color><color=#EEFFFF>a</color><color=#89DDFF>,</color> <color=#EEFFFF>b</color><color=#89DDFF>);</color>
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>y</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>xor</color><color=#89DDFF>(</color><color=#EEFFFF>a</color><color=#89DDFF>,</color> <color=#EEFFFF>c</color><color=#89DDFF>);</color>
		
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>resAB</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>hex2bytes</color><color=#89DDFF>(</color><color=#C3E88D>"0000"</color><color=#89DDFF>);</color>
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>resAC</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>hex2bytes</color><color=#89DDFF>(</color><color=#C3E88D>"05c3"</color><color=#89DDFF>);</color>
		
		<color=#EEFFFF>assertArrayEquals</color><color=#89DDFF>(</color><color=#EEFFFF>resAB</color><color=#89DDFF>,</color> <color=#EEFFFF>x</color><color=#89DDFF>);</color>
		<color=#EEFFFF>assertArrayEquals</color><color=#89DDFF>(</color><color=#EEFFFF>resAC</color><color=#89DDFF>,</color> <color=#EEFFFF>y</color><color=#89DDFF>);</color>
	<color=#89DDFF>}</color>
	
	<color=#82AAFF>@Test</color>
	<color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>testIntToByteArray2</color><color=#89DDFF>(){</color>
		<color=#BB80B3>int</color> <color=#EEFFFF>input</color> <color=#89DDFF>=</color> <color=#F78C6C>12</color><color=#89DDFF>;</color>
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>exp</color> <color=#89DDFF>=</color> <color=#89DDFF>{</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>12</color><color=#89DDFF>};</color>
		
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>act</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>intToByteArray</color><color=#89DDFF>(</color><color=#EEFFFF>input</color><color=#89DDFF>,</color> <color=#F78C6C>2</color><color=#89DDFF>);</color>
		
		<color=#EEFFFF>assertArrayEquals</color><color=#89DDFF>(</color><color=#EEFFFF>exp</color><color=#89DDFF>,</color> <color=#EEFFFF>act</color><color=#89DDFF>);</color>
	<color=#89DDFF>}</color>
	
	<color=#82AAFF>@Test</color>
	<color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>testIntToByteArray4</color><color=#89DDFF>(){</color>
		<color=#BB80B3>int</color> <color=#EEFFFF>input</color> <color=#89DDFF>=</color> <color=#F78C6C>12</color><color=#89DDFF>;</color>
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>exp</color> <color=#89DDFF>=</color> <color=#89DDFF>{</color><color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#F78C6C>12</color><color=#89DDFF>};</color>
		
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>act</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>intToByteArray</color><color=#89DDFF>(</color><color=#EEFFFF>input</color><color=#89DDFF>,</color> <color=#F78C6C>4</color><color=#89DDFF>);</color>
		
		<color=#EEFFFF>assertArrayEquals</color><color=#89DDFF>(</color><color=#EEFFFF>exp</color><color=#89DDFF>,</color> <color=#EEFFFF>act</color><color=#89DDFF>);</color>
	<color=#89DDFF>}</color>
	
	<color=#82AAFF>@Test</color>
	<color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>testIntToByteArray0</color><color=#89DDFF>(){</color>
		<color=#BB80B3>int</color> <color=#EEFFFF>input</color> <color=#89DDFF>=</color> <color=#F78C6C>12</color><color=#89DDFF>;</color>
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>exp</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#F78C6C>1</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
		
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>act</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>intToByteArray</color><color=#89DDFF>(</color><color=#EEFFFF>input</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>);</color>
		
		<color=#EEFFFF>assertArrayEquals</color><color=#89DDFF>(</color><color=#EEFFFF>exp</color><color=#89DDFF>,</color> <color=#EEFFFF>act</color><color=#89DDFF>);</color>
	<color=#89DDFF>}</color>
	
	<color=#82AAFF>@Test</color>
	<color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>testBytesToInt</color><color=#89DDFF>(){</color>
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>bytes</color> <color=#89DDFF>=</color> <color=#89DDFF>{</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>12</color><color=#89DDFF>};</color>
		<color=#BB80B3>int</color> <color=#EEFFFF>act</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>bytesToInt</color><color=#89DDFF>(</color><color=#EEFFFF>bytes</color><color=#89DDFF>);</color>
		<color=#BB80B3>int</color> <color=#EEFFFF>exp</color> <color=#89DDFF>=</color> <color=#F78C6C>12</color><color=#89DDFF>;</color>
		
		<color=#EEFFFF>assertEquals</color><color=#89DDFF>(</color><color=#EEFFFF>exp</color><color=#89DDFF>,</color> <color=#EEFFFF>act</color><color=#89DDFF>);</color>
	<color=#89DDFF>}</color>
	
	<color=#82AAFF>@Test</color>
	<color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>testIntToBytes</color><color=#89DDFF>(){</color>
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>exp</color> <color=#89DDFF>=</color> <color=#89DDFF>{</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>12</color><color=#89DDFF>};</color>
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>act</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>intToBytes</color><color=#89DDFF>(</color><color=#F78C6C>12</color><color=#89DDFF>);</color>

		<color=#EEFFFF>assertArrayEquals</color><color=#89DDFF>(</color><color=#EEFFFF>exp</color><color=#89DDFF>,</color> <color=#EEFFFF>act</color><color=#89DDFF>);</color>
	<color=#89DDFF>}</color>
	
	<color=#82AAFF>@Test</color>
	<color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>testBytesToLong</color><color=#89DDFF>(){</color>
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>bytes</color> <color=#89DDFF>=</color> <color=#89DDFF>{</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>12</color><color=#89DDFF>};</color>
		<color=#BB80B3>long</color> <color=#EEFFFF>act</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>bytesToLong</color><color=#89DDFF>(</color><color=#EEFFFF>bytes</color><color=#89DDFF>);</color>
		<color=#BB80B3>long</color> <color=#EEFFFF>exp</color> <color=#89DDFF>=</color> <color=#F78C6C>12</color><color=#89DDFF>;</color>
		
		<color=#EEFFFF>assertEquals</color><color=#89DDFF>(</color><color=#EEFFFF>exp</color><color=#89DDFF>,</color> <color=#EEFFFF>act</color><color=#89DDFF>);</color>
	<color=#89DDFF>}</color>
	
	<color=#82AAFF>@Test</color>
	<color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>testLongToBytes</color><color=#89DDFF>(){</color>
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>exp</color> <color=#89DDFF>=</color> <color=#89DDFF>{</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>12</color><color=#89DDFF>};</color>
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>act</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>longToBytes</color><color=#89DDFF>(</color><color=#F78C6C>12</color><color=#89DDFF>);</color>

		<color=#EEFFFF>assertArrayEquals</color><color=#89DDFF>(</color><color=#EEFFFF>exp</color><color=#89DDFF>,</color> <color=#EEFFFF>act</color><color=#89DDFF>);</color>
	<color=#89DDFF>}</color>
	
	<color=#82AAFF>@Test</color>
	<color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>testPaddWithZero</color><color=#89DDFF>(){</color>
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>inp</color> <color=#89DDFF>=</color> <color=#89DDFF>{</color><color=#F78C6C>12</color><color=#89DDFF>,</color><color=#F78C6C>13</color><color=#89DDFF>,</color><color=#F78C6C>14</color><color=#89DDFF>};</color>
		<color=#BB80B3>int</color> <color=#EEFFFF>l</color> <color=#89DDFF>=</color> <color=#F78C6C>10</color><color=#89DDFF>;</color>
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>act</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>paddWithZero</color><color=#89DDFF>(</color><color=#EEFFFF>inp</color><color=#89DDFF>,</color> <color=#EEFFFF>l</color><color=#89DDFF>);</color>
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>exp</color> <color=#89DDFF>=</color> <color=#89DDFF>{</color><color=#F78C6C>12</color><color=#89DDFF>,</color><color=#F78C6C>13</color><color=#89DDFF>,</color><color=#F78C6C>14</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>};</color>
		
		<color=#EEFFFF>assertArrayEquals</color><color=#89DDFF>(</color><color=#EEFFFF>exp</color><color=#89DDFF>,</color> <color=#EEFFFF>act</color><color=#89DDFF>);</color>
	<color=#89DDFF>}</color>
	
	<color=#82AAFF>@Test</color>
	<color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>testintToByteArrayLittleEndian</color><color=#89DDFF>(){</color>
		<color=#BB80B3>int</color> <color=#EEFFFF>input</color> <color=#89DDFF>=</color> <color=#F78C6C>12</color><color=#89DDFF>;</color>
		<color=#BB80B3>int</color> <color=#EEFFFF>bytes</color> <color=#89DDFF>=</color> <color=#F78C6C>4</color><color=#89DDFF>;</color>
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>actual</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>intToByteArrayLittleEndian</color><color=#89DDFF>(</color><color=#EEFFFF>input</color><color=#89DDFF>,</color> <color=#EEFFFF>bytes</color><color=#89DDFF>);</color>
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>expected</color> <color=#89DDFF>=</color> <color=#89DDFF>{</color><color=#F78C6C>12</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>0</color><color=#89DDFF>};</color>
		<color=#EEFFFF>assertArrayEquals</color><color=#89DDFF>(</color><color=#EEFFFF>expected</color><color=#89DDFF>,</color> <color=#EEFFFF>actual</color><color=#89DDFF>);</color>
	<color=#89DDFF>}</color>
	
	<color=#82AAFF>@Test</color>
	<color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>testintToByteArrayLittleEndian0</color><color=#89DDFF>(){</color>
		<color=#BB80B3>int</color> <color=#EEFFFF>input</color> <color=#89DDFF>=</color> <color=#F78C6C>12</color><color=#89DDFF>;</color>
		<color=#BB80B3>int</color> <color=#EEFFFF>bytes</color> <color=#89DDFF>=</color> <color=#F78C6C>1</color><color=#89DDFF>;</color>
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>actual</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>intToByteArrayLittleEndian</color><color=#89DDFF>(</color><color=#EEFFFF>input</color><color=#89DDFF>,</color> <color=#EEFFFF>bytes</color><color=#89DDFF>);</color>
		<color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>expected</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#F78C6C>1</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
		<color=#EEFFFF>assertArrayEquals</color><color=#89DDFF>(</color><color=#EEFFFF>expected</color><color=#89DDFF>,</color> <color=#EEFFFF>actual</color><color=#89DDFF>);</color>
	<color=#89DDFF>}</color>
	
<color=#89DDFF>}</color>