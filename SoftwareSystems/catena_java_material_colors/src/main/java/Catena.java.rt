<color=#89DDFF>package</color> <color=#FFCB6B>main.java</color><color=#89DDFF>;</color>

<color=#89DDFF>import</color> <color=#FFCB6B>java.util.Arrays</color><color=#89DDFF>;</color>
<color=#89DDFF>import</color> <color=#FFCB6B>java.util.Random</color><color=#89DDFF>;</color>

<color=#89DDFF>import</color> <color=#FFCB6B>main.java.components.gamma.GammaInterface</color><color=#89DDFF>;</color>
<color=#89DDFF>import</color> <color=#FFCB6B>main.java.components.graph.GraphInterface</color><color=#89DDFF>;</color>
<color=#89DDFF>import</color> <color=#FFCB6B>main.java.components.graph.algorithms.IdxInterface</color><color=#89DDFF>;</color>
<color=#89DDFF>import</color> <color=#FFCB6B>main.java.components.hash.HashInterface</color><color=#89DDFF>;</color>
<color=#89DDFF>import</color> <color=#FFCB6B>main.java.components.phi.PhiInterface</color><color=#89DDFF>;</color>

<color=#BB80B3>public</color> <color=#BB80B3>class</color> <color=#FFCB6B>Catena</color> <color=#89DDFF>{</color>
    
    <color=#BB80B3>private</color> <color=#EEFFFF>Helper</color> <color=#EEFFFF>helper</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>Helper</color><color=#89DDFF>();</color>
    
    <color=#546E7A>/**</color>
<color=#546E7A>     * versionID decodes the version of catena</color>
<color=#546E7A>     * possible: "Dragonfly", "Dragonfly-Full", Butterfly", Butterfly-Full"</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>private</color> <color=#EEFFFF>String</color> <color=#EEFFFF>_vId</color><color=#89DDFF>;</color>
    
    <color=#BB80B3>private</color> <color=#EEFFFF>HashInterface</color>   <color=#EEFFFF>_h</color><color=#89DDFF>;</color>
    <color=#BB80B3>private</color> <color=#EEFFFF>HashInterface</color>   <color=#EEFFFF>_hPrime</color><color=#89DDFF>;</color>
    <color=#BB80B3>private</color> <color=#EEFFFF>GammaInterface</color>  <color=#EEFFFF>_gamma</color><color=#89DDFF>;</color>
    <color=#BB80B3>private</color> <color=#EEFFFF>GraphInterface</color>  <color=#EEFFFF>_f</color><color=#89DDFF>;</color>
    <color=#BB80B3>private</color> <color=#EEFFFF>PhiInterface</color>    <color=#EEFFFF>_phi</color><color=#89DDFF>;</color>
    
    <color=#BB80B3>private</color> <color=#BB80B3>int</color> <color=#EEFFFF>_d</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color>         <color=#546E7A>// 0 = Password Scrambling (Default)</color>
    <color=#BB80B3>private</color> <color=#BB80B3>int</color> <color=#EEFFFF>_n</color><color=#89DDFF>;</color>             <color=#546E7A>// H output size</color>
    <color=#BB80B3>private</color> <color=#BB80B3>int</color> <color=#EEFFFF>_k</color><color=#89DDFF>;</color>             <color=#546E7A>// H' output size</color>
    <color=#BB80B3>private</color> <color=#BB80B3>int</color> <color=#EEFFFF>_gLow</color><color=#89DDFF>;</color>          
    <color=#BB80B3>private</color> <color=#BB80B3>int</color> <color=#EEFFFF>_gHigh</color><color=#89DDFF>;</color>
    <color=#BB80B3>private</color> <color=#BB80B3>int</color> <color=#EEFFFF>_lambda</color><color=#89DDFF>;</color>
    
    <color=#546E7A>/**</color>
<color=#546E7A>     * Main function of catena to hash a password</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param pwd           Password to be hashed</color>
<color=#546E7A>     * @param salt          Salt of arbitrary length</color>
<color=#546E7A>     * @param publicInput   User choosen public input</color>
<color=#546E7A>     * @param gamma         Input for graph size</color>
<color=#546E7A>     * @param m             User desired output length of hash</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @return xTrun        Hash of pwd</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#82AAFF>catena</color><color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>pwd</color><color=#89DDFF>,</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>salt</color><color=#89DDFF>,</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>publicInput</color><color=#89DDFF>,</color>
             <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>gamma</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>m</color><color=#89DDFF>){</color>
        
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>t</color> <color=#89DDFF>=</color> <color=#EEFFFF>compTweak</color><color=#89DDFF>(</color><color=#EEFFFF>_vId</color><color=#89DDFF>,</color> <color=#EEFFFF>_d</color><color=#89DDFF>,</color> <color=#EEFFFF>_lambda</color><color=#89DDFF>,</color> <color=#EEFFFF>m</color><color=#89DDFF>,</color> <color=#EEFFFF>salt</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>,</color> <color=#EEFFFF>publicInput</color><color=#89DDFF>);</color>
        
        <color=#EEFFFF>_h</color><color=#89DDFF>.</color><color=#BB80B3>update</color><color=#89DDFF>(</color><color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>concateByteArrays</color><color=#89DDFF>(</color><color=#EEFFFF>t</color><color=#89DDFF>,</color> <color=#EEFFFF>pwd</color><color=#89DDFF>,</color> <color=#EEFFFF>salt</color><color=#89DDFF>));</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>x</color> <color=#89DDFF>=</color> <color=#EEFFFF>_h</color><color=#89DDFF>.</color><color=#BB80B3>doFinal</color><color=#89DDFF>();</color>
        
        <color=#EEFFFF>erasePwd</color><color=#89DDFF>(</color><color=#EEFFFF>pwd</color><color=#89DDFF>);</color>
        
        <color=#EEFFFF>x</color> <color=#89DDFF>=</color> <color=#EEFFFF>flap</color><color=#89DDFF>(((</color><color=#EEFFFF>_gLow</color><color=#89DDFF>+</color><color=#F78C6C>1</color><color=#89DDFF>)</color><color=#89DDFF>/</color><color=#F78C6C>2</color><color=#89DDFF>),</color> <color=#EEFFFF>x</color><color=#89DDFF>,</color> <color=#EEFFFF>gamma</color><color=#89DDFF>);</color>
        
        <color=#EEFFFF>_h</color><color=#89DDFF>.</color><color=#BB80B3>update</color><color=#89DDFF>(</color><color=#EEFFFF>x</color><color=#89DDFF>);</color>
        <color=#EEFFFF>x</color> <color=#89DDFF>=</color> <color=#EEFFFF>_h</color><color=#89DDFF>.</color><color=#BB80B3>doFinal</color><color=#89DDFF>();</color>
        
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>gByte</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#F78C6C>1</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
        
        <color=#BB80B3>for</color> <color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>g</color> <color=#89DDFF>=</color> <color=#EEFFFF>_gLow</color><color=#89DDFF>;</color> <color=#EEFFFF>g</color> <color=#89DDFF><=</color> <color=#EEFFFF>_gHigh</color><color=#89DDFF>;</color> <color=#89DDFF>++</color><color=#EEFFFF>g</color><color=#89DDFF>){</color>
<color=#546E7A>//          System.out.println("G: " + g);</color>
            <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#EEFFFF>x</color><color=#89DDFF>.</color><color=#BB80B3>length</color> <color=#89DDFF><</color> <color=#EEFFFF>_n</color><color=#89DDFF>){</color>
                <color=#EEFFFF>x</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>paddWithZero</color><color=#89DDFF>(</color><color=#EEFFFF>x</color><color=#89DDFF>,</color> <color=#EEFFFF>_n</color><color=#89DDFF>);</color>
            <color=#89DDFF>}</color>
            
            <color=#EEFFFF>x</color> <color=#89DDFF>=</color> <color=#EEFFFF>flap</color><color=#89DDFF>(</color><color=#EEFFFF>g</color><color=#89DDFF>,</color> <color=#EEFFFF>x</color><color=#89DDFF>,</color> <color=#EEFFFF>gamma</color><color=#89DDFF>);</color>
            
            <color=#EEFFFF>gByte</color><color=#89DDFF>[</color><color=#F78C6C>0</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color><color=#EEFFFF>g</color><color=#89DDFF>;</color>
            <color=#EEFFFF>_h</color><color=#89DDFF>.</color><color=#BB80B3>update</color><color=#89DDFF>(</color><color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>concateByteArrays</color><color=#89DDFF>(</color><color=#EEFFFF>gByte</color><color=#89DDFF>,</color> <color=#EEFFFF>x</color><color=#89DDFF>));</color>
            <color=#EEFFFF>x</color> <color=#89DDFF>=</color> <color=#EEFFFF>_h</color><color=#89DDFF>.</color><color=#BB80B3>doFinal</color><color=#89DDFF>();</color>
            <color=#EEFFFF>x</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>truncate</color><color=#89DDFF>(</color><color=#EEFFFF>x</color><color=#89DDFF>,</color> <color=#EEFFFF>m</color><color=#89DDFF>);</color>
        <color=#89DDFF>}</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>x</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>
    
    <color=#546E7A>/**</color>
<color=#546E7A>     * flap function from catena specification</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param g</color>
<color=#546E7A>     * @param xIn</color>
<color=#546E7A>     * @param gamma</color>
<color=#546E7A>     * @return</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>private</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#82AAFF>flap</color><color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>g</color><color=#89DDFF>,</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>xIn</color><color=#89DDFF>,</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>gamma</color><color=#89DDFF>){</color>
        
        <color=#EEFFFF>_hPrime</color><color=#89DDFF>.</color><color=#BB80B3>reset</color><color=#89DDFF>();</color>
        
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>xHinit</color><color=#89DDFF>;</color>
        <color=#BB80B3>int</color> <color=#EEFFFF>iterations</color> <color=#89DDFF>=</color> <color=#89DDFF>(</color><color=#BB80B3>int</color><color=#89DDFF>)</color><color=#EEFFFF>Math</color><color=#89DDFF>.</color><color=#BB80B3>pow</color><color=#89DDFF>(</color><color=#F78C6C>2</color><color=#89DDFF>,</color> <color=#EEFFFF>g</color><color=#89DDFF>);</color>
        
        <color=#BB80B3>byte</color><color=#89DDFF>[][]</color> <color=#EEFFFF>v</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#EEFFFF>iterations</color><color=#89DDFF>+</color><color=#F78C6C>2</color><color=#89DDFF>][</color><color=#EEFFFF>_k</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
        
        <color=#EEFFFF>xHinit</color> <color=#89DDFF>=</color> <color=#EEFFFF>hInit</color><color=#89DDFF>(</color><color=#EEFFFF>xIn</color><color=#89DDFF>);</color>
        
        <color=#EEFFFF>System</color><color=#89DDFF>.</color><color=#BB80B3>arraycopy</color><color=#89DDFF>(</color><color=#EEFFFF>xHinit</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>v</color><color=#89DDFF>[</color><color=#F78C6C>0</color><color=#89DDFF>]</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>_k</color><color=#89DDFF>);</color>
        <color=#EEFFFF>System</color><color=#89DDFF>.</color><color=#BB80B3>arraycopy</color><color=#89DDFF>(</color><color=#EEFFFF>xHinit</color><color=#89DDFF>,</color> <color=#EEFFFF>_k</color><color=#89DDFF>,</color> <color=#EEFFFF>v</color><color=#89DDFF>[</color><color=#F78C6C>1</color><color=#89DDFF>]</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>_k</color><color=#89DDFF>);</color>
        
        <color=#BB80B3>for</color> <color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>i</color><color=#89DDFF>=</color><color=#F78C6C>2</color><color=#89DDFF>;</color> <color=#EEFFFF>i</color><color=#89DDFF><</color><color=#EEFFFF>iterations</color><color=#89DDFF>+</color><color=#F78C6C>2</color><color=#89DDFF>;</color> <color=#89DDFF>++</color><color=#EEFFFF>i</color><color=#89DDFF>){</color>
<color=#546E7A>//          if (i%10000 == 0) {</color>
<color=#546E7A>//              System.out.println("Flap iterations " + i + " / " + iterations);</color>
<color=#546E7A>//          }</color>
            <color=#EEFFFF>_hPrime</color><color=#89DDFF>.</color><color=#BB80B3>update</color><color=#89DDFF>(</color><color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>concateByteArrays</color><color=#89DDFF>(</color><color=#EEFFFF>v</color><color=#89DDFF>[</color><color=#EEFFFF>i</color><color=#89DDFF>-</color><color=#F78C6C>1</color><color=#89DDFF>]</color><color=#89DDFF>,</color> <color=#EEFFFF>v</color><color=#89DDFF>[</color><color=#EEFFFF>i</color><color=#89DDFF>-</color><color=#F78C6C>2</color><color=#89DDFF>]</color><color=#89DDFF>));</color>
            <color=#EEFFFF>v</color><color=#89DDFF>[</color><color=#EEFFFF>i</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>_hPrime</color><color=#89DDFF>.</color><color=#BB80B3>doFinal</color><color=#89DDFF>();</color>
        <color=#89DDFF>}</color>
<color=#546E7A>//      System.out.println("Now out.");</color>
        
        <color=#BB80B3>byte</color><color=#89DDFF>[][]</color> <color=#EEFFFF>v2</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#EEFFFF>iterations</color><color=#89DDFF>][</color><color=#EEFFFF>_k</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
        <color=#EEFFFF>System</color><color=#89DDFF>.</color><color=#BB80B3>arraycopy</color><color=#89DDFF>(</color> <color=#EEFFFF>v</color><color=#89DDFF>,</color> <color=#F78C6C>2</color><color=#89DDFF>,</color> <color=#EEFFFF>v2</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>v2</color><color=#89DDFF>.</color><color=#BB80B3>length</color> <color=#89DDFF>);</color>
        
        <color=#EEFFFF>_hPrime</color><color=#89DDFF>.</color><color=#BB80B3>reset</color><color=#89DDFF>();</color>
        
        <color=#EEFFFF>v2</color> <color=#89DDFF>=</color> <color=#EEFFFF>gamma</color><color=#89DDFF>(</color><color=#EEFFFF>g</color><color=#89DDFF>,</color> <color=#EEFFFF>v2</color><color=#89DDFF>,</color> <color=#EEFFFF>gamma</color><color=#89DDFF>);</color>
        
<color=#546E7A>//      System.out.println("Now out gamma.");</color>
        
        <color=#EEFFFF>_hPrime</color><color=#89DDFF>.</color><color=#BB80B3>reset</color><color=#89DDFF>();</color>
        
        <color=#EEFFFF>v2</color> <color=#89DDFF>=</color> <color=#EEFFFF>f</color><color=#89DDFF>(</color><color=#EEFFFF>g</color><color=#89DDFF>,</color> <color=#EEFFFF>v2</color><color=#89DDFF>,</color> <color=#EEFFFF>_lambda</color><color=#89DDFF>);</color>
        
<color=#546E7A>//      System.out.println("Now out f.");</color>
        
        <color=#EEFFFF>_hPrime</color><color=#89DDFF>.</color><color=#BB80B3>reset</color><color=#89DDFF>();</color>
        <color=#EEFFFF>v2</color> <color=#89DDFF>=</color> <color=#EEFFFF>phi</color><color=#89DDFF>(</color><color=#EEFFFF>g</color><color=#89DDFF>,</color> <color=#EEFFFF>v2</color><color=#89DDFF>,</color> <color=#EEFFFF>v2</color><color=#89DDFF>[</color><color=#EEFFFF>v2</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>-</color><color=#F78C6C>1</color><color=#89DDFF>]</color><color=#89DDFF>);</color>
        
<color=#546E7A>//      System.out.println("Now out phi.");</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>v2</color><color=#89DDFF>[</color><color=#EEFFFF>v2</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>-</color><color=#F78C6C>1</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>
    
    <color=#BB80B3>public</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#82AAFF>flapPub</color><color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>g</color><color=#89DDFF>,</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>xIn</color><color=#89DDFF>,</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>gamma</color><color=#89DDFF>){</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>flap</color><color=#89DDFF>(</color><color=#EEFFFF>g</color><color=#89DDFF>,</color> <color=#EEFFFF>xIn</color><color=#89DDFF>,</color> <color=#EEFFFF>gamma</color><color=#89DDFF>);</color>
    <color=#89DDFF>}</color>
    
    
    <color=#546E7A>/**</color>
<color=#546E7A>     * Initialisation of the 2 values for flap rounds</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param x     Input Array</color>
<color=#546E7A>     * @return      2 hashed values v_-1, V_-2 in one byte array</color>
<color=#546E7A>     *              (output is already splitted in the middle and swapped)</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>private</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#82AAFF>hInit</color><color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>x</color><color=#89DDFF>){</color>
        <color=#BB80B3>int</color> <color=#EEFFFF>l</color> <color=#89DDFF>=</color> <color=#F78C6C>2</color><color=#89DDFF>*</color><color=#EEFFFF>_k</color><color=#89DDFF>/</color><color=#EEFFFF>_n</color><color=#89DDFF>;</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[][]</color> <color=#EEFFFF>xLoop</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#EEFFFF>l</color><color=#89DDFF>][</color><color=#EEFFFF>_n</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>iByte</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#F78C6C>1</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
        
        <color=#BB80B3>for</color> <color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>i</color><color=#89DDFF>=</color><color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#EEFFFF>i</color><color=#89DDFF><=</color> <color=#EEFFFF>l</color><color=#89DDFF>-</color><color=#F78C6C>1</color><color=#89DDFF>;</color> <color=#89DDFF>++</color><color=#EEFFFF>i</color><color=#89DDFF>){</color>
            <color=#EEFFFF>iByte</color><color=#89DDFF>[</color><color=#F78C6C>0</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#EEFFFF>i</color><color=#89DDFF>;</color>
            <color=#EEFFFF>_h</color><color=#89DDFF>.</color><color=#BB80B3>update</color><color=#89DDFF>(</color><color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>concateByteArrays</color><color=#89DDFF>(</color><color=#EEFFFF>iByte</color><color=#89DDFF>,</color> <color=#EEFFFF>x</color><color=#89DDFF>));</color>
            <color=#EEFFFF>xLoop</color><color=#89DDFF>[</color><color=#EEFFFF>i</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>_h</color><color=#89DDFF>.</color><color=#BB80B3>doFinal</color><color=#89DDFF>();</color>
            <color=#EEFFFF>_h</color><color=#89DDFF>.</color><color=#BB80B3>reset</color><color=#89DDFF>();</color>
        <color=#89DDFF>}</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>twoDimByteArrayToOne</color><color=#89DDFF>(</color><color=#EEFFFF>xLoop</color><color=#89DDFF>);</color>
    <color=#89DDFF>}</color>
    
    <color=#546E7A>/**</color>
<color=#546E7A>     * No clue how to test private functions so this wrapper exists</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param x     Initial value to instantiate v-2 and v-1</color>
<color=#546E7A>     * @return      v-2 and v-1 combined in one array</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#82AAFF>testHInit</color><color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>x</color><color=#89DDFF>){</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>hInit</color><color=#89DDFF>(</color><color=#EEFFFF>x</color><color=#89DDFF>);</color>
    <color=#89DDFF>}</color>
    
    <color=#546E7A>/**</color>
<color=#546E7A>     * salt dependent update with random access</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param g     garlic</color>
<color=#546E7A>     * @param x     hash array</color>
<color=#546E7A>     * @param gamma gamma</color>
<color=#546E7A>     * @return      hash array</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>private</color> <color=#BB80B3>byte</color><color=#89DDFF>[][]</color> <color=#82AAFF>gamma</color><color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>g</color><color=#89DDFF>,</color> <color=#BB80B3>byte</color><color=#89DDFF>[][]</color> <color=#EEFFFF>x</color><color=#89DDFF>,</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>gamma</color><color=#89DDFF>){</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>_gamma</color><color=#89DDFF>.</color><color=#BB80B3>gamma</color><color=#89DDFF>(</color><color=#EEFFFF>g</color><color=#89DDFF>,</color> <color=#EEFFFF>x</color><color=#89DDFF>,</color> <color=#EEFFFF>gamma</color><color=#89DDFF>);</color>
    <color=#89DDFF>}</color>
    
    <color=#546E7A>/**</color>
<color=#546E7A>     * Memory expensive graph Layer</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param x     hash input</color>
<color=#546E7A>     * @return      hash output</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>private</color> <color=#BB80B3>byte</color><color=#89DDFF>[][]</color> <color=#82AAFF>f</color><color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>g</color><color=#89DDFF>,</color> <color=#BB80B3>byte</color><color=#89DDFF>[][]</color> <color=#EEFFFF>x</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>lambda</color><color=#89DDFF>){</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>_f</color><color=#89DDFF>.</color><color=#BB80B3>graph</color><color=#89DDFF>(</color><color=#EEFFFF>g</color><color=#89DDFF>,</color> <color=#EEFFFF>x</color><color=#89DDFF>,</color> <color=#EEFFFF>lambda</color><color=#89DDFF>);</color>
    <color=#89DDFF>}</color>
    
    <color=#546E7A>/**</color>
<color=#546E7A>     * phi function from catena specification</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param x     hash input</color>
<color=#546E7A>     * @return      hash output</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>private</color> <color=#BB80B3>byte</color><color=#89DDFF>[][]</color> <color=#82AAFF>phi</color><color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>garlic</color><color=#89DDFF>,</color> <color=#BB80B3>byte</color><color=#89DDFF>[][]</color> <color=#EEFFFF>x</color><color=#89DDFF>,</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>m</color><color=#89DDFF>){</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>_phi</color><color=#89DDFF>.</color><color=#BB80B3>phi</color><color=#89DDFF>(</color><color=#EEFFFF>garlic</color><color=#89DDFF>,</color> <color=#EEFFFF>x</color><color=#89DDFF>,</color> <color=#EEFFFF>m</color><color=#89DDFF>);</color>
    <color=#89DDFF>}</color>
    
    <color=#546E7A>/**</color>
<color=#546E7A>     * Combine Tweak Array</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param vId       Version ID</color>
<color=#546E7A>     * @param mode      Mode of catena</color>
<color=#546E7A>     * @param lambda    Lambda</color>
<color=#546E7A>     * @param outLen    Output Length</color>
<color=#546E7A>     * @param sLen      Salt Length</color>
<color=#546E7A>     * @param aData     Additional Data</color>
<color=#546E7A>     * @return          Combined Tweak</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>private</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#82AAFF>compTweak</color><color=#89DDFF>(</color><color=#EEFFFF>String</color> <color=#EEFFFF>vId</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>mode</color><color=#89DDFF>,</color> 
            <color=#BB80B3>int</color> <color=#EEFFFF>lambda</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>outLen</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>sLen</color><color=#89DDFF>,</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>aData</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
        
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>modeByte</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#F78C6C>1</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>lambdaByte</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#F78C6C>1</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>outLenByte</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>intToByteArrayLittleEndian</color><color=#89DDFF>(</color><color=#EEFFFF>outLen</color><color=#89DDFF>,</color> <color=#F78C6C>2</color><color=#89DDFF>);</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>sLenByte</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>intToByteArrayLittleEndian</color><color=#89DDFF>(</color><color=#EEFFFF>sLen</color><color=#89DDFF>,</color> <color=#F78C6C>2</color><color=#89DDFF>);</color>
        
        <color=#EEFFFF>_h</color><color=#89DDFF>.</color><color=#BB80B3>update</color><color=#89DDFF>((</color><color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>string2Bytes</color><color=#89DDFF>(</color><color=#EEFFFF>vId</color><color=#89DDFF>)));</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>vIdH</color> <color=#89DDFF>=</color> <color=#EEFFFF>_h</color><color=#89DDFF>.</color><color=#BB80B3>doFinal</color><color=#89DDFF>();</color>
        <color=#EEFFFF>_h</color><color=#89DDFF>.</color><color=#BB80B3>reset</color><color=#89DDFF>();</color>

        <color=#EEFFFF>_h</color><color=#89DDFF>.</color><color=#BB80B3>update</color><color=#89DDFF>(</color><color=#EEFFFF>aData</color><color=#89DDFF>);</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>aDataH</color> <color=#89DDFF>=</color> <color=#EEFFFF>_h</color><color=#89DDFF>.</color><color=#BB80B3>doFinal</color><color=#89DDFF>();</color>
        <color=#EEFFFF>_h</color><color=#89DDFF>.</color><color=#BB80B3>reset</color><color=#89DDFF>();</color>
        
        <color=#EEFFFF>modeByte</color><color=#89DDFF>[</color><color=#F78C6C>0</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#EEFFFF>mode</color><color=#89DDFF>;</color>
        <color=#EEFFFF>lambdaByte</color><color=#89DDFF>[</color><color=#F78C6C>0</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#EEFFFF>lambda</color><color=#89DDFF>;</color>

        <color=#BB80B3>return</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>concateByteArrays</color><color=#89DDFF>(</color><color=#EEFFFF>vIdH</color><color=#89DDFF>,</color> <color=#EEFFFF>modeByte</color><color=#89DDFF>,</color> 
                <color=#EEFFFF>lambdaByte</color><color=#89DDFF>,</color> <color=#EEFFFF>outLenByte</color><color=#89DDFF>,</color> <color=#EEFFFF>sLenByte</color><color=#89DDFF>,</color> <color=#EEFFFF>aDataH</color><color=#89DDFF>);</color>
    <color=#89DDFF>}</color>
    
    <color=#546E7A>/**</color>
<color=#546E7A>     * public interface for testing tweak computation</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param vId       String, VersionID</color>
<color=#546E7A>     * @param mode      Integer, Mode of Catena</color>
<color=#546E7A>     * @param lambda    Integer, The depth of the graph structure.</color>
<color=#546E7A>     * @param outLen    Integer, Output length.</color>
<color=#546E7A>     * @param sLen      Integer, Salt length.</color>
<color=#546E7A>     * @param aData     byte[], Associated data of the user and/or the host.</color>
<color=#546E7A>     * @return tweak    byte[], The calculatetd tweak.</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#82AAFF>testCompTweak</color> <color=#89DDFF>(</color><color=#EEFFFF>String</color> <color=#EEFFFF>vId</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>mode</color><color=#89DDFF>,</color> 
            <color=#BB80B3>int</color> <color=#EEFFFF>lambda</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>outLen</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>sLen</color><color=#89DDFF>,</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>aData</color><color=#89DDFF>){</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>compTweak</color><color=#89DDFF>(</color><color=#EEFFFF>vId</color><color=#89DDFF>,</color> <color=#EEFFFF>mode</color><color=#89DDFF>,</color> <color=#EEFFFF>lambda</color><color=#89DDFF>,</color> <color=#EEFFFF>outLen</color><color=#89DDFF>,</color> <color=#EEFFFF>sLen</color><color=#89DDFF>,</color> <color=#EEFFFF>aData</color><color=#89DDFF>);</color>
    <color=#89DDFF>}</color>
    
    <color=#546E7A>/**</color>
<color=#546E7A>     * Clear the password</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param pwd   the password to be cleared</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>private</color> <color=#BB80B3>final</color> <color=#BB80B3>void</color> <color=#82AAFF>erasePwd</color><color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>pwd</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
        <color=#EEFFFF>Arrays</color><color=#89DDFF>.</color><color=#BB80B3>fill</color><color=#89DDFF>(</color><color=#EEFFFF>pwd</color><color=#89DDFF>,</color> <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#F78C6C>0</color><color=#89DDFF>);</color>
    <color=#89DDFF>}</color>

    <color=#546E7A>/**</color>
<color=#546E7A>     * Initializes Catena</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * initializrs all needed variables and functions with default values</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param h         main hash function</color>
<color=#546E7A>     * @param hPrime    reduced hash function</color>
<color=#546E7A>     * @param gamma     gamma function (e.g. SaltMix)</color>
<color=#546E7A>     * @param f         graph</color>
<color=#546E7A>     * @param idx       index function for graph</color>
<color=#546E7A>     * @param phi       phi function</color>
<color=#546E7A>     * @param gLow      minimum Garlic</color>
<color=#546E7A>     * @param gHigh     maximum Garlic</color>
<color=#546E7A>     * @param lambda    depth of graphs</color>
<color=#546E7A>     * @param vID       version ID</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>init</color><color=#89DDFF>(</color><color=#EEFFFF>HashInterface</color> <color=#EEFFFF>h</color><color=#89DDFF>,</color> <color=#EEFFFF>HashInterface</color> <color=#EEFFFF>hPrime</color><color=#89DDFF>,</color> 
            <color=#EEFFFF>GammaInterface</color> <color=#EEFFFF>gamma</color><color=#89DDFF>,</color> <color=#EEFFFF>GraphInterface</color> <color=#EEFFFF>f</color><color=#89DDFF>,</color> 
            <color=#EEFFFF>IdxInterface</color> <color=#EEFFFF>idx</color><color=#89DDFF>,</color> <color=#EEFFFF>PhiInterface</color> <color=#EEFFFF>phi</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>gLow</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>gHigh</color><color=#89DDFF>,</color>
            <color=#BB80B3>int</color> <color=#EEFFFF>lambda</color><color=#89DDFF>,</color> <color=#EEFFFF>String</color> <color=#EEFFFF>vID</color><color=#89DDFF>){</color>
        
        <color=#EEFFFF>_h</color> <color=#89DDFF>=</color> <color=#EEFFFF>h</color><color=#89DDFF>;</color>
        <color=#EEFFFF>_hPrime</color> <color=#89DDFF>=</color> <color=#EEFFFF>hPrime</color><color=#89DDFF>;</color>
        
        <color=#EEFFFF>_gamma</color> <color=#89DDFF>=</color> <color=#EEFFFF>gamma</color><color=#89DDFF>;</color>
        <color=#EEFFFF>_gamma</color><color=#89DDFF>.</color><color=#BB80B3>setH</color><color=#89DDFF>(</color><color=#EEFFFF>_h</color><color=#89DDFF>);</color>
        <color=#EEFFFF>_gamma</color><color=#89DDFF>.</color><color=#BB80B3>setHPrime</color><color=#89DDFF>(</color><color=#EEFFFF>_hPrime</color><color=#89DDFF>);</color>
        
        <color=#EEFFFF>_f</color> <color=#89DDFF>=</color> <color=#EEFFFF>f</color><color=#89DDFF>;</color>
        <color=#EEFFFF>_f</color><color=#89DDFF>.</color><color=#BB80B3>setH</color><color=#89DDFF>(</color><color=#EEFFFF>_h</color><color=#89DDFF>);</color>
        <color=#EEFFFF>_f</color><color=#89DDFF>.</color><color=#BB80B3>setHPrime</color><color=#89DDFF>(</color><color=#EEFFFF>_hPrime</color><color=#89DDFF>);</color>
        <color=#EEFFFF>_f</color><color=#89DDFF>.</color><color=#BB80B3>setIndexing</color><color=#89DDFF>(</color><color=#EEFFFF>idx</color><color=#89DDFF>);</color>
        
        <color=#EEFFFF>_phi</color> <color=#89DDFF>=</color> <color=#EEFFFF>phi</color><color=#89DDFF>;</color>
        <color=#EEFFFF>_phi</color><color=#89DDFF>.</color><color=#BB80B3>setH</color><color=#89DDFF>(</color><color=#EEFFFF>_h</color><color=#89DDFF>);</color>
        <color=#EEFFFF>_phi</color><color=#89DDFF>.</color><color=#BB80B3>setHPrime</color><color=#89DDFF>(</color><color=#EEFFFF>_hPrime</color><color=#89DDFF>);</color>
        
        <color=#EEFFFF>_gLow</color> <color=#89DDFF>=</color> <color=#EEFFFF>gLow</color><color=#89DDFF>;</color>
        <color=#EEFFFF>_gHigh</color> <color=#89DDFF>=</color> <color=#EEFFFF>gHigh</color><color=#89DDFF>;</color>
        
        <color=#EEFFFF>_lambda</color> <color=#89DDFF>=</color> <color=#EEFFFF>lambda</color><color=#89DDFF>;</color>
        
        <color=#EEFFFF>_n</color> <color=#89DDFF>=</color> <color=#EEFFFF>_h</color><color=#89DDFF>.</color><color=#BB80B3>getOutputSize</color><color=#89DDFF>();</color>
        <color=#EEFFFF>_k</color> <color=#89DDFF>=</color> <color=#EEFFFF>_hPrime</color><color=#89DDFF>.</color><color=#BB80B3>getOutputSize</color><color=#89DDFF>();</color>
        
        <color=#EEFFFF>_vId</color> <color=#89DDFF>=</color> <color=#EEFFFF>vID</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>
    
    <color=#BB80B3>public</color> <color=#EEFFFF>String</color> <color=#82AAFF>getVID</color><color=#89DDFF>(){</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>_vId</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>
    
    <color=#BB80B3>public</color> <color=#BB80B3>int</color> <color=#82AAFF>getLambda</color><color=#89DDFF>(){</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>_lambda</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>
    
    <color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>setGHigh</color><color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>gHigh</color><color=#89DDFF>){</color>
        <color=#EEFFFF>_gHigh</color> <color=#89DDFF>=</color> <color=#EEFFFF>gHigh</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>
    
    <color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>setGLow</color><color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>gLow</color><color=#89DDFF>){</color>
        <color=#EEFFFF>_gLow</color> <color=#89DDFF>=</color> <color=#EEFFFF>gLow</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>
    
    <color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>setD</color><color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>d</color><color=#89DDFF>){</color>
        <color=#EEFFFF>_d</color> <color=#89DDFF>=</color> <color=#EEFFFF>d</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>
    
<color=#89DDFF>}</color>