<color=#89DDFF>package</color> <color=#FFCB6B>main.java.components.graph.algorithms.index</color><color=#89DDFF>;</color>

<color=#89DDFF>import</color> <color=#FFCB6B>main.java.components.graph.algorithms.IdxInterface</color><color=#89DDFF>;</color>

<color=#BB80B3>public</color> <color=#BB80B3>class</color> <color=#FFCB6B>IndexBRG</color> <color=#BB80B3>implements</color> <color=#EEFFFF>IdxInterface</color> <color=#89DDFF>{</color>

    <color=#82AAFF>@Override</color>
    <color=#BB80B3>public</color> <color=#BB80B3>int</color> <color=#82AAFF>getIndex</color><color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>x</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>g</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
        <color=#BB80B3>boolean</color><color=#89DDFF>[]</color> <color=#EEFFFF>bool1</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>boolean</color><color=#89DDFF>[</color><color=#EEFFFF>g</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
        <color=#BB80B3>boolean</color><color=#89DDFF>[]</color> <color=#EEFFFF>bool2</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>boolean</color><color=#89DDFF>[</color><color=#EEFFFF>g</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
        
        <color=#EEFFFF>String</color> <color=#EEFFFF>tmp</color> <color=#89DDFF>=</color> <color=#EEFFFF>Integer</color><color=#89DDFF>.</color><color=#BB80B3>toBinaryString</color><color=#89DDFF>(</color><color=#EEFFFF>x</color><color=#89DDFF>);</color>
        <color=#BB80B3>for</color> <color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>i</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#EEFFFF>i</color> <color=#89DDFF><</color> <color=#EEFFFF>tmp</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>();</color> <color=#89DDFF>++</color><color=#EEFFFF>i</color> <color=#89DDFF>)</color> <color=#89DDFF>{</color>
            <color=#BB80B3>if</color><color=#89DDFF>(</color><color=#EEFFFF>tmp</color><color=#89DDFF>.</color><color=#BB80B3>charAt</color><color=#89DDFF>(</color><color=#EEFFFF>i</color><color=#89DDFF>)</color><color=#89DDFF>==</color><color=#C3E88D>'1'</color><color=#89DDFF>){</color>
                <color=#EEFFFF>bool1</color><color=#89DDFF>[</color><color=#EEFFFF>i</color><color=#89DDFF>+</color><color=#EEFFFF>g</color><color=#89DDFF>-</color><color=#EEFFFF>tmp</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>()</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#89DDFF>true</color><color=#89DDFF>;</color>
            <color=#89DDFF>}</color>
        <color=#89DDFF>}</color>
        <color=#BB80B3>int</color> <color=#EEFFFF>b1size</color> <color=#89DDFF>=</color> <color=#EEFFFF>bool1</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>;</color>
        <color=#BB80B3>for</color> <color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>i</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#EEFFFF>i</color> <color=#89DDFF><</color> <color=#EEFFFF>b1size</color><color=#89DDFF>;</color> <color=#89DDFF>++</color><color=#EEFFFF>i</color><color=#89DDFF>){</color>
            <color=#BB80B3>boolean</color> <color=#EEFFFF>b</color> <color=#89DDFF>=</color> <color=#EEFFFF>bool1</color><color=#89DDFF>[</color><color=#EEFFFF>i</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
            <color=#BB80B3>if</color><color=#89DDFF>(</color><color=#EEFFFF>b</color><color=#89DDFF>){</color>
                <color=#EEFFFF>bool2</color><color=#89DDFF>[</color><color=#EEFFFF>g</color><color=#89DDFF>-</color><color=#F78C6C>1</color><color=#89DDFF>-</color><color=#EEFFFF>i</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#89DDFF>true</color><color=#89DDFF>;</color>
            <color=#89DDFF>}</color>
        <color=#89DDFF>}</color>
        
        <color=#BB80B3>int</color> <color=#EEFFFF>n</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color>
        <color=#BB80B3>int</color> <color=#EEFFFF>l</color> <color=#89DDFF>=</color> <color=#EEFFFF>bool2</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>;</color>
        <color=#BB80B3>for</color> <color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>i</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#EEFFFF>i</color> <color=#89DDFF><</color> <color=#EEFFFF>l</color><color=#89DDFF>;</color> <color=#89DDFF>++</color><color=#EEFFFF>i</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>n</color> <color=#89DDFF>=</color> <color=#89DDFF>(</color><color=#EEFFFF>n</color> <color=#89DDFF><<</color> <color=#F78C6C>1</color><color=#89DDFF>)</color> <color=#89DDFF>+</color> <color=#89DDFF>(</color><color=#EEFFFF>bool2</color><color=#89DDFF>[</color><color=#EEFFFF>i</color><color=#89DDFF>]</color> <color=#89DDFF>?</color> <color=#F78C6C>1</color> <color=#89DDFF>:</color> <color=#F78C6C>0</color><color=#89DDFF>);</color>
        <color=#89DDFF>}</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>n</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>
    
    <color=#82AAFF>@Override</color>
    <color=#BB80B3>public</color> <color=#BB80B3>long</color> <color=#82AAFF>getIndex</color><color=#89DDFF>(</color><color=#BB80B3>long</color> <color=#EEFFFF>x</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>g</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
        <color=#BB80B3>boolean</color><color=#89DDFF>[]</color> <color=#EEFFFF>bool1</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>boolean</color><color=#89DDFF>[</color><color=#EEFFFF>g</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
        <color=#BB80B3>boolean</color><color=#89DDFF>[]</color> <color=#EEFFFF>bool2</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>boolean</color><color=#89DDFF>[</color><color=#EEFFFF>g</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
        
        <color=#EEFFFF>String</color> <color=#EEFFFF>tmp</color> <color=#89DDFF>=</color> <color=#EEFFFF>Long</color><color=#89DDFF>.</color><color=#BB80B3>toBinaryString</color><color=#89DDFF>(</color><color=#EEFFFF>x</color><color=#89DDFF>);</color>
        <color=#BB80B3>for</color> <color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>i</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#EEFFFF>i</color> <color=#89DDFF><</color> <color=#EEFFFF>tmp</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>();</color> <color=#89DDFF>++</color><color=#EEFFFF>i</color> <color=#89DDFF>)</color> <color=#89DDFF>{</color>
            <color=#BB80B3>if</color><color=#89DDFF>(</color><color=#EEFFFF>tmp</color><color=#89DDFF>.</color><color=#BB80B3>charAt</color><color=#89DDFF>(</color><color=#EEFFFF>i</color><color=#89DDFF>)</color><color=#89DDFF>==</color><color=#C3E88D>'1'</color><color=#89DDFF>){</color>
                <color=#EEFFFF>bool1</color><color=#89DDFF>[</color><color=#EEFFFF>i</color><color=#89DDFF>+</color><color=#EEFFFF>g</color><color=#89DDFF>-</color><color=#EEFFFF>tmp</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>()</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#89DDFF>true</color><color=#89DDFF>;</color>
            <color=#89DDFF>}</color>
        <color=#89DDFF>}</color>
        <color=#BB80B3>int</color> <color=#EEFFFF>b1size</color> <color=#89DDFF>=</color> <color=#EEFFFF>bool1</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>;</color>
        <color=#BB80B3>for</color> <color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>i</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#EEFFFF>i</color> <color=#89DDFF><</color> <color=#EEFFFF>b1size</color><color=#89DDFF>;</color> <color=#89DDFF>++</color><color=#EEFFFF>i</color><color=#89DDFF>){</color>
            <color=#BB80B3>boolean</color> <color=#EEFFFF>b</color> <color=#89DDFF>=</color> <color=#EEFFFF>bool1</color><color=#89DDFF>[</color><color=#EEFFFF>i</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
            <color=#BB80B3>if</color><color=#89DDFF>(</color><color=#EEFFFF>b</color><color=#89DDFF>){</color>
                <color=#EEFFFF>bool2</color><color=#89DDFF>[</color><color=#EEFFFF>g</color><color=#89DDFF>-</color><color=#F78C6C>1</color><color=#89DDFF>-</color><color=#EEFFFF>i</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#89DDFF>true</color><color=#89DDFF>;</color>
            <color=#89DDFF>}</color>
        <color=#89DDFF>}</color>
        
        <color=#BB80B3>long</color> <color=#EEFFFF>n</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color>
        <color=#BB80B3>long</color> <color=#EEFFFF>l</color> <color=#89DDFF>=</color> <color=#EEFFFF>bool2</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>;</color>
        <color=#BB80B3>for</color> <color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>i</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#EEFFFF>i</color> <color=#89DDFF><</color> <color=#EEFFFF>l</color><color=#89DDFF>;</color> <color=#89DDFF>++</color><color=#EEFFFF>i</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>n</color> <color=#89DDFF>=</color> <color=#89DDFF>(</color><color=#EEFFFF>n</color> <color=#89DDFF><<</color> <color=#F78C6C>1</color><color=#89DDFF>)</color> <color=#89DDFF>+</color> <color=#89DDFF>(</color><color=#EEFFFF>bool2</color><color=#89DDFF>[</color><color=#EEFFFF>i</color><color=#89DDFF>]</color> <color=#89DDFF>?</color> <color=#F78C6C>1</color> <color=#89DDFF>:</color> <color=#F78C6C>0</color><color=#89DDFF>);</color>
        <color=#89DDFF>}</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>n</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>

    <color=#82AAFF>@Override</color>
    <color=#BB80B3>public</color> <color=#BB80B3>int</color> <color=#82AAFF>getIndex</color><color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>i</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>j</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>g</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
        <color=#BB80B3>return</color> <color=#89DDFF>-</color><color=#F78C6C>1</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>

    <color=#82AAFF>@Override</color>
    <color=#BB80B3>public</color> <color=#BB80B3>long</color> <color=#82AAFF>getIndex</color><color=#89DDFF>(</color><color=#BB80B3>long</color> <color=#EEFFFF>i</color><color=#89DDFF>,</color> <color=#BB80B3>long</color> <color=#EEFFFF>j</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>g</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
        <color=#BB80B3>return</color> <color=#89DDFF>-</color><color=#F78C6C>1</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>
<color=#89DDFF>}</color>