<color=#89DDFF>package</color> <color=#FFCB6B>main.java.components.hash.algorithms</color><color=#89DDFF>;</color>

<color=#546E7A>/*</color>
<color=#546E7A> * Round-reduced Blake2b as H' for Password Hashing Scheme Catena </color>
<color=#546E7A> * Copyright (C) 2015  Axel von dem Bruch</color>
<color=#546E7A> * </color>
<color=#546E7A> * This library is free software; you can redistribute it and/or</color>
<color=#546E7A> * modify it under the terms of the GNU Lesser General Public</color>
<color=#546E7A> * License as published by the Free Software Foundation; either</color>
<color=#546E7A> * version 2.1 of the License, or (at your option) any later version.</color>
<color=#546E7A> * </color>
<color=#546E7A> * This library is distributed in the hope that it will be useful,</color>
<color=#546E7A> * but WITHOUT ANY WARRANTY; without even the implied warranty of</color>
<color=#546E7A> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</color>
<color=#546E7A> * Lesser General Public License for more details.</color>
<color=#546E7A> * </color>
<color=#546E7A> * See:  https://www.gnu.org/licenses/lgpl-2.1.html</color>
<color=#546E7A> * You should have received a copy of the GNU General Public License </color>
<color=#546E7A> * along with this library.</color>
<color=#546E7A> */</color>

<color=#89DDFF>import</color> <color=#FFCB6B>java.util.Arrays</color><color=#89DDFF>;</color>

<color=#89DDFF>import</color> <color=#FFCB6B>main.java.Helper</color><color=#89DDFF>;</color>
<color=#89DDFF>import</color> <color=#FFCB6B>main.java.components.hash.HashInterface</color><color=#89DDFF>;</color>


<color=#BB80B3>public</color> <color=#BB80B3>class</color> <color=#FFCB6B>Blake2b_1</color> <color=#BB80B3>implements</color> <color=#EEFFFF>HashInterface</color> <color=#89DDFF>{</color>
    
    <color=#EEFFFF>Helper</color> <color=#EEFFFF>helper</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>Helper</color><color=#89DDFF>();</color>
    
    <color=#BB80B3>private</color> <color=#BB80B3>final</color> <color=#BB80B3>static</color> <color=#BB80B3>long</color> <color=#EEFFFF>blake2b_IV</color><color=#89DDFF>[]</color> <color=#89DDFF>=</color> 
            <color=#546E7A>// Blake2b Initialization Vector: </color>
            <color=#546E7A>// Produced from the square root of primes 2, 3, 5, 7, 11, 13, 17, 19.</color>
            <color=#546E7A>// The same as SHA-512 IV.</color>
        <color=#89DDFF>{</color>
          <color=#F78C6C>0x6a09e667f3bcc908L</color><color=#89DDFF>,</color> <color=#F78C6C>0xbb67ae8584caa73bL</color><color=#89DDFF>,</color> 
          <color=#F78C6C>0x3c6ef372fe94f82bL</color><color=#89DDFF>,</color> <color=#F78C6C>0xa54ff53a5f1d36f1L</color><color=#89DDFF>,</color>
          <color=#F78C6C>0x510e527fade682d1L</color><color=#89DDFF>,</color> <color=#F78C6C>0x9b05688c2b3e6c1fL</color><color=#89DDFF>,</color>
          <color=#F78C6C>0x1f83d9abfb41bd6bL</color><color=#89DDFF>,</color> <color=#F78C6C>0x5be0cd19137e2179L</color> 
        <color=#89DDFF>};</color>
    <color=#BB80B3>private</color> <color=#BB80B3>final</color> <color=#BB80B3>static</color> <color=#BB80B3>long</color> <color=#EEFFFF>blake2b_IV0</color> <color=#89DDFF>=</color> <color=#F78C6C>0x6a09e667f2bdc948L</color><color=#89DDFF>;</color>
    
    <color=#BB80B3>private</color> <color=#BB80B3>final</color> <color=#BB80B3>static</color> <color=#BB80B3>byte</color><color=#89DDFF>[][]</color> <color=#EEFFFF>blake2b_sigma</color> <color=#89DDFF>=</color> <color=#546E7A>// Message word permutations</color>
        <color=#89DDFF>{</color>
          <color=#89DDFF>{</color>  <color=#F78C6C>0</color><color=#89DDFF>,</color>  <color=#F78C6C>1</color><color=#89DDFF>,</color>  <color=#F78C6C>2</color><color=#89DDFF>,</color>  <color=#F78C6C>3</color><color=#89DDFF>,</color>  <color=#F78C6C>4</color><color=#89DDFF>,</color>  <color=#F78C6C>5</color><color=#89DDFF>,</color>  <color=#F78C6C>6</color><color=#89DDFF>,</color>  <color=#F78C6C>7</color><color=#89DDFF>,</color>  <color=#F78C6C>8</color><color=#89DDFF>,</color>  <color=#F78C6C>9</color><color=#89DDFF>,</color> <color=#F78C6C>10</color><color=#89DDFF>,</color> <color=#F78C6C>11</color><color=#89DDFF>,</color> <color=#F78C6C>12</color><color=#89DDFF>,</color> <color=#F78C6C>13</color><color=#89DDFF>,</color> <color=#F78C6C>14</color><color=#89DDFF>,</color> <color=#F78C6C>15</color> <color=#89DDFF>}</color> <color=#89DDFF>,</color>
          <color=#89DDFF>{</color> <color=#F78C6C>14</color><color=#89DDFF>,</color> <color=#F78C6C>10</color><color=#89DDFF>,</color>  <color=#F78C6C>4</color><color=#89DDFF>,</color>  <color=#F78C6C>8</color><color=#89DDFF>,</color>  <color=#F78C6C>9</color><color=#89DDFF>,</color> <color=#F78C6C>15</color><color=#89DDFF>,</color> <color=#F78C6C>13</color><color=#89DDFF>,</color>  <color=#F78C6C>6</color><color=#89DDFF>,</color>  <color=#F78C6C>1</color><color=#89DDFF>,</color> <color=#F78C6C>12</color><color=#89DDFF>,</color>  <color=#F78C6C>0</color><color=#89DDFF>,</color>  <color=#F78C6C>2</color><color=#89DDFF>,</color> <color=#F78C6C>11</color><color=#89DDFF>,</color>  <color=#F78C6C>7</color><color=#89DDFF>,</color>  <color=#F78C6C>5</color><color=#89DDFF>,</color>  <color=#F78C6C>3</color> <color=#89DDFF>}</color> <color=#89DDFF>,</color>
          <color=#89DDFF>{</color> <color=#F78C6C>11</color><color=#89DDFF>,</color>  <color=#F78C6C>8</color><color=#89DDFF>,</color> <color=#F78C6C>12</color><color=#89DDFF>,</color>  <color=#F78C6C>0</color><color=#89DDFF>,</color>  <color=#F78C6C>5</color><color=#89DDFF>,</color>  <color=#F78C6C>2</color><color=#89DDFF>,</color> <color=#F78C6C>15</color><color=#89DDFF>,</color> <color=#F78C6C>13</color><color=#89DDFF>,</color> <color=#F78C6C>10</color><color=#89DDFF>,</color> <color=#F78C6C>14</color><color=#89DDFF>,</color>  <color=#F78C6C>3</color><color=#89DDFF>,</color>  <color=#F78C6C>6</color><color=#89DDFF>,</color>  <color=#F78C6C>7</color><color=#89DDFF>,</color>  <color=#F78C6C>1</color><color=#89DDFF>,</color>  <color=#F78C6C>9</color><color=#89DDFF>,</color>  <color=#F78C6C>4</color> <color=#89DDFF>}</color> <color=#89DDFF>,</color>
          <color=#89DDFF>{</color>  <color=#F78C6C>7</color><color=#89DDFF>,</color>  <color=#F78C6C>9</color><color=#89DDFF>,</color>  <color=#F78C6C>3</color><color=#89DDFF>,</color>  <color=#F78C6C>1</color><color=#89DDFF>,</color> <color=#F78C6C>13</color><color=#89DDFF>,</color> <color=#F78C6C>12</color><color=#89DDFF>,</color> <color=#F78C6C>11</color><color=#89DDFF>,</color> <color=#F78C6C>14</color><color=#89DDFF>,</color>  <color=#F78C6C>2</color><color=#89DDFF>,</color>  <color=#F78C6C>6</color><color=#89DDFF>,</color>  <color=#F78C6C>5</color><color=#89DDFF>,</color> <color=#F78C6C>10</color><color=#89DDFF>,</color>  <color=#F78C6C>4</color><color=#89DDFF>,</color>  <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#F78C6C>15</color><color=#89DDFF>,</color>  <color=#F78C6C>8</color> <color=#89DDFF>}</color> <color=#89DDFF>,</color>
          <color=#89DDFF>{</color>  <color=#F78C6C>9</color><color=#89DDFF>,</color>  <color=#F78C6C>0</color><color=#89DDFF>,</color>  <color=#F78C6C>5</color><color=#89DDFF>,</color>  <color=#F78C6C>7</color><color=#89DDFF>,</color>  <color=#F78C6C>2</color><color=#89DDFF>,</color>  <color=#F78C6C>4</color><color=#89DDFF>,</color> <color=#F78C6C>10</color><color=#89DDFF>,</color> <color=#F78C6C>15</color><color=#89DDFF>,</color> <color=#F78C6C>14</color><color=#89DDFF>,</color>  <color=#F78C6C>1</color><color=#89DDFF>,</color> <color=#F78C6C>11</color><color=#89DDFF>,</color> <color=#F78C6C>12</color><color=#89DDFF>,</color>  <color=#F78C6C>6</color><color=#89DDFF>,</color>  <color=#F78C6C>8</color><color=#89DDFF>,</color>  <color=#F78C6C>3</color><color=#89DDFF>,</color> <color=#F78C6C>13</color> <color=#89DDFF>}</color> <color=#89DDFF>,</color>
          <color=#89DDFF>{</color>  <color=#F78C6C>2</color><color=#89DDFF>,</color> <color=#F78C6C>12</color><color=#89DDFF>,</color>  <color=#F78C6C>6</color><color=#89DDFF>,</color> <color=#F78C6C>10</color><color=#89DDFF>,</color>  <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#F78C6C>11</color><color=#89DDFF>,</color>  <color=#F78C6C>8</color><color=#89DDFF>,</color>  <color=#F78C6C>3</color><color=#89DDFF>,</color>  <color=#F78C6C>4</color><color=#89DDFF>,</color> <color=#F78C6C>13</color><color=#89DDFF>,</color>  <color=#F78C6C>7</color><color=#89DDFF>,</color>  <color=#F78C6C>5</color><color=#89DDFF>,</color> <color=#F78C6C>15</color><color=#89DDFF>,</color> <color=#F78C6C>14</color><color=#89DDFF>,</color>  <color=#F78C6C>1</color><color=#89DDFF>,</color>  <color=#F78C6C>9</color> <color=#89DDFF>}</color> <color=#89DDFF>,</color>
          <color=#89DDFF>{</color> <color=#F78C6C>12</color><color=#89DDFF>,</color>  <color=#F78C6C>5</color><color=#89DDFF>,</color>  <color=#F78C6C>1</color><color=#89DDFF>,</color> <color=#F78C6C>15</color><color=#89DDFF>,</color> <color=#F78C6C>14</color><color=#89DDFF>,</color> <color=#F78C6C>13</color><color=#89DDFF>,</color>  <color=#F78C6C>4</color><color=#89DDFF>,</color> <color=#F78C6C>10</color><color=#89DDFF>,</color>  <color=#F78C6C>0</color><color=#89DDFF>,</color>  <color=#F78C6C>7</color><color=#89DDFF>,</color>  <color=#F78C6C>6</color><color=#89DDFF>,</color>  <color=#F78C6C>3</color><color=#89DDFF>,</color>  <color=#F78C6C>9</color><color=#89DDFF>,</color>  <color=#F78C6C>2</color><color=#89DDFF>,</color>  <color=#F78C6C>8</color><color=#89DDFF>,</color> <color=#F78C6C>11</color> <color=#89DDFF>}</color> <color=#89DDFF>,</color>
          <color=#89DDFF>{</color> <color=#F78C6C>13</color><color=#89DDFF>,</color> <color=#F78C6C>11</color><color=#89DDFF>,</color>  <color=#F78C6C>7</color><color=#89DDFF>,</color> <color=#F78C6C>14</color><color=#89DDFF>,</color> <color=#F78C6C>12</color><color=#89DDFF>,</color>  <color=#F78C6C>1</color><color=#89DDFF>,</color>  <color=#F78C6C>3</color><color=#89DDFF>,</color>  <color=#F78C6C>9</color><color=#89DDFF>,</color>  <color=#F78C6C>5</color><color=#89DDFF>,</color>  <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#F78C6C>15</color><color=#89DDFF>,</color>  <color=#F78C6C>4</color><color=#89DDFF>,</color>  <color=#F78C6C>8</color><color=#89DDFF>,</color>  <color=#F78C6C>6</color><color=#89DDFF>,</color>  <color=#F78C6C>2</color><color=#89DDFF>,</color> <color=#F78C6C>10</color> <color=#89DDFF>}</color> <color=#89DDFF>,</color>
          <color=#89DDFF>{</color>  <color=#F78C6C>6</color><color=#89DDFF>,</color> <color=#F78C6C>15</color><color=#89DDFF>,</color> <color=#F78C6C>14</color><color=#89DDFF>,</color>  <color=#F78C6C>9</color><color=#89DDFF>,</color> <color=#F78C6C>11</color><color=#89DDFF>,</color>  <color=#F78C6C>3</color><color=#89DDFF>,</color>  <color=#F78C6C>0</color><color=#89DDFF>,</color>  <color=#F78C6C>8</color><color=#89DDFF>,</color> <color=#F78C6C>12</color><color=#89DDFF>,</color>  <color=#F78C6C>2</color><color=#89DDFF>,</color> <color=#F78C6C>13</color><color=#89DDFF>,</color>  <color=#F78C6C>7</color><color=#89DDFF>,</color>  <color=#F78C6C>1</color><color=#89DDFF>,</color>  <color=#F78C6C>4</color><color=#89DDFF>,</color> <color=#F78C6C>10</color><color=#89DDFF>,</color>  <color=#F78C6C>5</color> <color=#89DDFF>}</color> <color=#89DDFF>,</color>
          <color=#89DDFF>{</color> <color=#F78C6C>10</color><color=#89DDFF>,</color>  <color=#F78C6C>2</color><color=#89DDFF>,</color>  <color=#F78C6C>8</color><color=#89DDFF>,</color>  <color=#F78C6C>4</color><color=#89DDFF>,</color>  <color=#F78C6C>7</color><color=#89DDFF>,</color>  <color=#F78C6C>6</color><color=#89DDFF>,</color>  <color=#F78C6C>1</color><color=#89DDFF>,</color>  <color=#F78C6C>5</color><color=#89DDFF>,</color> <color=#F78C6C>15</color><color=#89DDFF>,</color> <color=#F78C6C>11</color><color=#89DDFF>,</color>  <color=#F78C6C>9</color><color=#89DDFF>,</color> <color=#F78C6C>14</color><color=#89DDFF>,</color>  <color=#F78C6C>3</color><color=#89DDFF>,</color> <color=#F78C6C>12</color><color=#89DDFF>,</color> <color=#F78C6C>13</color> <color=#89DDFF>,</color> <color=#F78C6C>0</color> <color=#89DDFF>}</color> <color=#89DDFF>,</color>
          <color=#89DDFF>{</color>  <color=#F78C6C>0</color><color=#89DDFF>,</color>  <color=#F78C6C>1</color><color=#89DDFF>,</color>  <color=#F78C6C>2</color><color=#89DDFF>,</color>  <color=#F78C6C>3</color><color=#89DDFF>,</color>  <color=#F78C6C>4</color><color=#89DDFF>,</color>  <color=#F78C6C>5</color><color=#89DDFF>,</color>  <color=#F78C6C>6</color><color=#89DDFF>,</color>  <color=#F78C6C>7</color><color=#89DDFF>,</color>  <color=#F78C6C>8</color><color=#89DDFF>,</color>  <color=#F78C6C>9</color><color=#89DDFF>,</color> <color=#F78C6C>10</color><color=#89DDFF>,</color> <color=#F78C6C>11</color><color=#89DDFF>,</color> <color=#F78C6C>12</color><color=#89DDFF>,</color> <color=#F78C6C>13</color><color=#89DDFF>,</color> <color=#F78C6C>14</color><color=#89DDFF>,</color> <color=#F78C6C>15</color> <color=#89DDFF>}</color> <color=#89DDFF>,</color>
          <color=#89DDFF>{</color> <color=#F78C6C>14</color><color=#89DDFF>,</color> <color=#F78C6C>10</color><color=#89DDFF>,</color>  <color=#F78C6C>4</color><color=#89DDFF>,</color>  <color=#F78C6C>8</color><color=#89DDFF>,</color>  <color=#F78C6C>9</color><color=#89DDFF>,</color> <color=#F78C6C>15</color><color=#89DDFF>,</color> <color=#F78C6C>13</color><color=#89DDFF>,</color>  <color=#F78C6C>6</color><color=#89DDFF>,</color>  <color=#F78C6C>1</color><color=#89DDFF>,</color> <color=#F78C6C>12</color><color=#89DDFF>,</color>  <color=#F78C6C>0</color><color=#89DDFF>,</color>  <color=#F78C6C>2</color><color=#89DDFF>,</color> <color=#F78C6C>11</color><color=#89DDFF>,</color>  <color=#F78C6C>7</color><color=#89DDFF>,</color>  <color=#F78C6C>5</color><color=#89DDFF>,</color>  <color=#F78C6C>3</color> <color=#89DDFF>}</color>
        <color=#89DDFF>};</color>
    
    <color=#BB80B3>private</color> <color=#BB80B3>final</color> <color=#BB80B3>static</color> <color=#BB80B3>int</color> <color=#EEFFFF>BLOCK_LENGTH_BYTES</color> <color=#89DDFF>=</color> <color=#F78C6C>128</color><color=#89DDFF>;</color><color=#546E7A>// bytes</color>
    <color=#BB80B3>private</color> <color=#BB80B3>final</color> <color=#BB80B3>static</color> <color=#BB80B3>int</color> <color=#EEFFFF>H_LEN</color> <color=#89DDFF>=</color> <color=#F78C6C>64</color><color=#89DDFF>;</color> 

    <color=#BB80B3>private</color> <color=#BB80B3>int</color> <color=#EEFFFF>vIndex</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#546E7A>// used as vertex index for Catena</color>

    <color=#BB80B3>private</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>buffer</color> <color=#89DDFF>=</color> <color=#89DDFF>null</color><color=#89DDFF>;</color><color=#546E7A>//new byte[BLOCK_LENGTH_BYTES];</color>
    <color=#BB80B3>private</color> <color=#BB80B3>boolean</color> <color=#EEFFFF>halfBuffer</color> <color=#89DDFF>=</color> <color=#89DDFF>false</color><color=#89DDFF>;</color>

    <color=#BB80B3>private</color> <color=#BB80B3>long</color><color=#89DDFF>[]</color> <color=#EEFFFF>internalState</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>long</color><color=#89DDFF>[</color><color=#F78C6C>16</color><color=#89DDFF>]</color><color=#89DDFF>;</color> <color=#546E7A>// In the Blake2b paper it is called: v</color>
    <color=#BB80B3>private</color> <color=#BB80B3>long</color><color=#89DDFF>[]</color> <color=#EEFFFF>chainValue</color> <color=#89DDFF>=</color> <color=#89DDFF>null</color><color=#89DDFF>;</color> <color=#546E7A>// state vector, in the Blake2b paper it is called: h</color>
    
    <color=#BB80B3>private</color> <color=#BB80B3>long</color> <color=#EEFFFF>t0</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#EEFFFF>L</color><color=#89DDFF>;</color> <color=#546E7A>// holds last significant bits, counter (counts bytes)</color>
    <color=#BB80B3>private</color> <color=#BB80B3>long</color> <color=#EEFFFF>t1</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#EEFFFF>L</color><color=#89DDFF>;</color> <color=#546E7A>// counter: Length up to 2^128 are supported</color>
    
    <color=#BB80B3>public</color> <color=#82AAFF>Blake2b_1</color><color=#89DDFF>()</color> <color=#89DDFF>{</color>
        <color=#EEFFFF>buffer</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#EEFFFF>BLOCK_LENGTH_BYTES</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
        <color=#EEFFFF>init</color><color=#89DDFF>();</color>
    <color=#89DDFF>}</color>

    <color=#546E7A>// initialize chainValue</color>
    <color=#BB80B3>private</color> <color=#BB80B3>void</color> <color=#82AAFF>init</color><color=#89DDFF>()</color> <color=#89DDFF>{</color>
        
        <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#EEFFFF>chainValue</color> <color=#89DDFF>==</color> <color=#89DDFF>null</color><color=#89DDFF>){</color>
            <color=#EEFFFF>chainValue</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>long</color><color=#89DDFF>[</color><color=#F78C6C>8</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
            <color=#EEFFFF>chainValue</color><color=#89DDFF>[</color><color=#F78C6C>0</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>blake2b_IV0</color><color=#89DDFF>;</color>
            <color=#EEFFFF>chainValue</color><color=#89DDFF>[</color><color=#F78C6C>1</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>blake2b_IV</color><color=#89DDFF>[</color><color=#F78C6C>1</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
            <color=#EEFFFF>chainValue</color><color=#89DDFF>[</color><color=#F78C6C>2</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>blake2b_IV</color><color=#89DDFF>[</color><color=#F78C6C>2</color><color=#89DDFF>]</color><color=#89DDFF>;</color>      
            <color=#EEFFFF>chainValue</color><color=#89DDFF>[</color><color=#F78C6C>3</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>blake2b_IV</color><color=#89DDFF>[</color><color=#F78C6C>3</color><color=#89DDFF>]</color><color=#89DDFF>;</color>          
            <color=#EEFFFF>chainValue</color><color=#89DDFF>[</color><color=#F78C6C>4</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>blake2b_IV</color><color=#89DDFF>[</color><color=#F78C6C>4</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
            <color=#EEFFFF>chainValue</color><color=#89DDFF>[</color><color=#F78C6C>5</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>blake2b_IV</color><color=#89DDFF>[</color><color=#F78C6C>5</color><color=#89DDFF>]</color><color=#89DDFF>;</color>          
            <color=#EEFFFF>chainValue</color><color=#89DDFF>[</color><color=#F78C6C>6</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>blake2b_IV</color><color=#89DDFF>[</color><color=#F78C6C>6</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
            <color=#EEFFFF>chainValue</color><color=#89DDFF>[</color><color=#F78C6C>7</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>blake2b_IV</color><color=#89DDFF>[</color><color=#F78C6C>7</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
        <color=#89DDFF>}</color>
    <color=#89DDFF>}</color>
    
    <color=#BB80B3>private</color> <color=#BB80B3>void</color> <color=#82AAFF>initializeInternalState</color><color=#89DDFF>(){</color>
        
        <color=#546E7A>// initialize v:</color>
        <color=#EEFFFF>System</color><color=#89DDFF>.</color><color=#BB80B3>arraycopy</color><color=#89DDFF>(</color><color=#EEFFFF>chainValue</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>internalState</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>chainValue</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>);</color>
        <color=#EEFFFF>System</color><color=#89DDFF>.</color><color=#BB80B3>arraycopy</color><color=#89DDFF>(</color><color=#EEFFFF>blake2b_IV</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>internalState</color><color=#89DDFF>,</color> <color=#EEFFFF>chainValue</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>,</color> <color=#F78C6C>4</color><color=#89DDFF>);</color>
        <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#F78C6C>12</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>t0</color> <color=#89DDFF>^</color> <color=#EEFFFF>blake2b_IV</color><color=#89DDFF>[</color><color=#F78C6C>4</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
        <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#F78C6C>13</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>t1</color> <color=#89DDFF>^</color> <color=#EEFFFF>blake2b_IV</color><color=#89DDFF>[</color><color=#F78C6C>5</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
        <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#F78C6C>14</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#F78C6C>0xFFFFFFFFFFFFFFFFL</color> <color=#89DDFF>^</color> <color=#EEFFFF>blake2b_IV</color><color=#89DDFF>[</color><color=#F78C6C>6</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
        <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#F78C6C>15</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>blake2b_IV</color><color=#89DDFF>[</color><color=#F78C6C>7</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>
    
    <color=#546E7A>/**</color>
<color=#546E7A>     * Processes the given message</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param message</color>
<color=#546E7A>     *            byte array containing the message to be processed</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>update</color><color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>message</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
<color=#546E7A>//      System.out.println("B2B1 mess.l: " + message.length);</color>
<color=#546E7A>//      System.out.println("input b2b1: " + helper.bytes2hex(message));</color>
        
        <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#EEFFFF>message</color><color=#89DDFF>.</color><color=#BB80B3>length</color> <color=#89DDFF>==</color> <color=#F78C6C>128</color><color=#89DDFF>){</color>
            <color=#EEFFFF>update</color><color=#89DDFF>(</color><color=#EEFFFF>Arrays</color><color=#89DDFF>.</color><color=#BB80B3>copyOfRange</color><color=#89DDFF>(</color><color=#EEFFFF>message</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#F78C6C>64</color><color=#89DDFF>),</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>H_LEN</color><color=#89DDFF>);</color>
            <color=#EEFFFF>update</color><color=#89DDFF>(</color><color=#EEFFFF>Arrays</color><color=#89DDFF>.</color><color=#BB80B3>copyOfRange</color><color=#89DDFF>(</color><color=#EEFFFF>message</color><color=#89DDFF>,</color> <color=#F78C6C>64</color><color=#89DDFF>,</color> <color=#F78C6C>128</color><color=#89DDFF>),</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>H_LEN</color><color=#89DDFF>);</color>
        <color=#89DDFF>}</color> <color=#BB80B3>else</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>update</color><color=#89DDFF>(</color><color=#EEFFFF>message</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>H_LEN</color><color=#89DDFF>);</color>
        <color=#89DDFF>}</color>
    <color=#89DDFF>}</color>
    
    <color=#546E7A>/**</color>
<color=#546E7A>     * Processes one single byte</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param b</color>
<color=#546E7A>     *            single byte to be processed</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>update</color><color=#89DDFF>(</color><color=#BB80B3>byte</color> <color=#EEFFFF>b</color><color=#89DDFF>)</color> <color=#89DDFF>{}</color>
    
    <color=#546E7A>/**</color>
<color=#546E7A>     * Processes a number of bytes of the given message </color>
<color=#546E7A>     * from a start position up to offset+len</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param message</color>
<color=#546E7A>     *            byte array containing the message to be processed</color>
<color=#546E7A>     * @param offset</color>
<color=#546E7A>     *            position of message to start from</color>
<color=#546E7A>     * @param len</color>
<color=#546E7A>     *            number of bytes to be processed.</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>update</color><color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>message</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>offset</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>len</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>

        <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#89DDFF>!</color><color=#EEFFFF>halfBuffer</color><color=#89DDFF>){</color>
            <color=#EEFFFF>System</color><color=#89DDFF>.</color><color=#BB80B3>arraycopy</color><color=#89DDFF>(</color><color=#EEFFFF>message</color><color=#89DDFF>,</color>  <color=#EEFFFF>offset</color><color=#89DDFF>,</color> <color=#EEFFFF>buffer</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>H_LEN</color><color=#89DDFF>);</color>
            <color=#EEFFFF>halfBuffer</color> <color=#89DDFF>=</color> <color=#89DDFF>true</color><color=#89DDFF>;</color>          
        <color=#89DDFF>}</color> <color=#BB80B3>else</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>System</color><color=#89DDFF>.</color><color=#BB80B3>arraycopy</color><color=#89DDFF>(</color><color=#EEFFFF>message</color><color=#89DDFF>,</color>  <color=#EEFFFF>offset</color><color=#89DDFF>,</color> <color=#EEFFFF>buffer</color><color=#89DDFF>,</color> <color=#EEFFFF>H_LEN</color><color=#89DDFF>,</color> <color=#EEFFFF>H_LEN</color><color=#89DDFF>);</color>           
            <color=#EEFFFF>halfBuffer</color> <color=#89DDFF>=</color> <color=#89DDFF>false</color><color=#89DDFF>;</color>
        <color=#89DDFF>}</color>
    <color=#89DDFF>}</color>
    
    <color=#546E7A>/**</color>
<color=#546E7A>     * Calculates the final digest value atus</color>
<color=#546E7A>     */</color> 
    <color=#BB80B3>public</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#82AAFF>doFinal</color><color=#89DDFF>()</color> <color=#89DDFF>{</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>out</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#EEFFFF>H_LEN</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
        <color=#EEFFFF>t0</color> <color=#89DDFF>+=</color> <color=#EEFFFF>BLOCK_LENGTH_BYTES</color><color=#89DDFF>;</color>
        <color=#546E7A>// simplified because increment is always 128</color>
        <color=#BB80B3>if</color> <color=#89DDFF>(</color> <color=#89DDFF>(</color><color=#EEFFFF>t0</color> <color=#89DDFF>==</color> <color=#F78C6C>0</color><color=#89DDFF>)){</color>
            <color=#EEFFFF>t1</color><color=#89DDFF>++</color><color=#89DDFF>;</color>
        <color=#89DDFF>}</color>
<color=#546E7A>//      Helper h = new Helper();</color>
<color=#546E7A>//      System.out.println("Buffer: " + h.bytes2hex(buffer));</color>
        
        <color=#EEFFFF>compress</color><color=#89DDFF>(</color><color=#EEFFFF>buffer</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>);</color>
        <color=#EEFFFF>halfBuffer</color> <color=#89DDFF>=</color> <color=#89DDFF>false</color><color=#89DDFF>;</color>
        
        <color=#546E7A>// increment counter by one</color>
        <color=#EEFFFF>vIndex</color> <color=#89DDFF>=</color> <color=#89DDFF>(</color><color=#EEFFFF>vIndex</color><color=#89DDFF>+</color><color=#F78C6C>1</color><color=#89DDFF>)</color> <color=#89DDFF>%</color> <color=#F78C6C>12</color><color=#89DDFF>;</color>

        <color=#BB80B3>for</color> <color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>i</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#EEFFFF>i</color> <color=#89DDFF><</color> <color=#EEFFFF>chainValue</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>;</color> <color=#EEFFFF>i</color><color=#89DDFF>++</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>System</color><color=#89DDFF>.</color><color=#BB80B3>arraycopy</color><color=#89DDFF>(</color><color=#EEFFFF>long2bytes</color><color=#89DDFF>(</color><color=#EEFFFF>chainValue</color><color=#89DDFF>[</color><color=#EEFFFF>i</color><color=#89DDFF>]</color><color=#89DDFF>),</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>out</color><color=#89DDFF>,</color> <color=#EEFFFF>i</color> <color=#89DDFF>*</color> <color=#F78C6C>8</color><color=#89DDFF>,</color> <color=#F78C6C>8</color><color=#89DDFF>);</color>
        <color=#89DDFF>}</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>out</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>
    
    <color=#546E7A>/**</color>
<color=#546E7A>     * Reset the hash function to use again after doFinal().</color>
<color=#546E7A>     * This will not work for keyed digests. </color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>reset</color><color=#89DDFF>()</color> <color=#89DDFF>{</color>
<color=#546E7A>//      System.out.println("--- RESET B2B1---");</color>
        <color=#EEFFFF>halfBuffer</color> <color=#89DDFF>=</color> <color=#89DDFF>false</color><color=#89DDFF>;</color>
        <color=#EEFFFF>t0</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#EEFFFF>L</color><color=#89DDFF>;</color>
        <color=#EEFFFF>t1</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#EEFFFF>L</color><color=#89DDFF>;</color>
        <color=#EEFFFF>Arrays</color><color=#89DDFF>.</color><color=#BB80B3>fill</color><color=#89DDFF>(</color><color=#EEFFFF>buffer</color><color=#89DDFF>,</color>  <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#F78C6C>0</color><color=#89DDFF>);</color>
        <color=#EEFFFF>Arrays</color><color=#89DDFF>.</color><color=#BB80B3>fill</color><color=#89DDFF>(</color><color=#EEFFFF>chainValue</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#EEFFFF>L</color><color=#89DDFF>);</color>    
        <color=#EEFFFF>Arrays</color><color=#89DDFF>.</color><color=#BB80B3>fill</color><color=#89DDFF>(</color><color=#EEFFFF>internalState</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#EEFFFF>L</color><color=#89DDFF>);</color>
        <color=#EEFFFF>chainValue</color> <color=#89DDFF>=</color> <color=#89DDFF>null</color><color=#89DDFF>;</color>
        
        <color=#EEFFFF>vIndex</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color>
        
        <color=#EEFFFF>init</color><color=#89DDFF>();</color>
    <color=#89DDFF>}</color>
    
    <color=#BB80B3>private</color> <color=#BB80B3>void</color> <color=#82AAFF>compress</color><color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>message</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>messagePos</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>

        <color=#EEFFFF>initializeInternalState</color><color=#89DDFF>();</color>
        
        <color=#BB80B3>long</color><color=#89DDFF>[]</color> <color=#EEFFFF>m</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>long</color><color=#89DDFF>[</color><color=#F78C6C>16</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
        <color=#BB80B3>for</color> <color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>j</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#EEFFFF>j</color> <color=#89DDFF><</color> <color=#F78C6C>16</color><color=#89DDFF>;</color> <color=#EEFFFF>j</color><color=#89DDFF>++</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>j</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>bytes2long</color><color=#89DDFF>(</color><color=#EEFFFF>message</color><color=#89DDFF>,</color> <color=#EEFFFF>messagePos</color> <color=#89DDFF>+</color> <color=#EEFFFF>j</color><color=#89DDFF>*</color><color=#F78C6C>8</color><color=#89DDFF>);</color>
        <color=#89DDFF>}</color>
        <color=#546E7A>// single round: Catenas H'</color>
        <color=#546E7A>// G apply to columns of internalState:m[blake2b_sigma[round][2 * blockPos]] /+1</color>
        <color=#EEFFFF>G</color><color=#89DDFF>(</color><color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>vIndex</color><color=#89DDFF>][</color><color=#F78C6C>0</color><color=#89DDFF>]]</color><color=#89DDFF>,</color> <color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>vIndex</color><color=#89DDFF>][</color><color=#F78C6C>1</color><color=#89DDFF>]]</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>4</color><color=#89DDFF>,</color><color=#F78C6C>8</color><color=#89DDFF>,</color><color=#F78C6C>12</color><color=#89DDFF>);</color> 
        <color=#EEFFFF>G</color><color=#89DDFF>(</color><color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>vIndex</color><color=#89DDFF>][</color><color=#F78C6C>2</color><color=#89DDFF>]]</color><color=#89DDFF>,</color> <color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>vIndex</color><color=#89DDFF>][</color><color=#F78C6C>3</color><color=#89DDFF>]]</color><color=#89DDFF>,</color> <color=#F78C6C>1</color><color=#89DDFF>,</color><color=#F78C6C>5</color><color=#89DDFF>,</color><color=#F78C6C>9</color><color=#89DDFF>,</color><color=#F78C6C>13</color><color=#89DDFF>);</color> 
        <color=#EEFFFF>G</color><color=#89DDFF>(</color><color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>vIndex</color><color=#89DDFF>][</color><color=#F78C6C>4</color><color=#89DDFF>]]</color><color=#89DDFF>,</color> <color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>vIndex</color><color=#89DDFF>][</color><color=#F78C6C>5</color><color=#89DDFF>]]</color><color=#89DDFF>,</color> <color=#F78C6C>2</color><color=#89DDFF>,</color><color=#F78C6C>6</color><color=#89DDFF>,</color><color=#F78C6C>10</color><color=#89DDFF>,</color><color=#F78C6C>14</color><color=#89DDFF>);</color> 
        <color=#EEFFFF>G</color><color=#89DDFF>(</color><color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>vIndex</color><color=#89DDFF>][</color><color=#F78C6C>6</color><color=#89DDFF>]]</color><color=#89DDFF>,</color> <color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>vIndex</color><color=#89DDFF>][</color><color=#F78C6C>7</color><color=#89DDFF>]]</color><color=#89DDFF>,</color> <color=#F78C6C>3</color><color=#89DDFF>,</color><color=#F78C6C>7</color><color=#89DDFF>,</color><color=#F78C6C>11</color><color=#89DDFF>,</color><color=#F78C6C>15</color><color=#89DDFF>);</color> 
        <color=#546E7A>// G apply to diagonals of internalState:</color>
        <color=#EEFFFF>G</color><color=#89DDFF>(</color><color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>vIndex</color><color=#89DDFF>][</color><color=#F78C6C>8</color><color=#89DDFF>]]</color><color=#89DDFF>,</color> <color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>vIndex</color><color=#89DDFF>][</color><color=#F78C6C>9</color><color=#89DDFF>]]</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color><color=#F78C6C>5</color><color=#89DDFF>,</color><color=#F78C6C>10</color><color=#89DDFF>,</color><color=#F78C6C>15</color><color=#89DDFF>);</color> 
        <color=#EEFFFF>G</color><color=#89DDFF>(</color><color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>vIndex</color><color=#89DDFF>][</color><color=#F78C6C>10</color><color=#89DDFF>]]</color><color=#89DDFF>,</color> <color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>vIndex</color><color=#89DDFF>][</color><color=#F78C6C>11</color><color=#89DDFF>]]</color><color=#89DDFF>,</color> <color=#F78C6C>1</color><color=#89DDFF>,</color><color=#F78C6C>6</color><color=#89DDFF>,</color><color=#F78C6C>11</color><color=#89DDFF>,</color><color=#F78C6C>12</color><color=#89DDFF>);</color> 
        <color=#EEFFFF>G</color><color=#89DDFF>(</color><color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>vIndex</color><color=#89DDFF>][</color><color=#F78C6C>12</color><color=#89DDFF>]]</color><color=#89DDFF>,</color> <color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>vIndex</color><color=#89DDFF>][</color><color=#F78C6C>13</color><color=#89DDFF>]]</color><color=#89DDFF>,</color> <color=#F78C6C>2</color><color=#89DDFF>,</color><color=#F78C6C>7</color><color=#89DDFF>,</color><color=#F78C6C>8</color><color=#89DDFF>,</color><color=#F78C6C>13</color><color=#89DDFF>);</color> 
        <color=#EEFFFF>G</color><color=#89DDFF>(</color><color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>vIndex</color><color=#89DDFF>][</color><color=#F78C6C>14</color><color=#89DDFF>]]</color><color=#89DDFF>,</color> <color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>vIndex</color><color=#89DDFF>][</color><color=#F78C6C>15</color><color=#89DDFF>]]</color><color=#89DDFF>,</color> <color=#F78C6C>3</color><color=#89DDFF>,</color><color=#F78C6C>4</color><color=#89DDFF>,</color><color=#F78C6C>9</color><color=#89DDFF>,</color><color=#F78C6C>14</color><color=#89DDFF>);</color> 
        
        <color=#546E7A>// update chain values: </color>
        <color=#BB80B3>for</color><color=#89DDFF>(</color> <color=#BB80B3>int</color> <color=#EEFFFF>offset</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#EEFFFF>offset</color> <color=#89DDFF><</color> <color=#F78C6C>8</color><color=#89DDFF>;</color> <color=#EEFFFF>offset</color><color=#89DDFF>++</color> <color=#89DDFF>)</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>chainValue</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>chainValue</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color><color=#89DDFF>]</color> <color=#89DDFF>^</color> <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color><color=#89DDFF>]</color> <color=#89DDFF>^</color> <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color> <color=#89DDFF>+</color> <color=#F78C6C>8</color><color=#89DDFF>]</color><color=#89DDFF>;</color>    
        <color=#89DDFF>}</color>
    <color=#89DDFF>}</color>
    

    <color=#BB80B3>private</color> <color=#BB80B3>void</color> <color=#82AAFF>G</color><color=#89DDFF>(</color><color=#BB80B3>long</color> <color=#EEFFFF>m1</color><color=#89DDFF>,</color> <color=#BB80B3>long</color> <color=#EEFFFF>m2</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>posA</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>posB</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>posC</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>posD</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>

        <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posA</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posA</color><color=#89DDFF>]</color> <color=#89DDFF>+</color> <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posB</color><color=#89DDFF>]</color> <color=#89DDFF>+</color> <color=#EEFFFF>m1</color><color=#89DDFF>;</color> 
        <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posD</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>rotr64</color><color=#89DDFF>(</color><color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posD</color><color=#89DDFF>]</color> <color=#89DDFF>^</color> <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posA</color><color=#89DDFF>]</color><color=#89DDFF>,</color> <color=#F78C6C>32</color><color=#89DDFF>);</color> 
        <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posC</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posC</color><color=#89DDFF>]</color> <color=#89DDFF>+</color> <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posD</color><color=#89DDFF>]</color><color=#89DDFF>;</color> 
        <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posB</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>rotr64</color><color=#89DDFF>(</color><color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posB</color><color=#89DDFF>]</color> <color=#89DDFF>^</color> <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posC</color><color=#89DDFF>]</color><color=#89DDFF>,</color> <color=#F78C6C>24</color><color=#89DDFF>);</color> <color=#546E7A>// replaces 25 of BLAKE</color>
        <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posA</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posA</color><color=#89DDFF>]</color> <color=#89DDFF>+</color> <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posB</color><color=#89DDFF>]</color> <color=#89DDFF>+</color> <color=#EEFFFF>m2</color><color=#89DDFF>;</color> 
        <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posD</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>rotr64</color><color=#89DDFF>(</color><color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posD</color><color=#89DDFF>]</color> <color=#89DDFF>^</color> <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posA</color><color=#89DDFF>]</color><color=#89DDFF>,</color> <color=#F78C6C>16</color><color=#89DDFF>);</color> 
        <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posC</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posC</color><color=#89DDFF>]</color> <color=#89DDFF>+</color> <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posD</color><color=#89DDFF>]</color><color=#89DDFF>;</color> 
        <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posB</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>rotr64</color><color=#89DDFF>(</color><color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posB</color><color=#89DDFF>]</color> <color=#89DDFF>^</color> <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posC</color><color=#89DDFF>]</color><color=#89DDFF>,</color> <color=#F78C6C>63</color><color=#89DDFF>);</color> <color=#546E7A>// replaces 11 of BLAKE</color>
    <color=#89DDFF>}</color>
    
    <color=#BB80B3>private</color> <color=#BB80B3>long</color> <color=#82AAFF>rotr64</color><color=#89DDFF>(</color><color=#BB80B3>long</color> <color=#EEFFFF>x</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>rot</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>x</color> <color=#89DDFF>>>></color> <color=#EEFFFF>rot</color> <color=#89DDFF>|</color> <color=#89DDFF>(</color><color=#EEFFFF>x</color> <color=#89DDFF><<</color> <color=#89DDFF>(</color><color=#F78C6C>64</color> <color=#89DDFF>-</color> <color=#EEFFFF>rot</color><color=#89DDFF>));</color>
    <color=#89DDFF>}</color>
    

    <color=#BB80B3>public</color> <color=#EEFFFF>String</color> <color=#82AAFF>getName</color><color=#89DDFF>(){</color>
        <color=#BB80B3>return</color> <color=#C3E88D>"Catena_Blake2b_1"</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>
    <color=#546E7A>/**</color>
<color=#546E7A>     * This function is used for password hashing scheme</color>
<color=#546E7A>     * Catenas round-reduced version H'</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param _vIndex   some index</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>setVertexIndex</color><color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>_vIndex</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
        
        <color=#EEFFFF>vIndex</color> <color=#89DDFF>=</color> <color=#EEFFFF>_vIndex</color> <color=#89DDFF>%</color> <color=#F78C6C>12</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>
    <color=#546E7A>// convert one long value in byte array</color>
    <color=#546E7A>// little-endian byte order!</color>
    <color=#BB80B3>public</color> <color=#BB80B3>final</color> <color=#BB80B3>static</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#82AAFF>long2bytes</color><color=#89DDFF>(</color><color=#BB80B3>long</color> <color=#EEFFFF>longValue</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
        <color=#BB80B3>return</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#89DDFF>{</color>         
            <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#EEFFFF>longValue</color><color=#89DDFF>,</color>
            <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#89DDFF>(</color><color=#EEFFFF>longValue</color> <color=#89DDFF>>></color> <color=#F78C6C>8</color><color=#89DDFF>),</color>
            <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#89DDFF>(</color><color=#EEFFFF>longValue</color> <color=#89DDFF>>></color> <color=#F78C6C>16</color><color=#89DDFF>),</color>
            <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#89DDFF>(</color><color=#EEFFFF>longValue</color> <color=#89DDFF>>></color> <color=#F78C6C>24</color><color=#89DDFF>),</color>
            <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#89DDFF>(</color><color=#EEFFFF>longValue</color> <color=#89DDFF>>></color> <color=#F78C6C>32</color><color=#89DDFF>),</color>
            <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#89DDFF>(</color><color=#EEFFFF>longValue</color> <color=#89DDFF>>></color> <color=#F78C6C>40</color><color=#89DDFF>),</color>
            <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#89DDFF>(</color><color=#EEFFFF>longValue</color> <color=#89DDFF>>></color> <color=#F78C6C>48</color><color=#89DDFF>),</color>
            <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#89DDFF>(</color><color=#EEFFFF>longValue</color> <color=#89DDFF>>></color> <color=#F78C6C>56</color><color=#89DDFF>)};</color>
    <color=#89DDFF>}</color>
    <color=#546E7A>// little-endian byte order!</color>
    <color=#BB80B3>public</color> <color=#BB80B3>final</color> <color=#BB80B3>static</color> <color=#BB80B3>long</color> <color=#82AAFF>bytes2long</color><color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>byteArray</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>offset</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
          
          <color=#BB80B3>return</color> <color=#89DDFF>(</color>                
                  <color=#89DDFF>((</color><color=#BB80B3>long</color><color=#89DDFF>)</color> <color=#EEFFFF>byteArray</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color><color=#89DDFF>]</color> <color=#89DDFF>&</color> <color=#F78C6C>0xFF</color> <color=#89DDFF>)</color> <color=#89DDFF>|</color>
                  <color=#89DDFF>(((</color><color=#BB80B3>long</color><color=#89DDFF>)</color> <color=#EEFFFF>byteArray</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color> <color=#89DDFF>+</color> <color=#F78C6C>1</color><color=#89DDFF>]</color> <color=#89DDFF>&</color> <color=#F78C6C>0xFF</color> <color=#89DDFF>)</color> <color=#89DDFF><<</color> <color=#F78C6C>8</color><color=#89DDFF>)</color> <color=#89DDFF>|</color>
                  <color=#89DDFF>(((</color><color=#BB80B3>long</color><color=#89DDFF>)</color> <color=#EEFFFF>byteArray</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color> <color=#89DDFF>+</color> <color=#F78C6C>2</color><color=#89DDFF>]</color> <color=#89DDFF>&</color> <color=#F78C6C>0xFF</color> <color=#89DDFF>)</color> <color=#89DDFF><<</color> <color=#F78C6C>16</color><color=#89DDFF>)</color> <color=#89DDFF>|</color>
                  <color=#89DDFF>(((</color><color=#BB80B3>long</color><color=#89DDFF>)</color> <color=#EEFFFF>byteArray</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color> <color=#89DDFF>+</color> <color=#F78C6C>3</color><color=#89DDFF>]</color> <color=#89DDFF>&</color> <color=#F78C6C>0xFF</color> <color=#89DDFF>)</color> <color=#89DDFF><<</color> <color=#F78C6C>24</color><color=#89DDFF>)</color> <color=#89DDFF>|</color>
                  <color=#89DDFF>(((</color><color=#BB80B3>long</color><color=#89DDFF>)</color> <color=#EEFFFF>byteArray</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color> <color=#89DDFF>+</color> <color=#F78C6C>4</color><color=#89DDFF>]</color> <color=#89DDFF>&</color> <color=#F78C6C>0xFF</color> <color=#89DDFF>)</color> <color=#89DDFF><<</color> <color=#F78C6C>32</color><color=#89DDFF>)</color> <color=#89DDFF>|</color>
                  <color=#89DDFF>(((</color><color=#BB80B3>long</color><color=#89DDFF>)</color> <color=#EEFFFF>byteArray</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color> <color=#89DDFF>+</color> <color=#F78C6C>5</color><color=#89DDFF>]</color> <color=#89DDFF>&</color> <color=#F78C6C>0xFF</color> <color=#89DDFF>)</color> <color=#89DDFF><<</color> <color=#F78C6C>40</color><color=#89DDFF>)</color> <color=#89DDFF>|</color>
                  <color=#89DDFF>(((</color><color=#BB80B3>long</color><color=#89DDFF>)</color> <color=#EEFFFF>byteArray</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color> <color=#89DDFF>+</color> <color=#F78C6C>6</color><color=#89DDFF>]</color> <color=#89DDFF>&</color> <color=#F78C6C>0xFF</color> <color=#89DDFF>)</color> <color=#89DDFF><<</color> <color=#F78C6C>48</color><color=#89DDFF>)</color> <color=#89DDFF>|</color>
                  <color=#89DDFF>(((</color><color=#BB80B3>long</color><color=#89DDFF>)</color> <color=#EEFFFF>byteArray</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color> <color=#89DDFF>+</color> <color=#F78C6C>7</color><color=#89DDFF>]</color> <color=#89DDFF>&</color> <color=#F78C6C>0xFF</color> <color=#89DDFF>)</color> <color=#89DDFF><<</color> <color=#F78C6C>56</color><color=#89DDFF>)</color> <color=#89DDFF>)</color> <color=#89DDFF>;</color>                                  
    <color=#89DDFF>}</color>


    <color=#BB80B3>public</color> <color=#BB80B3>int</color> <color=#82AAFF>getOutputSize</color><color=#89DDFF>()</color> <color=#89DDFF>{</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>H_LEN</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>   
<color=#89DDFF>}</color>