<color=#89DDFF>package</color> <color=#FFCB6B>main.java</color><color=#89DDFF>;</color>

<color=#89DDFF>import</color> <color=#FFCB6B>java.io.BufferedReader</color><color=#89DDFF>;</color>
<color=#89DDFF>import</color> <color=#FFCB6B>java.io.ByteArrayOutputStream</color><color=#89DDFF>;</color>
<color=#89DDFF>import</color> <color=#FFCB6B>java.io.File</color><color=#89DDFF>;</color>
<color=#89DDFF>import</color> <color=#FFCB6B>java.io.FileReader</color><color=#89DDFF>;</color>
<color=#89DDFF>import</color> <color=#FFCB6B>java.io.IOException</color><color=#89DDFF>;</color>
<color=#89DDFF>import</color> <color=#FFCB6B>java.nio.ByteBuffer</color><color=#89DDFF>;</color>
<color=#89DDFF>import</color> <color=#FFCB6B>java.util.Arrays</color><color=#89DDFF>;</color>

<color=#89DDFF>import</color> <color=#FFCB6B>org.json.JSONArray</color><color=#89DDFF>;</color>
<color=#89DDFF>import</color> <color=#FFCB6B>org.json.JSONObject</color><color=#89DDFF>;</color>

<color=#BB80B3>public</color> <color=#BB80B3>class</color> <color=#FFCB6B>Helper</color> <color=#89DDFF>{</color>
    
    <color=#BB80B3>private</color> <color=#BB80B3>final</color> <color=#BB80B3>static</color> <color=#BB80B3>char</color><color=#89DDFF>[]</color> <color=#EEFFFF>hexArray</color> <color=#89DDFF>=</color> 
            <color=#C3E88D>"0123456789ABCDEF"</color><color=#89DDFF>.</color><color=#BB80B3>toCharArray</color><color=#89DDFF>();</color>

    <color=#546E7A>/**</color>
<color=#546E7A>     * Helper-function</color>
<color=#546E7A>     * from "github.com/Beloumi/Crypto-Eck"</color>
<color=#546E7A>     * transfers string to byte array</color>
<color=#546E7A>     * @param  hexString    input string</color>
<color=#546E7A>     * @return              byte array</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>final</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#82AAFF>hex2bytes</color><color=#89DDFF>(</color><color=#EEFFFF>String</color> <color=#EEFFFF>hexString</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>

        <color=#546E7A>// 2 Character = 1 Byte</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>byteArray</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#EEFFFF>hexString</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>()</color> <color=#89DDFF>/</color> <color=#F78C6C>2</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
        <color=#BB80B3>int</color> <color=#EEFFFF>len</color> <color=#89DDFF>=</color> <color=#EEFFFF>hexString</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>();</color>
        <color=#BB80B3>if</color> <color=#89DDFF>(</color> <color=#89DDFF>(</color><color=#EEFFFF>len</color> <color=#89DDFF>&</color> <color=#F78C6C>1</color><color=#89DDFF>)</color> <color=#89DDFF>==</color> <color=#F78C6C>1</color><color=#89DDFF>){</color> 
            <color=#EEFFFF>System</color><color=#89DDFF>.</color><color=#BB80B3>err</color><color=#89DDFF>.</color><color=#BB80B3>println</color><color=#89DDFF>(</color><color=#C3E88D>"Illegal Argument (Function "</color>
                    <color=#89DDFF>+</color> <color=#C3E88D>"hexStringToBytes): HexString is not even"</color><color=#89DDFF>);</color>
            <color=#EEFFFF>System</color><color=#89DDFF>.</color><color=#BB80B3>exit</color><color=#89DDFF>(</color><color=#F78C6C>1</color><color=#89DDFF>);</color>
        <color=#89DDFF>}</color>
        <color=#BB80B3>final</color> <color=#BB80B3>char</color> <color=#89DDFF>[]</color> <color=#EEFFFF>hexCharArray</color> <color=#89DDFF>=</color> <color=#EEFFFF>hexString</color><color=#89DDFF>.</color><color=#BB80B3>toCharArray</color> <color=#89DDFF>();</color>
        <color=#BB80B3>for</color> <color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>i</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#EEFFFF>i</color> <color=#89DDFF><</color> <color=#EEFFFF>hexString</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>();</color> <color=#EEFFFF>i</color><color=#89DDFF>+=</color><color=#F78C6C>2</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
            <color=#546E7A>// 1. char in hex <<4, 2. char in hex</color>
            <color=#EEFFFF>byteArray</color><color=#89DDFF>[</color><color=#EEFFFF>i</color> <color=#89DDFF>/</color> <color=#F78C6C>2</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> 
                    <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#89DDFF>((</color><color=#EEFFFF>Character</color><color=#89DDFF>.</color><color=#BB80B3>digit</color> <color=#89DDFF>(</color><color=#EEFFFF>hexCharArray</color><color=#89DDFF>[</color><color=#EEFFFF>i</color><color=#89DDFF>]</color><color=#89DDFF>,</color> <color=#F78C6C>16</color><color=#89DDFF>)</color> <color=#89DDFF><<</color> <color=#F78C6C>4</color><color=#89DDFF>)</color> 
                    <color=#89DDFF>+</color> <color=#EEFFFF>Character</color><color=#89DDFF>.</color><color=#BB80B3>digit</color> <color=#89DDFF>(</color><color=#EEFFFF>hexCharArray</color><color=#89DDFF>[</color><color=#EEFFFF>i</color> <color=#89DDFF>+</color> <color=#F78C6C>1</color><color=#89DDFF>]</color><color=#89DDFF>,</color> <color=#F78C6C>16</color><color=#89DDFF>));</color>
        <color=#89DDFF>}</color>       
        <color=#BB80B3>return</color> <color=#EEFFFF>byteArray</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>
    
    <color=#BB80B3>public</color> <color=#BB80B3>final</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#82AAFF>string2Bytes</color> <color=#89DDFF>(</color><color=#EEFFFF>String</color> <color=#EEFFFF>hexString</color><color=#89DDFF>){</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>hexString</color><color=#89DDFF>.</color><color=#BB80B3>getBytes</color><color=#89DDFF>();</color>
    <color=#89DDFF>}</color>

    <color=#546E7A>/**</color>
<color=#546E7A>     * Helper-function</color>
<color=#546E7A>     * from "github.com/Beloumi/Crypto-Eck"</color>
<color=#546E7A>     * transfers byte array to string</color>
<color=#546E7A>     * @param bytes     array of bytes</color>
<color=#546E7A>     * @return          hexString</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>final</color> <color=#EEFFFF>String</color> <color=#82AAFF>bytes2hex</color><color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>bytes</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
        <color=#BB80B3>char</color><color=#89DDFF>[]</color> <color=#EEFFFF>hexChars</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>char</color><color=#89DDFF>[</color><color=#EEFFFF>bytes</color><color=#89DDFF>.</color><color=#BB80B3>length</color> <color=#89DDFF>*</color> <color=#F78C6C>2</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
        <color=#BB80B3>for</color> <color=#89DDFF>(</color> <color=#BB80B3>int</color> <color=#EEFFFF>j</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#EEFFFF>j</color> <color=#89DDFF><</color> <color=#EEFFFF>bytes</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>;</color> <color=#EEFFFF>j</color><color=#89DDFF>++</color> <color=#89DDFF>)</color> <color=#89DDFF>{</color>
            <color=#BB80B3>int</color> <color=#EEFFFF>v</color> <color=#89DDFF>=</color> <color=#EEFFFF>bytes</color><color=#89DDFF>[</color><color=#EEFFFF>j</color><color=#89DDFF>]</color> <color=#89DDFF>&</color> <color=#F78C6C>0xFF</color><color=#89DDFF>;</color>
            <color=#EEFFFF>hexChars</color><color=#89DDFF>[</color><color=#EEFFFF>j</color> <color=#89DDFF>*</color> <color=#F78C6C>2</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>hexArray</color><color=#89DDFF>[</color><color=#EEFFFF>v</color> <color=#89DDFF>>>></color> <color=#F78C6C>4</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
            <color=#EEFFFF>hexChars</color><color=#89DDFF>[</color><color=#EEFFFF>j</color> <color=#89DDFF>*</color> <color=#F78C6C>2</color> <color=#89DDFF>+</color> <color=#F78C6C>1</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>hexArray</color><color=#89DDFF>[</color><color=#EEFFFF>v</color> <color=#89DDFF>&</color> <color=#F78C6C>0x0F</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
        <color=#89DDFF>}</color>
        <color=#BB80B3>return</color> <color=#BB80B3>new</color> <color=#EEFFFF>String</color><color=#89DDFF>(</color><color=#EEFFFF>hexChars</color><color=#89DDFF>).</color><color=#BB80B3>toLowerCase</color><color=#89DDFF>();</color>
    <color=#89DDFF>}</color>
    
    <color=#546E7A>/**</color>
<color=#546E7A>     * Helper-function</color>
<color=#546E7A>     * Concatenation function to combine all elements of the</color>
<color=#546E7A>     * tweak in one array</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param bytes1    vId </color>
<color=#546E7A>     * @param bytes2    mode</color>
<color=#546E7A>     * @param bytes3    lambda</color>
<color=#546E7A>     * @param bytes4    outLen</color>
<color=#546E7A>     * @param bytes5    sLen</color>
<color=#546E7A>     * @param bytes6    additionalData</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @return          all in one array</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>final</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#82AAFF>concateByteArrays</color><color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>bytes1</color><color=#89DDFF>,</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>bytes2</color><color=#89DDFF>,</color> 
            <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>bytes3</color><color=#89DDFF>,</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>bytes4</color><color=#89DDFF>,</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>bytes5</color><color=#89DDFF>,</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>bytes6</color><color=#89DDFF>){</color>
        <color=#EEFFFF>ByteArrayOutputStream</color> <color=#EEFFFF>out</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>ByteArrayOutputStream</color><color=#89DDFF>();</color>
        <color=#BB80B3>try</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>out</color><color=#89DDFF>.</color><color=#BB80B3>write</color><color=#89DDFF>(</color><color=#EEFFFF>bytes1</color><color=#89DDFF>);</color>
            <color=#EEFFFF>out</color><color=#89DDFF>.</color><color=#BB80B3>write</color><color=#89DDFF>(</color><color=#EEFFFF>bytes2</color><color=#89DDFF>);</color>
            <color=#EEFFFF>out</color><color=#89DDFF>.</color><color=#BB80B3>write</color><color=#89DDFF>(</color><color=#EEFFFF>bytes3</color><color=#89DDFF>);</color>
            <color=#EEFFFF>out</color><color=#89DDFF>.</color><color=#BB80B3>write</color><color=#89DDFF>(</color><color=#EEFFFF>bytes4</color><color=#89DDFF>);</color>
            <color=#EEFFFF>out</color><color=#89DDFF>.</color><color=#BB80B3>write</color><color=#89DDFF>(</color><color=#EEFFFF>bytes5</color><color=#89DDFF>);</color>
            <color=#EEFFFF>out</color><color=#89DDFF>.</color><color=#BB80B3>write</color><color=#89DDFF>(</color><color=#EEFFFF>bytes6</color><color=#89DDFF>);</color>
        <color=#89DDFF>}</color> <color=#BB80B3>catch</color> <color=#89DDFF>(</color><color=#EEFFFF>IOException</color> <color=#EEFFFF>e</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>e</color><color=#89DDFF>.</color><color=#BB80B3>printStackTrace</color><color=#89DDFF>();</color>
        <color=#89DDFF>}</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>out</color><color=#89DDFF>.</color><color=#BB80B3>toByteArray</color><color=#89DDFF>();</color>
    <color=#89DDFF>}</color>
    
    <color=#546E7A>/**</color>
<color=#546E7A>     * Helper-function</color>
<color=#546E7A>     * Concatenation function to combine tweak array</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param bytes1    t</color>
<color=#546E7A>     * @param bytes2    pwd</color>
<color=#546E7A>     * @param bytes3    salt</color>
<color=#546E7A>     * @return          all in one array</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>final</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#82AAFF>concateByteArrays</color><color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>bytes1</color><color=#89DDFF>,</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>bytes2</color><color=#89DDFF>,</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>bytes3</color><color=#89DDFF>){</color>
        <color=#EEFFFF>ByteArrayOutputStream</color> <color=#EEFFFF>out</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>ByteArrayOutputStream</color><color=#89DDFF>();</color>
        <color=#BB80B3>try</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>out</color><color=#89DDFF>.</color><color=#BB80B3>write</color><color=#89DDFF>(</color><color=#EEFFFF>bytes1</color><color=#89DDFF>);</color>
            <color=#EEFFFF>out</color><color=#89DDFF>.</color><color=#BB80B3>write</color><color=#89DDFF>(</color><color=#EEFFFF>bytes2</color><color=#89DDFF>);</color>
            <color=#EEFFFF>out</color><color=#89DDFF>.</color><color=#BB80B3>write</color><color=#89DDFF>(</color><color=#EEFFFF>bytes3</color><color=#89DDFF>);</color>
        <color=#89DDFF>}</color> <color=#BB80B3>catch</color> <color=#89DDFF>(</color><color=#EEFFFF>IOException</color> <color=#EEFFFF>e</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>e</color><color=#89DDFF>.</color><color=#BB80B3>printStackTrace</color><color=#89DDFF>();</color>
        <color=#89DDFF>}</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>out</color><color=#89DDFF>.</color><color=#BB80B3>toByteArray</color><color=#89DDFF>();</color>
    <color=#89DDFF>}</color>
    
    <color=#546E7A>/**</color>
<color=#546E7A>     * Helper-function</color>
<color=#546E7A>     * Concatenation function for byte arrays</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param bytes1    byte[] 1</color>
<color=#546E7A>     * @param bytes2    byte[] 2</color>
<color=#546E7A>     * @param bytes3    byte[] 3</color>
<color=#546E7A>     * @param bytes4    byte[] 4</color>
<color=#546E7A>     * @return          all in one array</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>final</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#82AAFF>concateByteArrays</color><color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>bytes1</color><color=#89DDFF>,</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>bytes2</color><color=#89DDFF>,</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>bytes3</color><color=#89DDFF>,</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>bytes4</color><color=#89DDFF>){</color>
        <color=#EEFFFF>ByteArrayOutputStream</color> <color=#EEFFFF>out</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>ByteArrayOutputStream</color><color=#89DDFF>();</color>
        <color=#BB80B3>try</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>out</color><color=#89DDFF>.</color><color=#BB80B3>write</color><color=#89DDFF>(</color><color=#EEFFFF>bytes1</color><color=#89DDFF>);</color>
            <color=#EEFFFF>out</color><color=#89DDFF>.</color><color=#BB80B3>write</color><color=#89DDFF>(</color><color=#EEFFFF>bytes2</color><color=#89DDFF>);</color>
            <color=#EEFFFF>out</color><color=#89DDFF>.</color><color=#BB80B3>write</color><color=#89DDFF>(</color><color=#EEFFFF>bytes3</color><color=#89DDFF>);</color>
            <color=#EEFFFF>out</color><color=#89DDFF>.</color><color=#BB80B3>write</color><color=#89DDFF>(</color><color=#EEFFFF>bytes4</color><color=#89DDFF>);</color>
        <color=#89DDFF>}</color> <color=#BB80B3>catch</color> <color=#89DDFF>(</color><color=#EEFFFF>IOException</color> <color=#EEFFFF>e</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>e</color><color=#89DDFF>.</color><color=#BB80B3>printStackTrace</color><color=#89DDFF>();</color>
        <color=#89DDFF>}</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>out</color><color=#89DDFF>.</color><color=#BB80B3>toByteArray</color><color=#89DDFF>();</color>
    <color=#89DDFF>}</color>
    
    <color=#546E7A>/**</color>
<color=#546E7A>     * Helper-function</color>
<color=#546E7A>     * Concatenation function to combine 2 byte arrays</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param bytes1    first array</color>
<color=#546E7A>     * @param bytes2    second array</color>
<color=#546E7A>     * @return          all in one array</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>final</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#82AAFF>concateByteArrays</color><color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>bytes1</color><color=#89DDFF>,</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>bytes2</color><color=#89DDFF>){</color>
        <color=#EEFFFF>ByteArrayOutputStream</color> <color=#EEFFFF>out</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>ByteArrayOutputStream</color><color=#89DDFF>();</color>
        <color=#BB80B3>try</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>out</color><color=#89DDFF>.</color><color=#BB80B3>write</color><color=#89DDFF>(</color><color=#EEFFFF>bytes1</color><color=#89DDFF>);</color>
            <color=#EEFFFF>out</color><color=#89DDFF>.</color><color=#BB80B3>write</color><color=#89DDFF>(</color><color=#EEFFFF>bytes2</color><color=#89DDFF>);</color>
        <color=#89DDFF>}</color> <color=#BB80B3>catch</color> <color=#89DDFF>(</color><color=#EEFFFF>IOException</color> <color=#EEFFFF>e</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>e</color><color=#89DDFF>.</color><color=#BB80B3>printStackTrace</color><color=#89DDFF>();</color>
        <color=#89DDFF>}</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>out</color><color=#89DDFF>.</color><color=#BB80B3>toByteArray</color><color=#89DDFF>();</color>
    <color=#89DDFF>}</color>
    
    <color=#546E7A>/**</color>
<color=#546E7A>     * Converts Integer to byte arrays of size 2 or 4</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param data      input integer</color>
<color=#546E7A>     * @param bytes     ammount of bytes in array</color>
<color=#546E7A>     * @return          converted byte array</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#82AAFF>intToByteArray</color><color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>data</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>bytes</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
    
        <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#EEFFFF>bytes</color> <color=#89DDFF>==</color> <color=#F78C6C>4</color><color=#89DDFF>){</color>
            <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>result</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#F78C6C>4</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
            
            <color=#EEFFFF>result</color><color=#89DDFF>[</color><color=#F78C6C>0</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#89DDFF>((</color><color=#EEFFFF>data</color> <color=#89DDFF>&</color> <color=#F78C6C>0xFF000000</color><color=#89DDFF>)</color> <color=#89DDFF>>></color> <color=#F78C6C>24</color><color=#89DDFF>);</color>
            <color=#EEFFFF>result</color><color=#89DDFF>[</color><color=#F78C6C>1</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#89DDFF>((</color><color=#EEFFFF>data</color> <color=#89DDFF>&</color> <color=#F78C6C>0x00FF0000</color><color=#89DDFF>)</color> <color=#89DDFF>>></color> <color=#F78C6C>16</color><color=#89DDFF>);</color>
            <color=#EEFFFF>result</color><color=#89DDFF>[</color><color=#F78C6C>2</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#89DDFF>((</color><color=#EEFFFF>data</color> <color=#89DDFF>&</color> <color=#F78C6C>0x0000FF00</color><color=#89DDFF>)</color> <color=#89DDFF>>></color>  <color=#F78C6C>8</color><color=#89DDFF>);</color>
            <color=#EEFFFF>result</color><color=#89DDFF>[</color><color=#F78C6C>3</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#89DDFF>((</color><color=#EEFFFF>data</color> <color=#89DDFF>&</color> <color=#F78C6C>0x000000FF</color><color=#89DDFF>)</color>      <color=#89DDFF>);</color>
            
            <color=#BB80B3>return</color> <color=#EEFFFF>result</color><color=#89DDFF>;</color>
        <color=#89DDFF>}</color> <color=#BB80B3>else</color> <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#EEFFFF>bytes</color> <color=#89DDFF>==</color> <color=#F78C6C>2</color><color=#89DDFF>){</color>
            <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>result</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#F78C6C>2</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
            
            <color=#EEFFFF>result</color><color=#89DDFF>[</color><color=#F78C6C>0</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#89DDFF>((</color><color=#EEFFFF>data</color> <color=#89DDFF>&</color> <color=#F78C6C>0xFF00</color><color=#89DDFF>)</color> <color=#89DDFF>>></color> <color=#F78C6C>8</color><color=#89DDFF>);</color>
            <color=#EEFFFF>result</color><color=#89DDFF>[</color><color=#F78C6C>1</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#89DDFF>((</color><color=#EEFFFF>data</color> <color=#89DDFF>&</color> <color=#F78C6C>0x00FF</color><color=#89DDFF>));</color>
            
            <color=#BB80B3>return</color> <color=#EEFFFF>result</color><color=#89DDFF>;</color>
        <color=#89DDFF>}</color> <color=#BB80B3>else</color> <color=#89DDFF>{</color>
            <color=#BB80B3>return</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#F78C6C>1</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
        <color=#89DDFF>}</color>
    <color=#89DDFF>}</color>
    
    <color=#546E7A>/**</color>
<color=#546E7A>     * Converts Integer to byte arrays of size 2 or 4</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param data      input integer</color>
<color=#546E7A>     * @param bytes     ammount of bytes in array</color>
<color=#546E7A>     * @return          converted byte array</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#82AAFF>intToByteArrayLittleEndian</color><color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>data</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>bytes</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
    
        <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#EEFFFF>bytes</color> <color=#89DDFF>==</color> <color=#F78C6C>4</color><color=#89DDFF>){</color>
            <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>result</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#F78C6C>4</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
            
            <color=#EEFFFF>result</color><color=#89DDFF>[</color><color=#F78C6C>0</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#89DDFF>((</color><color=#EEFFFF>data</color> <color=#89DDFF>&</color> <color=#F78C6C>0x000000FF</color><color=#89DDFF>)</color>      <color=#89DDFF>);</color>
            <color=#EEFFFF>result</color><color=#89DDFF>[</color><color=#F78C6C>1</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#89DDFF>((</color><color=#EEFFFF>data</color> <color=#89DDFF>&</color> <color=#F78C6C>0x0000FF00</color><color=#89DDFF>)</color> <color=#89DDFF>>></color>  <color=#F78C6C>8</color><color=#89DDFF>);</color>
            <color=#EEFFFF>result</color><color=#89DDFF>[</color><color=#F78C6C>2</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#89DDFF>((</color><color=#EEFFFF>data</color> <color=#89DDFF>&</color> <color=#F78C6C>0x00FF0000</color><color=#89DDFF>)</color> <color=#89DDFF>>></color> <color=#F78C6C>16</color><color=#89DDFF>);</color>
            <color=#EEFFFF>result</color><color=#89DDFF>[</color><color=#F78C6C>3</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#89DDFF>((</color><color=#EEFFFF>data</color> <color=#89DDFF>&</color> <color=#F78C6C>0xFF000000</color><color=#89DDFF>)</color> <color=#89DDFF>>></color> <color=#F78C6C>24</color><color=#89DDFF>);</color>
            
            <color=#BB80B3>return</color> <color=#EEFFFF>result</color><color=#89DDFF>;</color>
        <color=#89DDFF>}</color> <color=#BB80B3>else</color> <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#EEFFFF>bytes</color> <color=#89DDFF>==</color> <color=#F78C6C>2</color><color=#89DDFF>){</color>
            <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>result</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#F78C6C>2</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
            
            <color=#EEFFFF>result</color><color=#89DDFF>[</color><color=#F78C6C>0</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#89DDFF>((</color><color=#EEFFFF>data</color> <color=#89DDFF>&</color> <color=#F78C6C>0x00FF</color><color=#89DDFF>)</color>     <color=#89DDFF>);</color>
            <color=#EEFFFF>result</color><color=#89DDFF>[</color><color=#F78C6C>1</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#89DDFF>((</color><color=#EEFFFF>data</color> <color=#89DDFF>&</color> <color=#F78C6C>0xFF00</color><color=#89DDFF>)</color> <color=#89DDFF>>></color> <color=#F78C6C>8</color><color=#89DDFF>);</color>
            
            <color=#BB80B3>return</color> <color=#EEFFFF>result</color><color=#89DDFF>;</color>
        <color=#89DDFF>}</color> <color=#BB80B3>else</color> <color=#89DDFF>{</color>
            <color=#BB80B3>return</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#F78C6C>1</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
        <color=#89DDFF>}</color>
    <color=#89DDFF>}</color>
    
    <color=#546E7A>/**</color>
<color=#546E7A>     * combines two dimensional byte array to one dimension </color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param bytes     two dim byte array</color>
<color=#546E7A>     * @return          one dimensional array</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#82AAFF>twoDimByteArrayToOne</color><color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>[][]</color> <color=#EEFFFF>bytes</color><color=#89DDFF>){</color>
        <color=#EEFFFF>ByteArrayOutputStream</color> <color=#EEFFFF>out</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>ByteArrayOutputStream</color><color=#89DDFF>();</color>
        
        <color=#BB80B3>for</color><color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>row</color> <color=#89DDFF>=</color><color=#F78C6C>0</color> <color=#89DDFF>;</color> <color=#EEFFFF>row</color> <color=#89DDFF><</color> <color=#EEFFFF>bytes</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>;</color> <color=#89DDFF>++</color><color=#EEFFFF>row</color><color=#89DDFF>){</color>
            <color=#BB80B3>try</color> <color=#89DDFF>{</color>
                <color=#EEFFFF>out</color><color=#89DDFF>.</color><color=#BB80B3>write</color><color=#89DDFF>(</color><color=#EEFFFF>bytes</color><color=#89DDFF>[</color><color=#EEFFFF>row</color><color=#89DDFF>]</color><color=#89DDFF>);</color>
            <color=#89DDFF>}</color> <color=#BB80B3>catch</color> <color=#89DDFF>(</color><color=#EEFFFF>IOException</color> <color=#EEFFFF>e</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
                <color=#EEFFFF>e</color><color=#89DDFF>.</color><color=#BB80B3>printStackTrace</color><color=#89DDFF>();</color>
            <color=#89DDFF>}</color>
        <color=#89DDFF>}</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>out</color><color=#89DDFF>.</color><color=#BB80B3>toByteArray</color><color=#89DDFF>();</color>
    <color=#89DDFF>}</color>
    
    <color=#BB80B3>public</color> <color=#BB80B3>byte</color><color=#89DDFF>[][]</color> <color=#82AAFF>oneDimByteArrToTwoDim</color> <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>b</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>len</color><color=#89DDFF>){</color>
        <color=#BB80B3>int</color> <color=#EEFFFF>bLen</color> <color=#89DDFF>=</color> <color=#EEFFFF>b</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>;</color>
        <color=#BB80B3>int</color> <color=#EEFFFF>dimension</color> <color=#89DDFF>=</color> <color=#EEFFFF>bLen</color><color=#89DDFF>/</color><color=#EEFFFF>len</color><color=#89DDFF>;</color>
        
        <color=#BB80B3>byte</color><color=#89DDFF>[][]</color> <color=#EEFFFF>twoDim</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#EEFFFF>dimension</color><color=#89DDFF>][</color><color=#EEFFFF>len</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
        <color=#BB80B3>for</color> <color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>i</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#EEFFFF>i</color> <color=#89DDFF><</color> <color=#EEFFFF>bLen</color><color=#89DDFF>/</color><color=#EEFFFF>len</color><color=#89DDFF>;</color> <color=#89DDFF>++</color><color=#EEFFFF>i</color> <color=#89DDFF>){</color>
            <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>tmp</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#EEFFFF>len</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
            <color=#EEFFFF>System</color><color=#89DDFF>.</color><color=#BB80B3>arraycopy</color><color=#89DDFF>(</color><color=#EEFFFF>b</color><color=#89DDFF>,</color> <color=#EEFFFF>i</color><color=#89DDFF>*</color><color=#EEFFFF>len</color><color=#89DDFF>,</color> <color=#EEFFFF>tmp</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>len</color><color=#89DDFF>);</color>
            <color=#EEFFFF>twoDim</color><color=#89DDFF>[</color><color=#EEFFFF>i</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>tmp</color><color=#89DDFF>;</color>
        <color=#89DDFF>}</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>twoDim</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>
    
    <color=#546E7A>/**</color>
<color=#546E7A>     * Helper-function</color>
<color=#546E7A>     * Creates a new array of desired size and copies the old one in </color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param b     input array of size m</color>
<color=#546E7A>     * @param l     desired size</color>
<color=#546E7A>     * @return      array with padded 0's</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>final</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#82AAFF>paddWithZero</color><color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>b</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>l</color><color=#89DDFF>){</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>output</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#EEFFFF>l</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
        <color=#EEFFFF>System</color><color=#89DDFF>.</color><color=#BB80B3>arraycopy</color><color=#89DDFF>(</color><color=#EEFFFF>b</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>output</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>b</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>);</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>output</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>
    
    <color=#546E7A>/**</color>
<color=#546E7A>     * Helper-function</color>
<color=#546E7A>     * truncates at the end of flap</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param x     the current array to be truncated</color>
<color=#546E7A>     * @param m     the desired output length</color>
<color=#546E7A>     * @return      the resulting array</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>final</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#82AAFF>truncate</color><color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>x</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>m</color><color=#89DDFF>){</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>Arrays</color><color=#89DDFF>.</color><color=#BB80B3>copyOfRange</color><color=#89DDFF>(</color><color=#EEFFFF>x</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>m</color><color=#89DDFF>);</color>
    <color=#89DDFF>}</color>
    
    <color=#546E7A>/**</color>
<color=#546E7A>     * XORing two byte arrays of equal size</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param arr1      first byte array</color>
<color=#546E7A>     * @param arr2      second byte array</color>
<color=#546E7A>     * @return          XORed byte array</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#82AAFF>xor</color> <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>arr1</color><color=#89DDFF>,</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>arr2</color><color=#89DDFF>){</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>res</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#EEFFFF>arr1</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>]</color><color=#89DDFF>;</color>
        <color=#BB80B3>int</color> <color=#EEFFFF>i</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color>
        <color=#BB80B3>for</color> <color=#89DDFF>(</color><color=#BB80B3>byte</color> <color=#EEFFFF>b</color> <color=#89DDFF>:</color> <color=#EEFFFF>arr1</color><color=#89DDFF>)</color>
            <color=#EEFFFF>res</color><color=#89DDFF>[</color><color=#EEFFFF>i</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#89DDFF>(</color><color=#EEFFFF>b</color> <color=#89DDFF>^</color> <color=#EEFFFF>arr2</color><color=#89DDFF>[</color><color=#EEFFFF>i</color><color=#89DDFF>++]</color><color=#89DDFF>);</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>res</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>
    
    <color=#546E7A>/**</color>
<color=#546E7A>     * Container for byte to long and long to byte transformation</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>private</color> <color=#EEFFFF>ByteBuffer</color> <color=#EEFFFF>bufferLong</color> <color=#89DDFF>=</color> <color=#EEFFFF>ByteBuffer</color><color=#89DDFF>.</color><color=#BB80B3>allocate</color><color=#89DDFF>(</color><color=#EEFFFF>Long</color><color=#89DDFF>.</color><color=#BB80B3>BYTES</color><color=#89DDFF>);</color>    

    <color=#546E7A>/**</color>
<color=#546E7A>     * Transforms long to byte array</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param x     long input</color>
<color=#546E7A>     * @return      byte array</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#82AAFF>longToBytes</color><color=#89DDFF>(</color><color=#BB80B3>long</color> <color=#EEFFFF>x</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
        <color=#EEFFFF>bufferLong</color><color=#89DDFF>.</color><color=#BB80B3>putLong</color><color=#89DDFF>(</color><color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>x</color><color=#89DDFF>);</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>bufferLong</color><color=#89DDFF>.</color><color=#BB80B3>array</color><color=#89DDFF>();</color>
    <color=#89DDFF>}</color>

    <color=#546E7A>/**</color>
<color=#546E7A>     * Transforms byte arrsy to long</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param bytes     bytes to transform to long</color>
<color=#546E7A>     * @return          long value</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>long</color> <color=#82AAFF>bytesToLong</color><color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>bytes</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
        <color=#EEFFFF>bufferLong</color><color=#89DDFF>.</color><color=#BB80B3>put</color><color=#89DDFF>(</color><color=#EEFFFF>bytes</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>bytes</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>);</color>
        <color=#EEFFFF>bufferLong</color><color=#89DDFF>.</color><color=#BB80B3>flip</color><color=#89DDFF>();</color><color=#546E7A>//need flip </color>
        <color=#BB80B3>return</color> <color=#EEFFFF>bufferLong</color><color=#89DDFF>.</color><color=#BB80B3>getLong</color><color=#89DDFF>();</color>
    <color=#89DDFF>}</color>
    

    <color=#546E7A>/**</color>
<color=#546E7A>     * Container for byte to int and int to byte transformation</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>private</color> <color=#EEFFFF>ByteBuffer</color> <color=#EEFFFF>bufferInt</color> <color=#89DDFF>=</color> <color=#EEFFFF>ByteBuffer</color><color=#89DDFF>.</color><color=#BB80B3>allocate</color><color=#89DDFF>(</color><color=#EEFFFF>Integer</color><color=#89DDFF>.</color><color=#BB80B3>BYTES</color><color=#89DDFF>);</color>

    <color=#546E7A>/**</color>
<color=#546E7A>     * Transforms Integer to byte array</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param x         input integer</color>
<color=#546E7A>     * @return          byte array</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#82AAFF>intToBytes</color><color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>x</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
        <color=#EEFFFF>bufferInt</color><color=#89DDFF>.</color><color=#BB80B3>clear</color><color=#89DDFF>();</color>
        <color=#EEFFFF>bufferInt</color><color=#89DDFF>.</color><color=#BB80B3>putInt</color><color=#89DDFF>(</color><color=#EEFFFF>x</color><color=#89DDFF>);</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>bufferInt</color><color=#89DDFF>.</color><color=#BB80B3>array</color><color=#89DDFF>();</color>
    <color=#89DDFF>}</color>
    
    <color=#546E7A>/**</color>
<color=#546E7A>     * Transforms byte array to Integer</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param bytes     bytes to be transformed to int</color>
<color=#546E7A>     * @return          int value</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>int</color> <color=#82AAFF>bytesToInt</color> <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>bytes</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
        <color=#EEFFFF>bufferInt</color><color=#89DDFF>.</color><color=#BB80B3>put</color><color=#89DDFF>(</color><color=#EEFFFF>bytes</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>bytes</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>);</color>
        <color=#EEFFFF>bufferInt</color><color=#89DDFF>.</color><color=#BB80B3>flip</color><color=#89DDFF>();</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>bufferInt</color><color=#89DDFF>.</color><color=#BB80B3>getInt</color><color=#89DDFF>();</color>
    <color=#89DDFF>}</color>
    
    <color=#BB80B3>public</color> <color=#EEFFFF>JSONArray</color> <color=#82AAFF>jsonParserArr</color><color=#89DDFF>(</color><color=#EEFFFF>File</color> <color=#EEFFFF>f</color><color=#89DDFF>){</color>
        <color=#EEFFFF>BufferedReader</color> <color=#EEFFFF>br</color><color=#89DDFF>;</color>
        <color=#EEFFFF>String</color> <color=#EEFFFF>all</color> <color=#89DDFF>=</color> <color=#C3E88D>""</color><color=#89DDFF>;</color>
        <color=#BB80B3>try</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>br</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>BufferedReader</color><color=#89DDFF>(</color><color=#BB80B3>new</color> <color=#EEFFFF>FileReader</color><color=#89DDFF>(</color><color=#EEFFFF>f</color><color=#89DDFF>));</color>
            <color=#EEFFFF>String</color> <color=#EEFFFF>line</color><color=#89DDFF>;</color>
            <color=#BB80B3>while</color> <color=#89DDFF>((</color><color=#EEFFFF>line</color> <color=#89DDFF>=</color> <color=#EEFFFF>br</color><color=#89DDFF>.</color><color=#BB80B3>readLine</color><color=#89DDFF>())</color> <color=#89DDFF>!=</color> <color=#89DDFF>null</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
                <color=#EEFFFF>all</color><color=#89DDFF>+=</color><color=#EEFFFF>line</color><color=#89DDFF>;</color>
            <color=#89DDFF>}</color>
        <color=#89DDFF>}</color><color=#BB80B3>catch</color> <color=#89DDFF>(</color><color=#EEFFFF>Exception</color> <color=#EEFFFF>e</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
        <color=#89DDFF>}</color>
        <color=#BB80B3>return</color> <color=#BB80B3>new</color> <color=#EEFFFF>JSONArray</color><color=#89DDFF>(</color><color=#EEFFFF>all</color><color=#89DDFF>);</color>
    <color=#89DDFF>}</color>
    
    <color=#BB80B3>public</color> <color=#EEFFFF>JSONObject</color> <color=#82AAFF>jsonParserObj</color><color=#89DDFF>(</color><color=#EEFFFF>File</color> <color=#EEFFFF>f</color><color=#89DDFF>){</color>
        <color=#EEFFFF>BufferedReader</color> <color=#EEFFFF>br</color><color=#89DDFF>;</color>
        <color=#EEFFFF>String</color> <color=#EEFFFF>all</color> <color=#89DDFF>=</color> <color=#C3E88D>""</color><color=#89DDFF>;</color>
        <color=#BB80B3>try</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>br</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>BufferedReader</color><color=#89DDFF>(</color><color=#BB80B3>new</color> <color=#EEFFFF>FileReader</color><color=#89DDFF>(</color><color=#EEFFFF>f</color><color=#89DDFF>));</color>
            <color=#EEFFFF>String</color> <color=#EEFFFF>line</color><color=#89DDFF>;</color>
            <color=#BB80B3>while</color> <color=#89DDFF>((</color><color=#EEFFFF>line</color> <color=#89DDFF>=</color> <color=#EEFFFF>br</color><color=#89DDFF>.</color><color=#BB80B3>readLine</color><color=#89DDFF>())</color> <color=#89DDFF>!=</color> <color=#89DDFF>null</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
                <color=#EEFFFF>all</color><color=#89DDFF>+=</color><color=#EEFFFF>line</color><color=#89DDFF>;</color>
            <color=#89DDFF>}</color>
        <color=#89DDFF>}</color><color=#BB80B3>catch</color> <color=#89DDFF>(</color><color=#EEFFFF>Exception</color> <color=#EEFFFF>e</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
        <color=#89DDFF>}</color>
        <color=#BB80B3>return</color> <color=#BB80B3>new</color> <color=#EEFFFF>JSONObject</color><color=#89DDFF>(</color><color=#EEFFFF>all</color><color=#89DDFF>);</color>
    <color=#89DDFF>}</color>
<color=#89DDFF>}</color>