<color=#89DDFF>package</color> <color=#FFCB6B>main.java.components.hash.algorithms</color><color=#89DDFF>;</color>

<color=#546E7A>/*</color>
<color=#546E7A> * Hash Function Blake2b </color>
<color=#546E7A> * </color>
<color=#546E7A> * Copyright (C) 2015  Axel von dem Bruch</color>
<color=#546E7A> * </color>
<color=#546E7A> * This library is free software; you can redistribute it and/or</color>
<color=#546E7A> * modify it under the terms of the GNU Lesser General Public</color>
<color=#546E7A> * License as published by the Free Software Foundation; either</color>
<color=#546E7A> * version 2.1 of the License, or (at your option) any later version.</color>
<color=#546E7A> * </color>
<color=#546E7A> * This library is distributed in the hope that it will be useful,</color>
<color=#546E7A> * but WITHOUT ANY WARRANTY; without even the implied warranty of</color>
<color=#546E7A> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</color>
<color=#546E7A> * Lesser General Public License for more details.</color>
<color=#546E7A> * </color>
<color=#546E7A> * See:  https://www.gnu.org/licenses/lgpl-2.1.html</color>
<color=#546E7A> * You should have received a copy of the GNU General Public License </color>
<color=#546E7A> * along with this library.</color>
<color=#546E7A> * </color>
<color=#546E7A> * Note: A modified version of this class might be in future a part of </color>
<color=#546E7A> * Bouncy Castle Crypto API</color>
<color=#546E7A> * and will probably available under MIT-like license </color>
<color=#546E7A> */</color>

<color=#546E7A>/*  The BLAKE2 cryptographic hash function was designed by Jean-</color>
<color=#546E7A>   Philippe Aumasson, Samuel Neves, Zooko Wilcox-O'Hearn, and Christian</color>
<color=#546E7A>   Winnerlein.</color>
<color=#546E7A>   With a built-in keying mechanism BLAKE2 can be used instead of a HMAC construction.</color>
<color=#546E7A>   BLAKE2b is optimized for 64-bit platforms and produces digests of any size </color>
<color=#546E7A>   between 1 and 64 bytes.      </color>
<color=#546E7A>      Reference Implementation and Description can be found at: https://blake2.net/      </color>
<color=#546E7A>      Internet Draft: https://tools.ietf.org/html/draft-saarinen-blake2-02</color>
<color=#546E7A>      </color>
<color=#546E7A>   This implementation does not support the Tree Hashing Mode. </color>
<color=#546E7A>          </color>
<color=#546E7A>      </color>
<color=#546E7A>   Example code using this class:</color>
<color=#546E7A>      </color>
<color=#546E7A>      Blake2b b = new Blake2b(); // no key, no salt, no personalization</color>
<color=#546E7A>      b.update( anyByteArray1 );</color>
<color=#546E7A>      b.update( anyByteArray2 );</color>
<color=#546E7A>      byte[] hash = new byte[64];// full length of hash value</color>
<color=#546E7A>      b.doFinal(hash, 0); // result now holds the hash value (64 byte)</color>
<color=#546E7A>      </color>
<color=#546E7A>      Blake2b b2b = new Blake2b(); // no key, no salt, no personalization</color>
<color=#546E7A>      b2b2.update( anyByteArray );</color>
<color=#546E7A>      // store hash value in any byte array with length > 64 + pos</color>
<color=#546E7A>      b2b.doFinal(result, pos); // result now holds the hash value (64 byte) at position pos</color>
<color=#546E7A>      </color>
<color=#546E7A>      Blake2b b2bK = new Blake2b( anyKeyAsByteArray );// key length 0 - 64 </color>
<color=#546E7A>      b2bK.update( anyByteArray );</color>
<color=#546E7A>      byte[] resultK = new byte[64];// full length of hash value</color>
<color=#546E7A>      b2bK.doFinal(resultK, 0); // resultK now holds the hash value</color>
<color=#546E7A>      </color>
<color=#546E7A>      Blake2b b2bX = new Blake2b(</color>
<color=#546E7A>            anyKeyAsByteArray, // 0 - 64 Byte or null</color>
<color=#546E7A>            outputLength, // 1 - 64</color>
<color=#546E7A>            anySaltAsByteArray, // exactly 16 Byte or null</color>
<color=#546E7A>            anyPersonalizationAsByteArray); // exactly 16 Byte or null</color>
<color=#546E7A>      b2bX.update( anyByteArray );</color>
<color=#546E7A>      byte[] resultX = new byte[outputLength];</color>
<color=#546E7A>      b2bX.doFinal(resultX, 0); // resultX now holds the hash value    </color>
<color=#546E7A>*/</color>

<color=#89DDFF>import</color> <color=#FFCB6B>java.util.Arrays</color><color=#89DDFF>;</color>

<color=#89DDFF>import</color> <color=#FFCB6B>main.java.components.hash.HashInterface</color><color=#89DDFF>;</color>

<color=#BB80B3>public</color> <color=#BB80B3>class</color> <color=#FFCB6B>Blake2b</color> <color=#BB80B3>implements</color> <color=#EEFFFF>HashInterface</color> <color=#89DDFF>{</color>

    <color=#BB80B3>private</color> <color=#BB80B3>final</color> <color=#BB80B3>static</color> <color=#BB80B3>long</color><color=#89DDFF>[]</color> <color=#EEFFFF>blake2b_IV</color> <color=#89DDFF>=</color>
            <color=#546E7A>// Blake2b Initialization Vector:</color>
            <color=#546E7A>// Produced from the square root of primes 2, 3, 5, 7, 11, 13, 17, 19.</color>
            <color=#546E7A>// The same as SHA-512 IV.</color>
            <color=#89DDFF>{</color>
                    <color=#F78C6C>0x6a09e667f3bcc908L</color><color=#89DDFF>,</color> <color=#F78C6C>0xbb67ae8584caa73bL</color><color=#89DDFF>,</color>
                    <color=#F78C6C>0x3c6ef372fe94f82bL</color><color=#89DDFF>,</color> <color=#F78C6C>0xa54ff53a5f1d36f1L</color><color=#89DDFF>,</color>
                    <color=#F78C6C>0x510e527fade682d1L</color><color=#89DDFF>,</color> <color=#F78C6C>0x9b05688c2b3e6c1fL</color><color=#89DDFF>,</color>
                    <color=#F78C6C>0x1f83d9abfb41bd6bL</color><color=#89DDFF>,</color> <color=#F78C6C>0x5be0cd19137e2179L</color>
            <color=#89DDFF>};</color>

    <color=#BB80B3>private</color> <color=#BB80B3>final</color> <color=#BB80B3>static</color> <color=#BB80B3>byte</color><color=#89DDFF>[][]</color> <color=#EEFFFF>blake2b_sigma</color> <color=#89DDFF>=</color> <color=#546E7A>// Message word permutations</color>
            <color=#89DDFF>{</color>
                    <color=#89DDFF>{</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#F78C6C>1</color><color=#89DDFF>,</color> <color=#F78C6C>2</color><color=#89DDFF>,</color> <color=#F78C6C>3</color><color=#89DDFF>,</color> <color=#F78C6C>4</color><color=#89DDFF>,</color> <color=#F78C6C>5</color><color=#89DDFF>,</color> <color=#F78C6C>6</color><color=#89DDFF>,</color> <color=#F78C6C>7</color><color=#89DDFF>,</color> <color=#F78C6C>8</color><color=#89DDFF>,</color> <color=#F78C6C>9</color><color=#89DDFF>,</color> <color=#F78C6C>10</color><color=#89DDFF>,</color> <color=#F78C6C>11</color><color=#89DDFF>,</color> <color=#F78C6C>12</color><color=#89DDFF>,</color> <color=#F78C6C>13</color><color=#89DDFF>,</color> <color=#F78C6C>14</color><color=#89DDFF>,</color> <color=#F78C6C>15</color> <color=#89DDFF>},</color>
                    <color=#89DDFF>{</color> <color=#F78C6C>14</color><color=#89DDFF>,</color> <color=#F78C6C>10</color><color=#89DDFF>,</color> <color=#F78C6C>4</color><color=#89DDFF>,</color> <color=#F78C6C>8</color><color=#89DDFF>,</color> <color=#F78C6C>9</color><color=#89DDFF>,</color> <color=#F78C6C>15</color><color=#89DDFF>,</color> <color=#F78C6C>13</color><color=#89DDFF>,</color> <color=#F78C6C>6</color><color=#89DDFF>,</color> <color=#F78C6C>1</color><color=#89DDFF>,</color> <color=#F78C6C>12</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#F78C6C>2</color><color=#89DDFF>,</color> <color=#F78C6C>11</color><color=#89DDFF>,</color> <color=#F78C6C>7</color><color=#89DDFF>,</color> <color=#F78C6C>5</color><color=#89DDFF>,</color> <color=#F78C6C>3</color> <color=#89DDFF>},</color>
                    <color=#89DDFF>{</color> <color=#F78C6C>11</color><color=#89DDFF>,</color> <color=#F78C6C>8</color><color=#89DDFF>,</color> <color=#F78C6C>12</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#F78C6C>5</color><color=#89DDFF>,</color> <color=#F78C6C>2</color><color=#89DDFF>,</color> <color=#F78C6C>15</color><color=#89DDFF>,</color> <color=#F78C6C>13</color><color=#89DDFF>,</color> <color=#F78C6C>10</color><color=#89DDFF>,</color> <color=#F78C6C>14</color><color=#89DDFF>,</color> <color=#F78C6C>3</color><color=#89DDFF>,</color> <color=#F78C6C>6</color><color=#89DDFF>,</color> <color=#F78C6C>7</color><color=#89DDFF>,</color> <color=#F78C6C>1</color><color=#89DDFF>,</color> <color=#F78C6C>9</color><color=#89DDFF>,</color> <color=#F78C6C>4</color> <color=#89DDFF>},</color>
                    <color=#89DDFF>{</color> <color=#F78C6C>7</color><color=#89DDFF>,</color> <color=#F78C6C>9</color><color=#89DDFF>,</color> <color=#F78C6C>3</color><color=#89DDFF>,</color> <color=#F78C6C>1</color><color=#89DDFF>,</color> <color=#F78C6C>13</color><color=#89DDFF>,</color> <color=#F78C6C>12</color><color=#89DDFF>,</color> <color=#F78C6C>11</color><color=#89DDFF>,</color> <color=#F78C6C>14</color><color=#89DDFF>,</color> <color=#F78C6C>2</color><color=#89DDFF>,</color> <color=#F78C6C>6</color><color=#89DDFF>,</color> <color=#F78C6C>5</color><color=#89DDFF>,</color> <color=#F78C6C>10</color><color=#89DDFF>,</color> <color=#F78C6C>4</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#F78C6C>15</color><color=#89DDFF>,</color> <color=#F78C6C>8</color> <color=#89DDFF>},</color>
                    <color=#89DDFF>{</color> <color=#F78C6C>9</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#F78C6C>5</color><color=#89DDFF>,</color> <color=#F78C6C>7</color><color=#89DDFF>,</color> <color=#F78C6C>2</color><color=#89DDFF>,</color> <color=#F78C6C>4</color><color=#89DDFF>,</color> <color=#F78C6C>10</color><color=#89DDFF>,</color> <color=#F78C6C>15</color><color=#89DDFF>,</color> <color=#F78C6C>14</color><color=#89DDFF>,</color> <color=#F78C6C>1</color><color=#89DDFF>,</color> <color=#F78C6C>11</color><color=#89DDFF>,</color> <color=#F78C6C>12</color><color=#89DDFF>,</color> <color=#F78C6C>6</color><color=#89DDFF>,</color> <color=#F78C6C>8</color><color=#89DDFF>,</color> <color=#F78C6C>3</color><color=#89DDFF>,</color> <color=#F78C6C>13</color> <color=#89DDFF>},</color>
                    <color=#89DDFF>{</color> <color=#F78C6C>2</color><color=#89DDFF>,</color> <color=#F78C6C>12</color><color=#89DDFF>,</color> <color=#F78C6C>6</color><color=#89DDFF>,</color> <color=#F78C6C>10</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#F78C6C>11</color><color=#89DDFF>,</color> <color=#F78C6C>8</color><color=#89DDFF>,</color> <color=#F78C6C>3</color><color=#89DDFF>,</color> <color=#F78C6C>4</color><color=#89DDFF>,</color> <color=#F78C6C>13</color><color=#89DDFF>,</color> <color=#F78C6C>7</color><color=#89DDFF>,</color> <color=#F78C6C>5</color><color=#89DDFF>,</color> <color=#F78C6C>15</color><color=#89DDFF>,</color> <color=#F78C6C>14</color><color=#89DDFF>,</color> <color=#F78C6C>1</color><color=#89DDFF>,</color> <color=#F78C6C>9</color> <color=#89DDFF>},</color>
                    <color=#89DDFF>{</color> <color=#F78C6C>12</color><color=#89DDFF>,</color> <color=#F78C6C>5</color><color=#89DDFF>,</color> <color=#F78C6C>1</color><color=#89DDFF>,</color> <color=#F78C6C>15</color><color=#89DDFF>,</color> <color=#F78C6C>14</color><color=#89DDFF>,</color> <color=#F78C6C>13</color><color=#89DDFF>,</color> <color=#F78C6C>4</color><color=#89DDFF>,</color> <color=#F78C6C>10</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#F78C6C>7</color><color=#89DDFF>,</color> <color=#F78C6C>6</color><color=#89DDFF>,</color> <color=#F78C6C>3</color><color=#89DDFF>,</color> <color=#F78C6C>9</color><color=#89DDFF>,</color> <color=#F78C6C>2</color><color=#89DDFF>,</color> <color=#F78C6C>8</color><color=#89DDFF>,</color> <color=#F78C6C>11</color> <color=#89DDFF>},</color>
                    <color=#89DDFF>{</color> <color=#F78C6C>13</color><color=#89DDFF>,</color> <color=#F78C6C>11</color><color=#89DDFF>,</color> <color=#F78C6C>7</color><color=#89DDFF>,</color> <color=#F78C6C>14</color><color=#89DDFF>,</color> <color=#F78C6C>12</color><color=#89DDFF>,</color> <color=#F78C6C>1</color><color=#89DDFF>,</color> <color=#F78C6C>3</color><color=#89DDFF>,</color> <color=#F78C6C>9</color><color=#89DDFF>,</color> <color=#F78C6C>5</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#F78C6C>15</color><color=#89DDFF>,</color> <color=#F78C6C>4</color><color=#89DDFF>,</color> <color=#F78C6C>8</color><color=#89DDFF>,</color> <color=#F78C6C>6</color><color=#89DDFF>,</color> <color=#F78C6C>2</color><color=#89DDFF>,</color> <color=#F78C6C>10</color> <color=#89DDFF>},</color>
                    <color=#89DDFF>{</color> <color=#F78C6C>6</color><color=#89DDFF>,</color> <color=#F78C6C>15</color><color=#89DDFF>,</color> <color=#F78C6C>14</color><color=#89DDFF>,</color> <color=#F78C6C>9</color><color=#89DDFF>,</color> <color=#F78C6C>11</color><color=#89DDFF>,</color> <color=#F78C6C>3</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#F78C6C>8</color><color=#89DDFF>,</color> <color=#F78C6C>12</color><color=#89DDFF>,</color> <color=#F78C6C>2</color><color=#89DDFF>,</color> <color=#F78C6C>13</color><color=#89DDFF>,</color> <color=#F78C6C>7</color><color=#89DDFF>,</color> <color=#F78C6C>1</color><color=#89DDFF>,</color> <color=#F78C6C>4</color><color=#89DDFF>,</color> <color=#F78C6C>10</color><color=#89DDFF>,</color> <color=#F78C6C>5</color> <color=#89DDFF>},</color>
                    <color=#89DDFF>{</color> <color=#F78C6C>10</color><color=#89DDFF>,</color> <color=#F78C6C>2</color><color=#89DDFF>,</color> <color=#F78C6C>8</color><color=#89DDFF>,</color> <color=#F78C6C>4</color><color=#89DDFF>,</color> <color=#F78C6C>7</color><color=#89DDFF>,</color> <color=#F78C6C>6</color><color=#89DDFF>,</color> <color=#F78C6C>1</color><color=#89DDFF>,</color> <color=#F78C6C>5</color><color=#89DDFF>,</color> <color=#F78C6C>15</color><color=#89DDFF>,</color> <color=#F78C6C>11</color><color=#89DDFF>,</color> <color=#F78C6C>9</color><color=#89DDFF>,</color> <color=#F78C6C>14</color><color=#89DDFF>,</color> <color=#F78C6C>3</color><color=#89DDFF>,</color> <color=#F78C6C>12</color><color=#89DDFF>,</color> <color=#F78C6C>13</color><color=#89DDFF>,</color> <color=#F78C6C>0</color> <color=#89DDFF>},</color>
                    <color=#89DDFF>{</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#F78C6C>1</color><color=#89DDFF>,</color> <color=#F78C6C>2</color><color=#89DDFF>,</color> <color=#F78C6C>3</color><color=#89DDFF>,</color> <color=#F78C6C>4</color><color=#89DDFF>,</color> <color=#F78C6C>5</color><color=#89DDFF>,</color> <color=#F78C6C>6</color><color=#89DDFF>,</color> <color=#F78C6C>7</color><color=#89DDFF>,</color> <color=#F78C6C>8</color><color=#89DDFF>,</color> <color=#F78C6C>9</color><color=#89DDFF>,</color> <color=#F78C6C>10</color><color=#89DDFF>,</color> <color=#F78C6C>11</color><color=#89DDFF>,</color> <color=#F78C6C>12</color><color=#89DDFF>,</color> <color=#F78C6C>13</color><color=#89DDFF>,</color> <color=#F78C6C>14</color><color=#89DDFF>,</color> <color=#F78C6C>15</color> <color=#89DDFF>},</color>
                    <color=#89DDFF>{</color> <color=#F78C6C>14</color><color=#89DDFF>,</color> <color=#F78C6C>10</color><color=#89DDFF>,</color> <color=#F78C6C>4</color><color=#89DDFF>,</color> <color=#F78C6C>8</color><color=#89DDFF>,</color> <color=#F78C6C>9</color><color=#89DDFF>,</color> <color=#F78C6C>15</color><color=#89DDFF>,</color> <color=#F78C6C>13</color><color=#89DDFF>,</color> <color=#F78C6C>6</color><color=#89DDFF>,</color> <color=#F78C6C>1</color><color=#89DDFF>,</color> <color=#F78C6C>12</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#F78C6C>2</color><color=#89DDFF>,</color> <color=#F78C6C>11</color><color=#89DDFF>,</color> <color=#F78C6C>7</color><color=#89DDFF>,</color> <color=#F78C6C>5</color><color=#89DDFF>,</color> <color=#F78C6C>3</color> <color=#89DDFF>}</color>
            <color=#89DDFF>};</color>

    <color=#BB80B3>private</color> <color=#BB80B3>int</color> <color=#EEFFFF>rOUNDS</color> <color=#89DDFF>=</color> <color=#F78C6C>12</color><color=#89DDFF>;</color> <color=#546E7A>// to use for Catenas H'</color>
    <color=#BB80B3>private</color> <color=#BB80B3>final</color> <color=#BB80B3>static</color> <color=#BB80B3>int</color> <color=#EEFFFF>BLOCK_LENGTH_BYTES</color> <color=#89DDFF>=</color> <color=#F78C6C>128</color><color=#89DDFF>;</color><color=#546E7A>// bytes</color>

    <color=#546E7A>// General parameters:</color>
    <color=#BB80B3>private</color> <color=#BB80B3>int</color> <color=#EEFFFF>digestLength</color> <color=#89DDFF>=</color> <color=#F78C6C>64</color><color=#89DDFF>;</color> <color=#546E7A>// 1- 64 bytes</color>
    <color=#BB80B3>private</color> <color=#BB80B3>int</color> <color=#EEFFFF>keyLength</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#546E7A>// 0 - 64 bytes for keyed hashing for MAC</color>
    <color=#BB80B3>private</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>salt</color> <color=#89DDFF>=</color> <color=#89DDFF>null</color><color=#89DDFF>;</color><color=#546E7A>// new byte[16];</color>
    <color=#BB80B3>private</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>personalization</color> <color=#89DDFF>=</color> <color=#89DDFF>null</color><color=#89DDFF>;</color><color=#546E7A>// new byte[16];</color>
    <color=#BB80B3>public</color> <color=#BB80B3>int</color> <color=#EEFFFF>_vIndex</color><color=#89DDFF>;</color>

    <color=#546E7A>// Tree hashing parameters:</color>
    <color=#546E7A>// Because this class does not implement the Tree Hashing Mode,</color>
    <color=#546E7A>// these parameters can be treated as constants (see init() function)</color>
    <color=#546E7A>/*</color>
<color=#546E7A>     * private int fanout = 1; // 0-255</color>
<color=#546E7A>     * private int depth = 1; // 1 - 255</color>
<color=#546E7A>     * private int leafLength= 0;</color>
<color=#546E7A>     * private long nodeOffset = 0L;</color>
<color=#546E7A>     * private int nodeDepth = 0;</color>
<color=#546E7A>     * private int innerHashLength = 0;</color>
<color=#546E7A>     */</color>

    <color=#546E7A>// whenever this buffer overflows, it will be processed</color>
    <color=#546E7A>// in the compress() function.</color>
    <color=#546E7A>// For performance issues, long messages will not use this buffer.</color>
    <color=#BB80B3>private</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>buffer</color> <color=#89DDFF>=</color> <color=#89DDFF>null</color><color=#89DDFF>;</color><color=#546E7A>// new byte[BLOCK_LENGTH_BYTES];</color>
    <color=#546E7A>// Position of last inserted byte:</color>
    <color=#BB80B3>private</color> <color=#BB80B3>int</color> <color=#EEFFFF>bufferPos</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color><color=#546E7A>// a value from 0 up to 128</color>

    <color=#BB80B3>private</color> <color=#BB80B3>long</color><color=#89DDFF>[]</color> <color=#EEFFFF>internalState</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>long</color><color=#89DDFF>[</color><color=#F78C6C>16</color><color=#89DDFF>];</color> <color=#546E7A>// In the Blake2b paper it is called: v</color>
    <color=#BB80B3>private</color> <color=#BB80B3>long</color><color=#89DDFF>[]</color> <color=#EEFFFF>chainValue</color> <color=#89DDFF>=</color> <color=#89DDFF>null</color><color=#89DDFF>;</color> <color=#546E7A>// state vector, in the Blake2b paper it is called: h</color>

    <color=#BB80B3>private</color> <color=#BB80B3>long</color> <color=#EEFFFF>t0</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#EEFFFF>L</color><color=#89DDFF>;</color> <color=#546E7A>// holds last significant bits, counter (counts bytes)</color>
    <color=#BB80B3>private</color> <color=#BB80B3>long</color> <color=#EEFFFF>t1</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#EEFFFF>L</color><color=#89DDFF>;</color> <color=#546E7A>// counter: Length up to 2^128 are supported</color>
    <color=#BB80B3>private</color> <color=#BB80B3>long</color> <color=#EEFFFF>f0</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#EEFFFF>L</color><color=#89DDFF>;</color> <color=#546E7A>// finalization flag, for last block: ~0L</color>

    <color=#546E7A>// For Tree Hashing Mode, not used here:</color>
    <color=#546E7A>// private long f1 = 0L; // finalization flag, for last node: ~0L</color>

    <color=#BB80B3>public</color> <color=#82AAFF>Blake2b</color><color=#89DDFF>()</color> <color=#89DDFF>{</color>
        <color=#EEFFFF>buffer</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#EEFFFF>BLOCK_LENGTH_BYTES</color><color=#89DDFF>];</color>
        <color=#EEFFFF>keyLength</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color>
        <color=#EEFFFF>digestLength</color> <color=#89DDFF>=</color> <color=#F78C6C>64</color><color=#89DDFF>;</color>
        <color=#EEFFFF>init</color><color=#89DDFF>();</color>
    <color=#89DDFF>}</color>

    <color=#BB80B3>public</color> <color=#82AAFF>Blake2b</color><color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>key</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
        <color=#EEFFFF>buffer</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#EEFFFF>BLOCK_LENGTH_BYTES</color><color=#89DDFF>];</color>
        <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#EEFFFF>key</color> <color=#89DDFF>!=</color> <color=#89DDFF>null</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
            <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#EEFFFF>key</color><color=#89DDFF>.</color><color=#BB80B3>length</color> <color=#89DDFF>></color> <color=#F78C6C>64</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
                <color=#BB80B3>throw</color> <color=#BB80B3>new</color> <color=#EEFFFF>IllegalArgumentException</color><color=#89DDFF>(</color><color=#C3E88D>"Keys > 64 are not supported"</color><color=#89DDFF>);</color>
            <color=#89DDFF>}</color>
            <color=#EEFFFF>keyLength</color> <color=#89DDFF>=</color> <color=#EEFFFF>key</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>;</color>
            <color=#EEFFFF>System</color><color=#89DDFF>.</color><color=#BB80B3>arraycopy</color><color=#89DDFF>(</color><color=#EEFFFF>key</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>buffer</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>key</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>);</color>
            <color=#EEFFFF>bufferPos</color> <color=#89DDFF>=</color> <color=#EEFFFF>BLOCK_LENGTH_BYTES</color><color=#89DDFF>;</color> <color=#546E7A>// zero padding</color>
        <color=#89DDFF>}</color>
        <color=#EEFFFF>digestLength</color> <color=#89DDFF>=</color> <color=#F78C6C>64</color><color=#89DDFF>;</color>
        <color=#EEFFFF>init</color><color=#89DDFF>();</color>
    <color=#89DDFF>}</color>

    <color=#BB80B3>public</color> <color=#82AAFF>Blake2b</color><color=#89DDFF>(</color>
            <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>key</color><color=#89DDFF>,</color>
            <color=#BB80B3>int</color> <color=#EEFFFF>_digestLength</color><color=#89DDFF>,</color>
            <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>_salt</color><color=#89DDFF>,</color>
            <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>_personalization</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>

        <color=#EEFFFF>buffer</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#EEFFFF>BLOCK_LENGTH_BYTES</color><color=#89DDFF>];</color>
        <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#EEFFFF>_digestLength</color> <color=#89DDFF><</color> <color=#F78C6C>1</color> <color=#89DDFF>||</color> <color=#EEFFFF>digestLength</color> <color=#89DDFF>></color> <color=#F78C6C>64</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
            <color=#BB80B3>throw</color> <color=#BB80B3>new</color> <color=#EEFFFF>IllegalArgumentException</color><color=#89DDFF>(</color><color=#C3E88D>"Invalid digest length (required: 1 - 64)"</color><color=#89DDFF>);</color>
        <color=#89DDFF>}</color>
        <color=#EEFFFF>digestLength</color> <color=#89DDFF>=</color> <color=#EEFFFF>_digestLength</color><color=#89DDFF>;</color>
        <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#EEFFFF>_salt</color> <color=#89DDFF>!=</color> <color=#89DDFF>null</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
            <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#EEFFFF>_salt</color><color=#89DDFF>.</color><color=#BB80B3>length</color> <color=#89DDFF>!=</color> <color=#F78C6C>16</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
                <color=#BB80B3>throw</color> <color=#BB80B3>new</color> <color=#EEFFFF>IllegalArgumentException</color><color=#89DDFF>(</color><color=#C3E88D>"salt length must be exactly 16 bytes"</color><color=#89DDFF>);</color>
            <color=#89DDFF>}</color>
            <color=#EEFFFF>salt</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#F78C6C>16</color><color=#89DDFF>];</color>
            <color=#EEFFFF>System</color><color=#89DDFF>.</color><color=#BB80B3>arraycopy</color><color=#89DDFF>(</color><color=#EEFFFF>_salt</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>salt</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>_salt</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>);</color>
        <color=#89DDFF>}</color>
        <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#EEFFFF>_personalization</color> <color=#89DDFF>!=</color> <color=#89DDFF>null</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
            <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#EEFFFF>_personalization</color><color=#89DDFF>.</color><color=#BB80B3>length</color> <color=#89DDFF>!=</color> <color=#F78C6C>16</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
                <color=#BB80B3>throw</color> <color=#BB80B3>new</color> <color=#EEFFFF>IllegalArgumentException</color><color=#89DDFF>(</color><color=#C3E88D>"personalization length must be exactly 16 bytes"</color><color=#89DDFF>);</color>
            <color=#89DDFF>}</color>
            <color=#EEFFFF>personalization</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#F78C6C>16</color><color=#89DDFF>];</color>
            <color=#EEFFFF>System</color><color=#89DDFF>.</color><color=#BB80B3>arraycopy</color><color=#89DDFF>(</color><color=#EEFFFF>_personalization</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>personalization</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>_personalization</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>);</color>
        <color=#89DDFF>}</color>
        <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#EEFFFF>key</color> <color=#89DDFF>!=</color> <color=#89DDFF>null</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
            <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#EEFFFF>key</color><color=#89DDFF>.</color><color=#BB80B3>length</color> <color=#89DDFF>></color> <color=#F78C6C>64</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
                <color=#BB80B3>throw</color> <color=#BB80B3>new</color> <color=#EEFFFF>IllegalArgumentException</color><color=#89DDFF>(</color><color=#C3E88D>"Keys > 64 are not supported"</color><color=#89DDFF>);</color>
            <color=#89DDFF>}</color>
            <color=#EEFFFF>keyLength</color> <color=#89DDFF>=</color> <color=#EEFFFF>key</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>;</color>
            <color=#EEFFFF>System</color><color=#89DDFF>.</color><color=#BB80B3>arraycopy</color><color=#89DDFF>(</color><color=#EEFFFF>key</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>buffer</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>key</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>);</color>
            <color=#EEFFFF>bufferPos</color> <color=#89DDFF>=</color> <color=#EEFFFF>BLOCK_LENGTH_BYTES</color><color=#89DDFF>;</color> <color=#546E7A>// zero padding</color>
        <color=#89DDFF>}</color>
        <color=#EEFFFF>init</color><color=#89DDFF>();</color>
    <color=#89DDFF>}</color>

    <color=#546E7A>// initialize chainValue</color>
    <color=#BB80B3>private</color> <color=#BB80B3>void</color> <color=#82AAFF>init</color><color=#89DDFF>()</color> <color=#89DDFF>{</color>

        <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#EEFFFF>chainValue</color> <color=#89DDFF>==</color> <color=#89DDFF>null</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>chainValue</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>long</color><color=#89DDFF>[</color><color=#F78C6C>8</color><color=#89DDFF>];</color>

            <color=#EEFFFF>chainValue</color><color=#89DDFF>[</color><color=#F78C6C>0</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>blake2b_IV</color><color=#89DDFF>[</color><color=#F78C6C>0</color><color=#89DDFF>]</color> <color=#89DDFF>^</color> <color=#89DDFF>(</color><color=#EEFFFF>digestLength</color> <color=#89DDFF>|</color> <color=#89DDFF>(</color><color=#EEFFFF>keyLength</color> <color=#89DDFF><<</color> <color=#F78C6C>8</color><color=#89DDFF>)</color> <color=#89DDFF>|</color> <color=#F78C6C>0x1010000</color><color=#89DDFF>);</color>
            <color=#546E7A>// 0x1010000 = ((fanout << 16) | (depth << 24) | (leafLength << 32));</color>
            <color=#546E7A>// with fanout = 1; depth = 0; leafLength = 0;</color>
            <color=#EEFFFF>chainValue</color><color=#89DDFF>[</color><color=#F78C6C>1</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>blake2b_IV</color><color=#89DDFF>[</color><color=#F78C6C>1</color><color=#89DDFF>];</color><color=#546E7A>// ^ nodeOffset; with nodeOffset = 0;</color>
            <color=#EEFFFF>chainValue</color><color=#89DDFF>[</color><color=#F78C6C>2</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>blake2b_IV</color><color=#89DDFF>[</color><color=#F78C6C>2</color><color=#89DDFF>];</color><color=#546E7A>// ^ ( nodeDepth | (innerHashLength << 8) );</color>
            <color=#546E7A>// with nodeDepth = 0; innerHashLength = 0;</color>

            <color=#EEFFFF>chainValue</color><color=#89DDFF>[</color><color=#F78C6C>3</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>blake2b_IV</color><color=#89DDFF>[</color><color=#F78C6C>3</color><color=#89DDFF>];</color>

            <color=#EEFFFF>chainValue</color><color=#89DDFF>[</color><color=#F78C6C>4</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>blake2b_IV</color><color=#89DDFF>[</color><color=#F78C6C>4</color><color=#89DDFF>];</color>
            <color=#EEFFFF>chainValue</color><color=#89DDFF>[</color><color=#F78C6C>5</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>blake2b_IV</color><color=#89DDFF>[</color><color=#F78C6C>5</color><color=#89DDFF>];</color>
            <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#EEFFFF>salt</color> <color=#89DDFF>!=</color> <color=#89DDFF>null</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
                <color=#EEFFFF>chainValue</color><color=#89DDFF>[</color><color=#F78C6C>4</color><color=#89DDFF>]</color> <color=#89DDFF>^=</color> <color=#89DDFF>(</color><color=#EEFFFF>bytes2long</color><color=#89DDFF>(</color><color=#EEFFFF>salt</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>));</color>
                <color=#EEFFFF>chainValue</color><color=#89DDFF>[</color><color=#F78C6C>5</color><color=#89DDFF>]</color> <color=#89DDFF>^=</color> <color=#89DDFF>(</color><color=#EEFFFF>bytes2long</color><color=#89DDFF>(</color><color=#EEFFFF>salt</color><color=#89DDFF>,</color> <color=#F78C6C>8</color><color=#89DDFF>));</color>
            <color=#89DDFF>}</color>

            <color=#EEFFFF>chainValue</color><color=#89DDFF>[</color><color=#F78C6C>6</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>blake2b_IV</color><color=#89DDFF>[</color><color=#F78C6C>6</color><color=#89DDFF>];</color>
            <color=#EEFFFF>chainValue</color><color=#89DDFF>[</color><color=#F78C6C>7</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>blake2b_IV</color><color=#89DDFF>[</color><color=#F78C6C>7</color><color=#89DDFF>];</color>
            <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#EEFFFF>personalization</color> <color=#89DDFF>!=</color> <color=#89DDFF>null</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
                <color=#EEFFFF>chainValue</color><color=#89DDFF>[</color><color=#F78C6C>6</color><color=#89DDFF>]</color> <color=#89DDFF>^=</color> <color=#89DDFF>(</color><color=#EEFFFF>bytes2long</color><color=#89DDFF>(</color><color=#EEFFFF>personalization</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>));</color>
                <color=#EEFFFF>chainValue</color><color=#89DDFF>[</color><color=#F78C6C>7</color><color=#89DDFF>]</color> <color=#89DDFF>^=</color> <color=#89DDFF>(</color><color=#EEFFFF>bytes2long</color><color=#89DDFF>(</color><color=#EEFFFF>personalization</color><color=#89DDFF>,</color> <color=#F78C6C>8</color><color=#89DDFF>));</color>
            <color=#89DDFF>}</color>
        <color=#89DDFF>}</color>
    <color=#89DDFF>}</color>

    <color=#BB80B3>private</color> <color=#BB80B3>void</color> <color=#82AAFF>initializeInternalState</color><color=#89DDFF>()</color> <color=#89DDFF>{</color>

        <color=#546E7A>// initialize v:</color>
        <color=#EEFFFF>System</color><color=#89DDFF>.</color><color=#BB80B3>arraycopy</color><color=#89DDFF>(</color><color=#EEFFFF>chainValue</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>internalState</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>chainValue</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>);</color>
        <color=#EEFFFF>System</color><color=#89DDFF>.</color><color=#BB80B3>arraycopy</color><color=#89DDFF>(</color><color=#EEFFFF>blake2b_IV</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>internalState</color><color=#89DDFF>,</color> <color=#EEFFFF>chainValue</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>,</color> <color=#F78C6C>4</color><color=#89DDFF>);</color>
        <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#F78C6C>12</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>t0</color> <color=#89DDFF>^</color> <color=#EEFFFF>blake2b_IV</color><color=#89DDFF>[</color><color=#F78C6C>4</color><color=#89DDFF>];</color>
        <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#F78C6C>13</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>t1</color> <color=#89DDFF>^</color> <color=#EEFFFF>blake2b_IV</color><color=#89DDFF>[</color><color=#F78C6C>5</color><color=#89DDFF>];</color>
        <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#F78C6C>14</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>f0</color> <color=#89DDFF>^</color> <color=#EEFFFF>blake2b_IV</color><color=#89DDFF>[</color><color=#F78C6C>6</color><color=#89DDFF>];</color>
        <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#F78C6C>15</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>blake2b_IV</color><color=#89DDFF>[</color><color=#F78C6C>7</color><color=#89DDFF>];</color><color=#546E7A>// ^ f1 with f1 = 0</color>
    <color=#89DDFF>}</color>

    <color=#546E7A>/**</color>
<color=#546E7A>     * Processes the given message</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param message</color>
<color=#546E7A>     *                byte array containing the message to be processed</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>update</color><color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>message</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
        <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#EEFFFF>message</color> <color=#89DDFF>==</color> <color=#89DDFF>null</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
            <color=#BB80B3>return</color><color=#89DDFF>;</color>
        <color=#89DDFF>}</color>
        <color=#EEFFFF>update</color><color=#89DDFF>(</color><color=#EEFFFF>message</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>message</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>);</color>
    <color=#89DDFF>}</color>

    <color=#546E7A>/**</color>
<color=#546E7A>     * Processes one single byte</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param b</color>
<color=#546E7A>     *          single byte to be processed</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>update</color><color=#89DDFF>(</color><color=#BB80B3>byte</color> <color=#EEFFFF>b</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>

        <color=#BB80B3>int</color> <color=#EEFFFF>remainingLength</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#546E7A>// left bytes of buffer</color>

        <color=#546E7A>// process the buffer if full else add to buffer:</color>
        <color=#EEFFFF>remainingLength</color> <color=#89DDFF>=</color> <color=#EEFFFF>BLOCK_LENGTH_BYTES</color> <color=#89DDFF>-</color> <color=#EEFFFF>bufferPos</color><color=#89DDFF>;</color>
        <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#EEFFFF>remainingLength</color> <color=#89DDFF>==</color> <color=#F78C6C>0</color><color=#89DDFF>)</color> <color=#89DDFF>{</color> <color=#546E7A>// full buffer</color>
            <color=#EEFFFF>t0</color> <color=#89DDFF>+=</color> <color=#EEFFFF>BLOCK_LENGTH_BYTES</color><color=#89DDFF>;</color>
            <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#EEFFFF>t0</color> <color=#89DDFF>==</color> <color=#F78C6C>0</color><color=#89DDFF>)</color> <color=#89DDFF>{</color> <color=#546E7A>// if message > 2^64</color>
                <color=#EEFFFF>t1</color><color=#89DDFF>++;</color>
            <color=#89DDFF>}</color>
            <color=#EEFFFF>compress</color><color=#89DDFF>(</color><color=#EEFFFF>buffer</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>);</color>

            <color=#EEFFFF>Arrays</color><color=#89DDFF>.</color><color=#BB80B3>fill</color><color=#89DDFF>(</color><color=#EEFFFF>buffer</color><color=#89DDFF>,</color> <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#F78C6C>0</color><color=#89DDFF>);</color><color=#546E7A>// clear buffer</color>
            <color=#EEFFFF>buffer</color><color=#89DDFF>[</color><color=#F78C6C>0</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>b</color><color=#89DDFF>;</color>
            <color=#EEFFFF>bufferPos</color> <color=#89DDFF>=</color> <color=#F78C6C>1</color><color=#89DDFF>;</color>
        <color=#89DDFF>}</color> <color=#BB80B3>else</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>buffer</color><color=#89DDFF>[</color><color=#EEFFFF>bufferPos</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>b</color><color=#89DDFF>;</color>
            <color=#EEFFFF>bufferPos</color><color=#89DDFF>++;</color>
            <color=#BB80B3>return</color><color=#89DDFF>;</color>
        <color=#89DDFF>}</color>
    <color=#89DDFF>}</color>

    <color=#546E7A>/**</color>
<color=#546E7A>     * Processes a number of bytes of the given message</color>
<color=#546E7A>     * from a start position up to offset+len</color>
<color=#546E7A>     * </color>
<color=#546E7A>     * @param message</color>
<color=#546E7A>     *                byte array containing the message to be processed</color>
<color=#546E7A>     * @param offset</color>
<color=#546E7A>     *                position of message to start from</color>
<color=#546E7A>     * @param len</color>
<color=#546E7A>     *                number of bytes to be processed.</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>update</color><color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>message</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>offset</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>len</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>

        <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#EEFFFF>message</color> <color=#89DDFF>==</color> <color=#89DDFF>null</color> <color=#89DDFF>||</color> <color=#EEFFFF>len</color> <color=#89DDFF>==</color> <color=#F78C6C>0</color><color=#89DDFF>)</color>
            <color=#BB80B3>return</color><color=#89DDFF>;</color>

        <color=#BB80B3>int</color> <color=#EEFFFF>remainingLength</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#546E7A>// left bytes of buffer</color>

        <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#EEFFFF>bufferPos</color> <color=#89DDFF>!=</color> <color=#F78C6C>0</color><color=#89DDFF>)</color> <color=#89DDFF>{</color> <color=#546E7A>// commenced, incomplete buffer</color>

            <color=#546E7A>// complete the buffer:</color>
            <color=#EEFFFF>remainingLength</color> <color=#89DDFF>=</color> <color=#EEFFFF>BLOCK_LENGTH_BYTES</color> <color=#89DDFF>-</color> <color=#EEFFFF>bufferPos</color><color=#89DDFF>;</color>
            <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#EEFFFF>remainingLength</color> <color=#89DDFF><</color> <color=#EEFFFF>len</color><color=#89DDFF>)</color> <color=#89DDFF>{</color> <color=#546E7A>// full buffer + at least 1 byte</color>
                <color=#EEFFFF>System</color><color=#89DDFF>.</color><color=#BB80B3>arraycopy</color><color=#89DDFF>(</color><color=#EEFFFF>message</color><color=#89DDFF>,</color> <color=#EEFFFF>offset</color><color=#89DDFF>,</color> <color=#EEFFFF>buffer</color><color=#89DDFF>,</color> <color=#EEFFFF>bufferPos</color><color=#89DDFF>,</color>
                        <color=#EEFFFF>remainingLength</color><color=#89DDFF>);</color>
                <color=#EEFFFF>t0</color> <color=#89DDFF>+=</color> <color=#EEFFFF>BLOCK_LENGTH_BYTES</color><color=#89DDFF>;</color>
                <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#EEFFFF>t0</color> <color=#89DDFF>==</color> <color=#F78C6C>0</color><color=#89DDFF>)</color> <color=#89DDFF>{</color> <color=#546E7A>// if message > 2^64</color>
                    <color=#EEFFFF>t1</color><color=#89DDFF>++;</color>
                <color=#89DDFF>}</color>
                <color=#EEFFFF>compress</color><color=#89DDFF>(</color><color=#EEFFFF>buffer</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>);</color>

                <color=#EEFFFF>bufferPos</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color>
                <color=#EEFFFF>Arrays</color><color=#89DDFF>.</color><color=#BB80B3>fill</color><color=#89DDFF>(</color><color=#EEFFFF>buffer</color><color=#89DDFF>,</color> <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#F78C6C>0</color><color=#89DDFF>);</color><color=#546E7A>// clear buffer</color>

            <color=#89DDFF>}</color> <color=#BB80B3>else</color> <color=#89DDFF>{</color>
                <color=#EEFFFF>System</color><color=#89DDFF>.</color><color=#BB80B3>arraycopy</color><color=#89DDFF>(</color><color=#EEFFFF>message</color><color=#89DDFF>,</color> <color=#EEFFFF>offset</color><color=#89DDFF>,</color> <color=#EEFFFF>buffer</color><color=#89DDFF>,</color> <color=#EEFFFF>bufferPos</color><color=#89DDFF>,</color>
                        <color=#EEFFFF>len</color><color=#89DDFF>);</color>
                <color=#EEFFFF>bufferPos</color> <color=#89DDFF>+=</color> <color=#EEFFFF>len</color><color=#89DDFF>;</color>
                <color=#BB80B3>return</color><color=#89DDFF>;</color>
            <color=#89DDFF>}</color>
        <color=#89DDFF>}</color>
        <color=#546E7A>// process blocks except last block (also if last block is full)</color>
        <color=#BB80B3>int</color> <color=#EEFFFF>messagePos</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color>
        <color=#BB80B3>int</color> <color=#EEFFFF>blockWiseLastPos</color> <color=#89DDFF>=</color> <color=#EEFFFF>offset</color> <color=#89DDFF>+</color> <color=#EEFFFF>len</color> <color=#89DDFF>-</color> <color=#EEFFFF>BLOCK_LENGTH_BYTES</color><color=#89DDFF>;</color>

        <color=#BB80B3>for</color> <color=#89DDFF>(</color><color=#EEFFFF>messagePos</color> <color=#89DDFF>=</color> <color=#EEFFFF>offset</color> <color=#89DDFF>+</color> <color=#EEFFFF>remainingLength</color><color=#89DDFF>;</color> <color=#EEFFFF>messagePos</color> <color=#89DDFF><</color> <color=#EEFFFF>blockWiseLastPos</color><color=#89DDFF>;</color> <color=#EEFFFF>messagePos</color> <color=#89DDFF>+=</color> <color=#EEFFFF>BLOCK_LENGTH_BYTES</color><color=#89DDFF>)</color> <color=#89DDFF>{</color> <color=#546E7A>// block</color>
                                                                                                                       <color=#546E7A>// wise</color>
                                                                                                                       <color=#546E7A>// 128</color>
                                                                                                                       <color=#546E7A>// bytes</color>
            <color=#546E7A>// without buffer:</color>
            <color=#EEFFFF>t0</color> <color=#89DDFF>+=</color> <color=#EEFFFF>BLOCK_LENGTH_BYTES</color><color=#89DDFF>;</color>
            <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#EEFFFF>t0</color> <color=#89DDFF>==</color> <color=#F78C6C>0</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
                <color=#EEFFFF>t1</color><color=#89DDFF>++;</color>
            <color=#89DDFF>}</color>
            <color=#EEFFFF>compress</color><color=#89DDFF>(</color><color=#EEFFFF>message</color><color=#89DDFF>,</color> <color=#EEFFFF>messagePos</color><color=#89DDFF>);</color>
        <color=#89DDFF>}</color>

        <color=#546E7A>// fill the buffer with left bytes, this might be a full block</color>
        <color=#EEFFFF>System</color><color=#89DDFF>.</color><color=#BB80B3>arraycopy</color><color=#89DDFF>(</color><color=#EEFFFF>message</color><color=#89DDFF>,</color> <color=#EEFFFF>messagePos</color><color=#89DDFF>,</color> <color=#EEFFFF>buffer</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>offset</color> <color=#89DDFF>+</color> <color=#EEFFFF>len</color> <color=#89DDFF>-</color> <color=#EEFFFF>messagePos</color><color=#89DDFF>);</color>
        <color=#EEFFFF>bufferPos</color> <color=#89DDFF>+=</color> <color=#EEFFFF>offset</color> <color=#89DDFF>+</color> <color=#EEFFFF>len</color> <color=#89DDFF>-</color> <color=#EEFFFF>messagePos</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>

    <color=#546E7A>/**</color>
<color=#546E7A>     * Calculates the final digest value</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#82AAFF>doFinal</color><color=#89DDFF>()</color> <color=#89DDFF>{</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>out</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#EEFFFF>digestLength</color><color=#89DDFF>];</color>
        <color=#EEFFFF>f0</color> <color=#89DDFF>=</color> <color=#F78C6C>0xFFFFFFFFFFFFFFFFL</color><color=#89DDFF>;</color>
        <color=#EEFFFF>t0</color> <color=#89DDFF>+=</color> <color=#EEFFFF>bufferPos</color><color=#89DDFF>;</color>
        <color=#546E7A>// bufferPos may be < 128, so (t0 == 0) does not work</color>
        <color=#546E7A>// for 2^64 < message length > 2^64 - 127</color>
        <color=#BB80B3>if</color> <color=#89DDFF>((</color><color=#EEFFFF>t0</color> <color=#89DDFF><</color> <color=#F78C6C>0</color><color=#89DDFF>)</color> <color=#89DDFF>&&</color> <color=#89DDFF>(</color><color=#EEFFFF>bufferPos</color> <color=#89DDFF>></color> <color=#89DDFF>-</color><color=#EEFFFF>t0</color><color=#89DDFF>))</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>t1</color><color=#89DDFF>++;</color>
        <color=#89DDFF>}</color>
        <color=#EEFFFF>compress</color><color=#89DDFF>(</color><color=#EEFFFF>buffer</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#89DDFF>);</color>
        <color=#EEFFFF>bufferPos</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color>

        <color=#BB80B3>for</color> <color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>i</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#EEFFFF>i</color> <color=#89DDFF><</color> <color=#EEFFFF>chainValue</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>;</color> <color=#EEFFFF>i</color><color=#89DDFF>++)</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>System</color><color=#89DDFF>.</color><color=#BB80B3>arraycopy</color><color=#89DDFF>(</color><color=#EEFFFF>long2bytes</color><color=#89DDFF>(</color><color=#EEFFFF>chainValue</color><color=#89DDFF>[</color><color=#EEFFFF>i</color><color=#89DDFF>]),</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#EEFFFF>out</color><color=#89DDFF>,</color> <color=#EEFFFF>i</color> <color=#89DDFF>*</color> <color=#F78C6C>8</color><color=#89DDFF>,</color> <color=#F78C6C>8</color><color=#89DDFF>);</color>
        <color=#89DDFF>}</color>
        <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#EEFFFF>keyLength</color> <color=#89DDFF>==</color> <color=#F78C6C>0</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>reset</color><color=#89DDFF>();</color>
        <color=#89DDFF>}</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>out</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>

    <color=#546E7A>/**</color>
<color=#546E7A>     * Reset the hash function to use again after doFinal().</color>
<color=#546E7A>     * This will not work for keyed digests.</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>reset</color><color=#89DDFF>()</color> <color=#89DDFF>{</color>
        <color=#EEFFFF>bufferPos</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color>
        <color=#EEFFFF>f0</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#EEFFFF>L</color><color=#89DDFF>;</color>
        <color=#EEFFFF>t0</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#EEFFFF>L</color><color=#89DDFF>;</color>
        <color=#EEFFFF>t1</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#EEFFFF>L</color><color=#89DDFF>;</color>
        <color=#EEFFFF>Arrays</color><color=#89DDFF>.</color><color=#BB80B3>fill</color><color=#89DDFF>(</color><color=#EEFFFF>buffer</color><color=#89DDFF>,</color> <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#F78C6C>0</color><color=#89DDFF>);</color><color=#546E7A>// Holds eventually the key if input is null</color>
        <color=#EEFFFF>Arrays</color><color=#89DDFF>.</color><color=#BB80B3>fill</color><color=#89DDFF>(</color><color=#EEFFFF>chainValue</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#EEFFFF>L</color><color=#89DDFF>);</color>
        <color=#EEFFFF>Arrays</color><color=#89DDFF>.</color><color=#BB80B3>fill</color><color=#89DDFF>(</color><color=#EEFFFF>internalState</color><color=#89DDFF>,</color> <color=#F78C6C>0</color><color=#EEFFFF>L</color><color=#89DDFF>);</color>
        <color=#EEFFFF>chainValue</color> <color=#89DDFF>=</color> <color=#89DDFF>null</color><color=#89DDFF>;</color>
        <color=#BB80B3>if</color> <color=#89DDFF>(</color><color=#EEFFFF>keyLength</color> <color=#89DDFF>></color> <color=#F78C6C>0</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
            <color=#BB80B3>throw</color> <color=#BB80B3>new</color> <color=#EEFFFF>IllegalStateException</color><color=#89DDFF>(</color><color=#C3E88D>"Can not reset keyed Digest"</color><color=#89DDFF>);</color>
        <color=#89DDFF>}</color>
        <color=#EEFFFF>init</color><color=#89DDFF>();</color>
    <color=#89DDFF>}</color>

    <color=#BB80B3>private</color> <color=#BB80B3>void</color> <color=#82AAFF>compress</color><color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>message</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>messagePos</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>

        <color=#EEFFFF>initializeInternalState</color><color=#89DDFF>();</color>

        <color=#BB80B3>long</color><color=#89DDFF>[]</color> <color=#EEFFFF>m</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>long</color><color=#89DDFF>[</color><color=#F78C6C>16</color><color=#89DDFF>];</color>
        <color=#BB80B3>for</color> <color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>j</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#EEFFFF>j</color> <color=#89DDFF><</color> <color=#F78C6C>16</color><color=#89DDFF>;</color> <color=#EEFFFF>j</color><color=#89DDFF>++)</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>j</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>bytes2long</color><color=#89DDFF>(</color><color=#EEFFFF>message</color><color=#89DDFF>,</color> <color=#EEFFFF>messagePos</color> <color=#89DDFF>+</color> <color=#EEFFFF>j</color> <color=#89DDFF>*</color> <color=#F78C6C>8</color><color=#89DDFF>);</color>
        <color=#89DDFF>}</color>

        <color=#BB80B3>for</color> <color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>round</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#EEFFFF>round</color> <color=#89DDFF><</color> <color=#EEFFFF>rOUNDS</color><color=#89DDFF>;</color> <color=#EEFFFF>round</color><color=#89DDFF>++)</color> <color=#89DDFF>{</color>

            <color=#546E7A>// G apply to columns of internalState:m[blake2b_sigma[round][2 * blockPos]] /+1</color>
            <color=#EEFFFF>G</color><color=#89DDFF>(</color><color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>round</color><color=#89DDFF>][</color><color=#F78C6C>0</color><color=#89DDFF>]],</color> <color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>round</color><color=#89DDFF>][</color><color=#F78C6C>1</color><color=#89DDFF>]],</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#F78C6C>4</color><color=#89DDFF>,</color> <color=#F78C6C>8</color><color=#89DDFF>,</color> <color=#F78C6C>12</color><color=#89DDFF>);</color>
            <color=#EEFFFF>G</color><color=#89DDFF>(</color><color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>round</color><color=#89DDFF>][</color><color=#F78C6C>2</color><color=#89DDFF>]],</color> <color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>round</color><color=#89DDFF>][</color><color=#F78C6C>3</color><color=#89DDFF>]],</color> <color=#F78C6C>1</color><color=#89DDFF>,</color> <color=#F78C6C>5</color><color=#89DDFF>,</color> <color=#F78C6C>9</color><color=#89DDFF>,</color> <color=#F78C6C>13</color><color=#89DDFF>);</color>
            <color=#EEFFFF>G</color><color=#89DDFF>(</color><color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>round</color><color=#89DDFF>][</color><color=#F78C6C>4</color><color=#89DDFF>]],</color> <color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>round</color><color=#89DDFF>][</color><color=#F78C6C>5</color><color=#89DDFF>]],</color> <color=#F78C6C>2</color><color=#89DDFF>,</color> <color=#F78C6C>6</color><color=#89DDFF>,</color> <color=#F78C6C>10</color><color=#89DDFF>,</color> <color=#F78C6C>14</color><color=#89DDFF>);</color>
            <color=#EEFFFF>G</color><color=#89DDFF>(</color><color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>round</color><color=#89DDFF>][</color><color=#F78C6C>6</color><color=#89DDFF>]],</color> <color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>round</color><color=#89DDFF>][</color><color=#F78C6C>7</color><color=#89DDFF>]],</color> <color=#F78C6C>3</color><color=#89DDFF>,</color> <color=#F78C6C>7</color><color=#89DDFF>,</color> <color=#F78C6C>11</color><color=#89DDFF>,</color> <color=#F78C6C>15</color><color=#89DDFF>);</color>
            <color=#546E7A>// G apply to diagonals of internalState:</color>
            <color=#EEFFFF>G</color><color=#89DDFF>(</color><color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>round</color><color=#89DDFF>][</color><color=#F78C6C>8</color><color=#89DDFF>]],</color> <color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>round</color><color=#89DDFF>][</color><color=#F78C6C>9</color><color=#89DDFF>]],</color> <color=#F78C6C>0</color><color=#89DDFF>,</color> <color=#F78C6C>5</color><color=#89DDFF>,</color> <color=#F78C6C>10</color><color=#89DDFF>,</color> <color=#F78C6C>15</color><color=#89DDFF>);</color>
            <color=#EEFFFF>G</color><color=#89DDFF>(</color><color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>round</color><color=#89DDFF>][</color><color=#F78C6C>10</color><color=#89DDFF>]],</color> <color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>round</color><color=#89DDFF>][</color><color=#F78C6C>11</color><color=#89DDFF>]],</color> <color=#F78C6C>1</color><color=#89DDFF>,</color> <color=#F78C6C>6</color><color=#89DDFF>,</color> <color=#F78C6C>11</color><color=#89DDFF>,</color> <color=#F78C6C>12</color><color=#89DDFF>);</color>
            <color=#EEFFFF>G</color><color=#89DDFF>(</color><color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>round</color><color=#89DDFF>][</color><color=#F78C6C>12</color><color=#89DDFF>]],</color> <color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>round</color><color=#89DDFF>][</color><color=#F78C6C>13</color><color=#89DDFF>]],</color> <color=#F78C6C>2</color><color=#89DDFF>,</color> <color=#F78C6C>7</color><color=#89DDFF>,</color> <color=#F78C6C>8</color><color=#89DDFF>,</color> <color=#F78C6C>13</color><color=#89DDFF>);</color>
            <color=#EEFFFF>G</color><color=#89DDFF>(</color><color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>round</color><color=#89DDFF>][</color><color=#F78C6C>14</color><color=#89DDFF>]],</color> <color=#EEFFFF>m</color><color=#89DDFF>[</color><color=#EEFFFF>blake2b_sigma</color><color=#89DDFF>[</color><color=#EEFFFF>round</color><color=#89DDFF>][</color><color=#F78C6C>15</color><color=#89DDFF>]],</color> <color=#F78C6C>3</color><color=#89DDFF>,</color> <color=#F78C6C>4</color><color=#89DDFF>,</color> <color=#F78C6C>9</color><color=#89DDFF>,</color> <color=#F78C6C>14</color><color=#89DDFF>);</color>
        <color=#89DDFF>}</color>

        <color=#546E7A>// update chain values:</color>
        <color=#BB80B3>for</color> <color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>offset</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#EEFFFF>offset</color> <color=#89DDFF><</color> <color=#F78C6C>8</color><color=#89DDFF>;</color> <color=#EEFFFF>offset</color><color=#89DDFF>++)</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>chainValue</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>chainValue</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color><color=#89DDFF>]</color> <color=#89DDFF>^</color> <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color><color=#89DDFF>]</color> <color=#89DDFF>^</color> <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color> <color=#89DDFF>+</color> <color=#F78C6C>8</color><color=#89DDFF>];</color>
        <color=#89DDFF>}</color>
    <color=#89DDFF>}</color>

    <color=#BB80B3>private</color> <color=#BB80B3>void</color> <color=#82AAFF>G</color><color=#89DDFF>(</color><color=#BB80B3>long</color> <color=#EEFFFF>m1</color><color=#89DDFF>,</color> <color=#BB80B3>long</color> <color=#EEFFFF>m2</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>posA</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>posB</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>posC</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>posD</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>

        <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posA</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posA</color><color=#89DDFF>]</color> <color=#89DDFF>+</color> <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posB</color><color=#89DDFF>]</color> <color=#89DDFF>+</color> <color=#EEFFFF>m1</color><color=#89DDFF>;</color>
        <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posD</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>rotr64</color><color=#89DDFF>(</color><color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posD</color><color=#89DDFF>]</color> <color=#89DDFF>^</color> <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posA</color><color=#89DDFF>],</color> <color=#F78C6C>32</color><color=#89DDFF>);</color>
        <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posC</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posC</color><color=#89DDFF>]</color> <color=#89DDFF>+</color> <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posD</color><color=#89DDFF>];</color>
        <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posB</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>rotr64</color><color=#89DDFF>(</color><color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posB</color><color=#89DDFF>]</color> <color=#89DDFF>^</color> <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posC</color><color=#89DDFF>],</color> <color=#F78C6C>24</color><color=#89DDFF>);</color> <color=#546E7A>// replaces 25 of BLAKE</color>
        <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posA</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posA</color><color=#89DDFF>]</color> <color=#89DDFF>+</color> <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posB</color><color=#89DDFF>]</color> <color=#89DDFF>+</color> <color=#EEFFFF>m2</color><color=#89DDFF>;</color>
        <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posD</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>rotr64</color><color=#89DDFF>(</color><color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posD</color><color=#89DDFF>]</color> <color=#89DDFF>^</color> <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posA</color><color=#89DDFF>],</color> <color=#F78C6C>16</color><color=#89DDFF>);</color>
        <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posC</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posC</color><color=#89DDFF>]</color> <color=#89DDFF>+</color> <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posD</color><color=#89DDFF>];</color>
        <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posB</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>rotr64</color><color=#89DDFF>(</color><color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posB</color><color=#89DDFF>]</color> <color=#89DDFF>^</color> <color=#EEFFFF>internalState</color><color=#89DDFF>[</color><color=#EEFFFF>posC</color><color=#89DDFF>],</color> <color=#F78C6C>63</color><color=#89DDFF>);</color> <color=#546E7A>// replaces 11 of BLAKE</color>
    <color=#89DDFF>}</color>

    <color=#BB80B3>private</color> <color=#BB80B3>long</color> <color=#82AAFF>rotr64</color><color=#89DDFF>(</color><color=#BB80B3>long</color> <color=#EEFFFF>x</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>rot</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>x</color> <color=#89DDFF>>>></color> <color=#EEFFFF>rot</color> <color=#89DDFF>|</color> <color=#89DDFF>(</color><color=#EEFFFF>x</color> <color=#89DDFF><<</color> <color=#89DDFF>(</color><color=#F78C6C>64</color> <color=#89DDFF>-</color> <color=#EEFFFF>rot</color><color=#89DDFF>));</color>
    <color=#89DDFF>}</color>

    <color=#BB80B3>public</color> <color=#EEFFFF>String</color> <color=#82AAFF>getName</color><color=#89DDFF>()</color> <color=#89DDFF>{</color>
        <color=#BB80B3>return</color> <color=#C3E88D>"Blake2b"</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>

    <color=#546E7A>// convert one long value in byte array</color>
    <color=#546E7A>// little-endian byte order!</color>
    <color=#BB80B3>public</color> <color=#BB80B3>final</color> <color=#BB80B3>static</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#82AAFF>long2bytes</color><color=#89DDFF>(</color><color=#BB80B3>long</color> <color=#EEFFFF>longValue</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
        <color=#BB80B3>return</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#89DDFF>{</color>
                <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#EEFFFF>longValue</color><color=#89DDFF>,</color>
                <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#89DDFF>(</color><color=#EEFFFF>longValue</color> <color=#89DDFF>>></color> <color=#F78C6C>8</color><color=#89DDFF>),</color>
                <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#89DDFF>(</color><color=#EEFFFF>longValue</color> <color=#89DDFF>>></color> <color=#F78C6C>16</color><color=#89DDFF>),</color>
                <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#89DDFF>(</color><color=#EEFFFF>longValue</color> <color=#89DDFF>>></color> <color=#F78C6C>24</color><color=#89DDFF>),</color>
                <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#89DDFF>(</color><color=#EEFFFF>longValue</color> <color=#89DDFF>>></color> <color=#F78C6C>32</color><color=#89DDFF>),</color>
                <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#89DDFF>(</color><color=#EEFFFF>longValue</color> <color=#89DDFF>>></color> <color=#F78C6C>40</color><color=#89DDFF>),</color>
                <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#89DDFF>(</color><color=#EEFFFF>longValue</color> <color=#89DDFF>>></color> <color=#F78C6C>48</color><color=#89DDFF>),</color>
                <color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>)</color> <color=#89DDFF>(</color><color=#EEFFFF>longValue</color> <color=#89DDFF>>></color> <color=#F78C6C>56</color><color=#89DDFF>)</color> <color=#89DDFF>};</color>
    <color=#89DDFF>}</color>

    <color=#546E7A>// little-endian byte order!</color>
    <color=#BB80B3>public</color> <color=#BB80B3>final</color> <color=#BB80B3>static</color> <color=#BB80B3>long</color> <color=#82AAFF>bytes2long</color><color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>byteArray</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>offset</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>

        <color=#BB80B3>return</color> <color=#89DDFF>(((</color><color=#BB80B3>long</color><color=#89DDFF>)</color> <color=#EEFFFF>byteArray</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color><color=#89DDFF>]</color> <color=#89DDFF>&</color> <color=#F78C6C>0xFF</color><color=#89DDFF>)</color> <color=#89DDFF>|</color>
                <color=#89DDFF>(((</color><color=#BB80B3>long</color><color=#89DDFF>)</color> <color=#EEFFFF>byteArray</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color> <color=#89DDFF>+</color> <color=#F78C6C>1</color><color=#89DDFF>]</color> <color=#89DDFF>&</color> <color=#F78C6C>0xFF</color><color=#89DDFF>)</color> <color=#89DDFF><<</color> <color=#F78C6C>8</color><color=#89DDFF>)</color> <color=#89DDFF>|</color>
                <color=#89DDFF>(((</color><color=#BB80B3>long</color><color=#89DDFF>)</color> <color=#EEFFFF>byteArray</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color> <color=#89DDFF>+</color> <color=#F78C6C>2</color><color=#89DDFF>]</color> <color=#89DDFF>&</color> <color=#F78C6C>0xFF</color><color=#89DDFF>)</color> <color=#89DDFF><<</color> <color=#F78C6C>16</color><color=#89DDFF>)</color> <color=#89DDFF>|</color>
                <color=#89DDFF>(((</color><color=#BB80B3>long</color><color=#89DDFF>)</color> <color=#EEFFFF>byteArray</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color> <color=#89DDFF>+</color> <color=#F78C6C>3</color><color=#89DDFF>]</color> <color=#89DDFF>&</color> <color=#F78C6C>0xFF</color><color=#89DDFF>)</color> <color=#89DDFF><<</color> <color=#F78C6C>24</color><color=#89DDFF>)</color> <color=#89DDFF>|</color>
                <color=#89DDFF>(((</color><color=#BB80B3>long</color><color=#89DDFF>)</color> <color=#EEFFFF>byteArray</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color> <color=#89DDFF>+</color> <color=#F78C6C>4</color><color=#89DDFF>]</color> <color=#89DDFF>&</color> <color=#F78C6C>0xFF</color><color=#89DDFF>)</color> <color=#89DDFF><<</color> <color=#F78C6C>32</color><color=#89DDFF>)</color> <color=#89DDFF>|</color>
                <color=#89DDFF>(((</color><color=#BB80B3>long</color><color=#89DDFF>)</color> <color=#EEFFFF>byteArray</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color> <color=#89DDFF>+</color> <color=#F78C6C>5</color><color=#89DDFF>]</color> <color=#89DDFF>&</color> <color=#F78C6C>0xFF</color><color=#89DDFF>)</color> <color=#89DDFF><<</color> <color=#F78C6C>40</color><color=#89DDFF>)</color> <color=#89DDFF>|</color>
                <color=#89DDFF>(((</color><color=#BB80B3>long</color><color=#89DDFF>)</color> <color=#EEFFFF>byteArray</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color> <color=#89DDFF>+</color> <color=#F78C6C>6</color><color=#89DDFF>]</color> <color=#89DDFF>&</color> <color=#F78C6C>0xFF</color><color=#89DDFF>)</color> <color=#89DDFF><<</color> <color=#F78C6C>48</color><color=#89DDFF>)</color> <color=#89DDFF>|</color>
                <color=#89DDFF>(((</color><color=#BB80B3>long</color><color=#89DDFF>)</color> <color=#EEFFFF>byteArray</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color> <color=#89DDFF>+</color> <color=#F78C6C>7</color><color=#89DDFF>]</color> <color=#89DDFF>&</color> <color=#F78C6C>0xFF</color><color=#89DDFF>)</color> <color=#89DDFF><<</color> <color=#F78C6C>56</color><color=#89DDFF>));</color>
    <color=#89DDFF>}</color>

    <color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>setVertexIndex</color><color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>vIndex</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
        <color=#EEFFFF>_vIndex</color> <color=#89DDFF>=</color> <color=#EEFFFF>vIndex</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>

    <color=#BB80B3>public</color> <color=#BB80B3>int</color> <color=#82AAFF>getOutputSize</color><color=#89DDFF>()</color> <color=#89DDFF>{</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>digestLength</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>
<color=#89DDFF>}</color>