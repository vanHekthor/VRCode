<color=#89DDFF>package</color> <color=#FFCB6B>main.java.components.gamma.algorithms</color><color=#89DDFF>;</color>

<color=#89DDFF>import</color> <color=#FFCB6B>main.java.Helper</color><color=#89DDFF>;</color>
<color=#89DDFF>import</color> <color=#FFCB6B>main.java.components.gamma.GammaInterface</color><color=#89DDFF>;</color>
<color=#89DDFF>import</color> <color=#FFCB6B>main.java.components.hash.HashInterface</color><color=#89DDFF>;</color>

<color=#546E7A>/**</color>
<color=#546E7A> * Salt dependent pudate using xorShif1024* RNG</color>
<color=#546E7A> *</color>
<color=#546E7A> * @author max</color>
<color=#546E7A> */</color>
<color=#BB80B3>public</color> <color=#BB80B3>class</color> <color=#FFCB6B>SaltMix</color> <color=#BB80B3>implements</color> <color=#EEFFFF>GammaInterface</color> <color=#89DDFF>{</color>

    <color=#BB80B3>private</color> <color=#EEFFFF>HashInterface</color> <color=#EEFFFF>_h</color><color=#89DDFF>;</color>
    <color=#BB80B3>private</color> <color=#EEFFFF>HashInterface</color> <color=#EEFFFF>_hPrime</color><color=#89DDFF>;</color>
    <color=#BB80B3>private</color> <color=#EEFFFF>Helper</color> <color=#EEFFFF>helper</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>Helper</color><color=#89DDFF>();</color>

    <color=#BB80B3>private</color> <color=#BB80B3>long</color><color=#89DDFF>[]</color> <color=#EEFFFF>r</color><color=#89DDFF>;</color> <color=#546E7A>// state of the Xorshift RNG</color>
    <color=#BB80B3>private</color> <color=#BB80B3>int</color> <color=#EEFFFF>p</color><color=#89DDFF>;</color> <color=#546E7A>// position in state vector s</color>

    <color=#546E7A>/**</color>
<color=#546E7A>     * implements SaltMix with xorShift1024*</color>
<color=#546E7A>     *</color>
<color=#546E7A>     * @param g     garlic</color>
<color=#546E7A>     * @param x     state</color>
<color=#546E7A>     * @param gamma gamma</color>
<color=#546E7A>     * @return updated state</color>
<color=#546E7A>     */</color>
    <color=#BB80B3>public</color> <color=#BB80B3>byte</color><color=#89DDFF>[][]</color> <color=#82AAFF>gamma</color><color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>g</color><color=#89DDFF>,</color> <color=#BB80B3>byte</color><color=#89DDFF>[][]</color> <color=#EEFFFF>x</color><color=#89DDFF>,</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>gamma</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>

        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>gammaByte</color> <color=#89DDFF>=</color> <color=#EEFFFF>gamma</color><color=#89DDFF>;</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>tmp1</color><color=#89DDFF>;</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>tmp2</color><color=#89DDFF>;</color>

        <color=#EEFFFF>_h</color><color=#89DDFF>.</color><color=#BB80B3>update</color><color=#89DDFF>(</color><color=#EEFFFF>gammaByte</color><color=#89DDFF>);</color>
        <color=#EEFFFF>tmp1</color> <color=#89DDFF>=</color> <color=#EEFFFF>_h</color><color=#89DDFF>.</color><color=#BB80B3>doFinal</color><color=#89DDFF>();</color>
        <color=#EEFFFF>_h</color><color=#89DDFF>.</color><color=#BB80B3>reset</color><color=#89DDFF>();</color>
        <color=#EEFFFF>_h</color><color=#89DDFF>.</color><color=#BB80B3>update</color><color=#89DDFF>(</color><color=#EEFFFF>tmp1</color><color=#89DDFF>);</color>
        <color=#EEFFFF>tmp2</color> <color=#89DDFF>=</color> <color=#EEFFFF>_h</color><color=#89DDFF>.</color><color=#BB80B3>doFinal</color><color=#89DDFF>();</color>
        <color=#EEFFFF>_h</color><color=#89DDFF>.</color><color=#BB80B3>reset</color><color=#89DDFF>();</color>

        <color=#EEFFFF>transformBytesToLong</color><color=#89DDFF>(</color><color=#EEFFFF>tmp1</color><color=#89DDFF>,</color> <color=#EEFFFF>tmp2</color><color=#89DDFF>);</color>

        <color=#EEFFFF>p</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color>
        <color=#BB80B3>long</color> <color=#EEFFFF>j1</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color>
        <color=#BB80B3>long</color> <color=#EEFFFF>j2</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color>
        <color=#BB80B3>int</color> <color=#EEFFFF>loopLimit</color> <color=#89DDFF>=</color> <color=#89DDFF>(</color><color=#BB80B3>int</color><color=#89DDFF>)</color> <color=#EEFFFF>Math</color><color=#89DDFF>.</color><color=#BB80B3>pow</color><color=#89DDFF>(</color><color=#F78C6C>2</color><color=#89DDFF>,</color> <color=#EEFFFF>Math</color><color=#89DDFF>.</color><color=#BB80B3>ceil</color><color=#89DDFF>(</color><color=#F78C6C>3.0</color> <color=#89DDFF>*</color> <color=#EEFFFF>g</color> <color=#89DDFF>/</color> <color=#F78C6C>4.0</color><color=#89DDFF>));</color>

        <color=#546E7A>// System.out.println("Looplimit: " + loopLimit);</color>

        <color=#EEFFFF>_hPrime</color><color=#89DDFF>.</color><color=#BB80B3>reset</color><color=#89DDFF>();</color>

        <color=#BB80B3>for</color> <color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>i</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#EEFFFF>i</color> <color=#89DDFF><</color> <color=#EEFFFF>loopLimit</color><color=#89DDFF>;</color> <color=#89DDFF>++</color><color=#EEFFFF>i</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>j1</color> <color=#89DDFF>=</color> <color=#EEFFFF>xorshift1024star</color><color=#89DDFF>()</color> <color=#89DDFF>>>></color> <color=#89DDFF>(</color><color=#F78C6C>64</color> <color=#89DDFF>-</color> <color=#EEFFFF>g</color><color=#89DDFF>);</color>
            <color=#EEFFFF>j2</color> <color=#89DDFF>=</color> <color=#EEFFFF>xorshift1024star</color><color=#89DDFF>()</color> <color=#89DDFF>>>></color> <color=#89DDFF>(</color><color=#F78C6C>64</color> <color=#89DDFF>-</color> <color=#EEFFFF>g</color><color=#89DDFF>);</color>

            <color=#EEFFFF>_hPrime</color><color=#89DDFF>.</color><color=#BB80B3>update</color><color=#89DDFF>(</color><color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>concateByteArrays</color><color=#89DDFF>(</color><color=#EEFFFF>x</color><color=#89DDFF>[(</color><color=#BB80B3>int</color><color=#89DDFF>)</color> <color=#EEFFFF>j1</color><color=#89DDFF>],</color> <color=#EEFFFF>x</color><color=#89DDFF>[(</color><color=#BB80B3>int</color><color=#89DDFF>)</color> <color=#EEFFFF>j2</color><color=#89DDFF>]));</color>
            <color=#EEFFFF>x</color><color=#89DDFF>[(</color><color=#BB80B3>int</color><color=#89DDFF>)</color> <color=#EEFFFF>j1</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>_hPrime</color><color=#89DDFF>.</color><color=#BB80B3>doFinal</color><color=#89DDFF>();</color>

        <color=#89DDFF>}</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>x</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>

    <color=#BB80B3>public</color> <color=#BB80B3>long</color> <color=#82AAFF>xorshift1024star</color><color=#89DDFF>()</color> <color=#89DDFF>{</color>
        <color=#546E7A>// computes random g-bit value j1 / j2</color>
        <color=#546E7A>// in each iteration of the for-loop of saltMix</color>
        <color=#BB80B3>long</color> <color=#EEFFFF>s0</color> <color=#89DDFF>=</color> <color=#EEFFFF>r</color><color=#89DDFF>[</color><color=#EEFFFF>p</color><color=#89DDFF>];</color>
        <color=#EEFFFF>p</color> <color=#89DDFF>=</color> <color=#89DDFF>(</color><color=#EEFFFF>p</color> <color=#89DDFF>+</color> <color=#F78C6C>1</color><color=#89DDFF>)</color> <color=#89DDFF>&</color> <color=#F78C6C>15</color><color=#89DDFF>;</color>
        <color=#BB80B3>long</color> <color=#EEFFFF>s1</color> <color=#89DDFF>=</color> <color=#EEFFFF>r</color><color=#89DDFF>[</color><color=#EEFFFF>p</color><color=#89DDFF>];</color>
        <color=#EEFFFF>s1</color> <color=#89DDFF>^=</color> <color=#EEFFFF>s1</color> <color=#89DDFF><<</color> <color=#F78C6C>31</color><color=#89DDFF>;</color> <color=#546E7A>// a</color>
        <color=#EEFFFF>s1</color> <color=#89DDFF>^=</color> <color=#EEFFFF>s1</color> <color=#89DDFF>>>></color> <color=#F78C6C>11</color><color=#89DDFF>;</color> <color=#546E7A>// b</color>
        <color=#EEFFFF>s0</color> <color=#89DDFF>^=</color> <color=#EEFFFF>s0</color> <color=#89DDFF>>>></color> <color=#F78C6C>30</color><color=#89DDFF>;</color> <color=#546E7A>// c</color>
        <color=#EEFFFF>r</color><color=#89DDFF>[</color><color=#EEFFFF>p</color><color=#89DDFF>]</color> <color=#89DDFF>=</color> <color=#EEFFFF>s0</color> <color=#89DDFF>^</color> <color=#EEFFFF>s1</color><color=#89DDFF>;</color>
        <color=#BB80B3>return</color> <color=#EEFFFF>r</color><color=#89DDFF>[</color><color=#EEFFFF>p</color><color=#89DDFF>]</color> <color=#89DDFF>*</color> <color=#F78C6C>1181783497276652981L</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>

    <color=#BB80B3>void</color> <color=#82AAFF>transformBytesToLong</color><color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>a</color><color=#89DDFF>,</color> <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>b</color><color=#89DDFF>)</color> <color=#89DDFF>{</color> <color=#546E7A>// seed the state with two hash values</color>
        <color=#EEFFFF>r</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>long</color><color=#89DDFF>[</color><color=#F78C6C>16</color><color=#89DDFF>];</color>

        <color=#EEFFFF>p</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color>
        <color=#BB80B3>int</color> <color=#EEFFFF>sIndex</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color>
        <color=#BB80B3>for</color> <color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>i</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#EEFFFF>i</color> <color=#89DDFF><</color> <color=#EEFFFF>a</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>;</color> <color=#EEFFFF>i</color> <color=#89DDFF>+=</color> <color=#F78C6C>8</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>r</color><color=#89DDFF>[</color><color=#EEFFFF>sIndex</color><color=#89DDFF>++]</color> <color=#89DDFF>=</color> <color=#EEFFFF>bytes2long</color><color=#89DDFF>(</color><color=#EEFFFF>a</color><color=#89DDFF>,</color> <color=#EEFFFF>i</color><color=#89DDFF>);</color>
        <color=#89DDFF>}</color>
        <color=#BB80B3>for</color> <color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>i</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#EEFFFF>i</color> <color=#89DDFF><</color> <color=#EEFFFF>b</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>;</color> <color=#EEFFFF>i</color> <color=#89DDFF>+=</color> <color=#F78C6C>8</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>r</color><color=#89DDFF>[</color><color=#EEFFFF>sIndex</color><color=#89DDFF>++]</color> <color=#89DDFF>=</color> <color=#EEFFFF>bytes2long</color><color=#89DDFF>(</color><color=#EEFFFF>b</color><color=#89DDFF>,</color> <color=#EEFFFF>i</color><color=#89DDFF>);</color>
        <color=#89DDFF>}</color>
    <color=#89DDFF>}</color>

    <color=#BB80B3>public</color> <color=#BB80B3>final</color> <color=#BB80B3>static</color> <color=#BB80B3>long</color> <color=#82AAFF>bytes2long</color><color=#89DDFF>(</color><color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>byteArray</color><color=#89DDFF>,</color> <color=#BB80B3>int</color> <color=#EEFFFF>offset</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>

        <color=#BB80B3>return</color> <color=#89DDFF>((((</color><color=#BB80B3>long</color><color=#89DDFF>)</color> <color=#EEFFFF>byteArray</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color> <color=#89DDFF>+</color> <color=#F78C6C>0</color><color=#89DDFF>]</color> <color=#89DDFF>&</color> <color=#F78C6C>0xFF</color><color=#89DDFF>))</color> <color=#89DDFF>|</color>
                <color=#89DDFF>(((</color><color=#BB80B3>long</color><color=#89DDFF>)</color> <color=#EEFFFF>byteArray</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color> <color=#89DDFF>+</color> <color=#F78C6C>1</color><color=#89DDFF>]</color> <color=#89DDFF>&</color> <color=#F78C6C>0xFF</color><color=#89DDFF>)</color> <color=#89DDFF><<</color> <color=#F78C6C>8</color><color=#89DDFF>)</color> <color=#89DDFF>|</color>
                <color=#89DDFF>(((</color><color=#BB80B3>long</color><color=#89DDFF>)</color> <color=#EEFFFF>byteArray</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color> <color=#89DDFF>+</color> <color=#F78C6C>2</color><color=#89DDFF>]</color> <color=#89DDFF>&</color> <color=#F78C6C>0xFF</color><color=#89DDFF>)</color> <color=#89DDFF><<</color> <color=#F78C6C>16</color><color=#89DDFF>)</color> <color=#89DDFF>|</color>
                <color=#89DDFF>(((</color><color=#BB80B3>long</color><color=#89DDFF>)</color> <color=#EEFFFF>byteArray</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color> <color=#89DDFF>+</color> <color=#F78C6C>3</color><color=#89DDFF>]</color> <color=#89DDFF>&</color> <color=#F78C6C>0xFF</color><color=#89DDFF>)</color> <color=#89DDFF><<</color> <color=#F78C6C>24</color><color=#89DDFF>)</color> <color=#89DDFF>|</color>
                <color=#89DDFF>(((</color><color=#BB80B3>long</color><color=#89DDFF>)</color> <color=#EEFFFF>byteArray</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color> <color=#89DDFF>+</color> <color=#F78C6C>4</color><color=#89DDFF>]</color> <color=#89DDFF>&</color> <color=#F78C6C>0xFF</color><color=#89DDFF>)</color> <color=#89DDFF><<</color> <color=#F78C6C>32</color><color=#89DDFF>)</color> <color=#89DDFF>|</color>
                <color=#89DDFF>(((</color><color=#BB80B3>long</color><color=#89DDFF>)</color> <color=#EEFFFF>byteArray</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color> <color=#89DDFF>+</color> <color=#F78C6C>5</color><color=#89DDFF>]</color> <color=#89DDFF>&</color> <color=#F78C6C>0xFF</color><color=#89DDFF>)</color> <color=#89DDFF><<</color> <color=#F78C6C>40</color><color=#89DDFF>)</color> <color=#89DDFF>|</color>
                <color=#89DDFF>(((</color><color=#BB80B3>long</color><color=#89DDFF>)</color> <color=#EEFFFF>byteArray</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color> <color=#89DDFF>+</color> <color=#F78C6C>6</color><color=#89DDFF>]</color> <color=#89DDFF>&</color> <color=#F78C6C>0xFF</color><color=#89DDFF>)</color> <color=#89DDFF><<</color> <color=#F78C6C>48</color><color=#89DDFF>)</color> <color=#89DDFF>|</color>
                <color=#89DDFF>(((</color><color=#BB80B3>long</color><color=#89DDFF>)</color> <color=#EEFFFF>byteArray</color><color=#89DDFF>[</color><color=#EEFFFF>offset</color> <color=#89DDFF>+</color> <color=#F78C6C>7</color><color=#89DDFF>]</color> <color=#89DDFF>&</color> <color=#F78C6C>0xFF</color><color=#89DDFF>)</color> <color=#89DDFF><<</color> <color=#F78C6C>56</color><color=#89DDFF>));</color>
    <color=#89DDFF>}</color>

    <color=#82AAFF>@Override</color>
    <color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>setH</color><color=#89DDFF>(</color><color=#EEFFFF>HashInterface</color> <color=#EEFFFF>h</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
        <color=#EEFFFF>_h</color> <color=#89DDFF>=</color> <color=#EEFFFF>h</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>

    <color=#82AAFF>@Override</color>
    <color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>setHPrime</color><color=#89DDFF>(</color><color=#EEFFFF>HashInterface</color> <color=#EEFFFF>hPrime</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
        <color=#EEFFFF>_hPrime</color> <color=#89DDFF>=</color> <color=#EEFFFF>hPrime</color><color=#89DDFF>;</color>
    <color=#89DDFF>}</color>

<color=#89DDFF>}</color>