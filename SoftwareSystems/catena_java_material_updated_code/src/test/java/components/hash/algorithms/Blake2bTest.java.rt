<color=#89DDFF>package</color> <color=#FFCB6B>test.java.components.hash.algorithms</color><color=#89DDFF>;</color>

<color=#546E7A>/**</color>
<color=#546E7A> * @author Max Weber</color>
<color=#546E7A> * hex2bytes and bytes2hex are from</color>
<color=#546E7A> * https://github.com/BLAKE2/</color>
<color=#546E7A> */</color>

<color=#89DDFF>import static</color> <color=#FFCB6B>org.junit.Assert.*</color><color=#89DDFF>;</color>

<color=#89DDFF>import</color> <color=#FFCB6B>java.io.BufferedReader</color><color=#89DDFF>;</color>
<color=#89DDFF>import</color> <color=#FFCB6B>java.io.File</color><color=#89DDFF>;</color>
<color=#89DDFF>import</color> <color=#FFCB6B>java.io.FileReader</color><color=#89DDFF>;</color>

<color=#89DDFF>import</color> <color=#FFCB6B>org.json.JSONArray</color><color=#89DDFF>;</color>
<color=#89DDFF>import</color> <color=#FFCB6B>org.json.JSONObject</color><color=#89DDFF>;</color>
<color=#89DDFF>import</color> <color=#FFCB6B>org.junit.Test</color><color=#89DDFF>;</color>

<color=#89DDFF>import</color> <color=#FFCB6B>main.java.Helper</color><color=#89DDFF>;</color>
<color=#89DDFF>import</color> <color=#FFCB6B>main.java.components.hash.algorithms.Blake2b</color><color=#89DDFF>;</color>

<color=#BB80B3>public</color> <color=#BB80B3>class</color> <color=#FFCB6B>Blake2bTest</color> <color=#89DDFF>{</color>

    <color=#BB80B3>static</color> <color=#BB80B3>class</color> <color=#FFCB6B>TestVector</color> <color=#89DDFF>{</color>
        <color=#BB80B3>public</color> <color=#EEFFFF>String</color> <color=#EEFFFF>Input</color><color=#89DDFF>,</color> <color=#EEFFFF>Key</color><color=#89DDFF>,</color> <color=#EEFFFF>Hash</color><color=#89DDFF>;</color>

        <color=#BB80B3>public</color> <color=#82AAFF>TestVector</color><color=#89DDFF>(</color><color=#EEFFFF>String</color> <color=#EEFFFF>in</color><color=#89DDFF>,</color> <color=#EEFFFF>String</color> <color=#EEFFFF>key</color><color=#89DDFF>,</color> <color=#EEFFFF>String</color> <color=#EEFFFF>hash</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>Input</color> <color=#89DDFF>=</color> <color=#EEFFFF>in</color><color=#89DDFF>;</color>
            <color=#EEFFFF>Key</color> <color=#89DDFF>=</color> <color=#EEFFFF>key</color><color=#89DDFF>;</color>
            <color=#EEFFFF>Hash</color> <color=#89DDFF>=</color> <color=#EEFFFF>hash</color><color=#89DDFF>;</color>
        <color=#89DDFF>}</color>
    <color=#89DDFF>}</color>

    <color=#89DDFF>;</color>

    <color=#BB80B3>private</color> <color=#EEFFFF>Helper</color> <color=#EEFFFF>helper</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>Helper</color><color=#89DDFF>();</color>

    <color=#BB80B3>private</color> <color=#BB80B3>static</color> <color=#BB80B3>final</color> <color=#EEFFFF>String</color> <color=#EEFFFF>testVectorSource</color> <color=#89DDFF>=</color> <color=#C3E88D>"src/test/resources/testvectors/blake2b.json"</color><color=#89DDFF>;</color>
    <color=#BB80B3>private</color> <color=#BB80B3>static</color> <color=#BB80B3>final</color> <color=#EEFFFF>File</color> <color=#EEFFFF>fileBlake2b</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>File</color><color=#89DDFF>(</color><color=#EEFFFF>testVectorSource</color><color=#89DDFF>);</color>

    <color=#EEFFFF>String</color> <color=#EEFFFF>input1</color> <color=#89DDFF>=</color> <color=#C3E88D>""</color><color=#89DDFF>;</color>
    <color=#EEFFFF>String</color> <color=#EEFFFF>key</color> <color=#89DDFF>=</color> <color=#C3E88D>"000102030405060708090a0b0c0d0e0f10111213"</color>
            <color=#89DDFF>+</color> <color=#C3E88D>"1415161718191a1b1c1d1e1f2021222324252627282"</color>
            <color=#89DDFF>+</color> <color=#C3E88D>"92a2b2c2d2e2f303132333435363738393a3b3c3d3e"</color>
            <color=#89DDFF>+</color> <color=#C3E88D>"3f"</color><color=#89DDFF>;</color>
    <color=#EEFFFF>String</color> <color=#EEFFFF>hash1</color> <color=#89DDFF>=</color> <color=#C3E88D>"10ebb67700b1868efb4417987acf4690ae9d97"</color>
            <color=#89DDFF>+</color> <color=#C3E88D>"2fb7a590c2f02871799aaa4786b5e996e8f0f4eb981"</color>
            <color=#89DDFF>+</color> <color=#C3E88D>"fc214b005f42d2ff4233499391653df7aefcbc13fc5"</color>
            <color=#89DDFF>+</color> <color=#C3E88D>"1568"</color><color=#89DDFF>;</color>
    <color=#EEFFFF>String</color> <color=#EEFFFF>zeroes</color> <color=#89DDFF>=</color> <color=#C3E88D>"0000000000000000000000000000000000000"</color>
            <color=#89DDFF>+</color> <color=#C3E88D>"0000000000000000000000000000000000000000000"</color>
            <color=#89DDFF>+</color> <color=#C3E88D>"0000000000000000000000000000000000000000000"</color>
            <color=#89DDFF>+</color> <color=#C3E88D>"0000000"</color><color=#89DDFF>;</color>
    <color=#EEFFFF>String</color> <color=#EEFFFF>zeroesRes</color> <color=#89DDFF>=</color> <color=#C3E88D>"061D94FA094482C5688AB83995F17AEC64"</color>
            <color=#89DDFF>+</color> <color=#C3E88D>"F955D59E9EB406EA9BBA84DF7D6DA86D1C88D519669"</color>
            <color=#89DDFF>+</color> <color=#C3E88D>"159E409A926A1D9E151A4F69EF110EAD0A1E5B62A42"</color>
            <color=#89DDFF>+</color> <color=#C3E88D>"E15C396F"</color><color=#89DDFF>;</color>
    <color=#EEFFFF>String</color> <color=#EEFFFF>zeroes2</color> <color=#89DDFF>=</color> <color=#C3E88D>"0100000000000000000000000000000000000"</color>
            <color=#89DDFF>+</color> <color=#C3E88D>"0000000000000000000000000000000000000000000"</color>
            <color=#89DDFF>+</color> <color=#C3E88D>"0000000000000000000000000000000000000000000"</color>
            <color=#89DDFF>+</color> <color=#C3E88D>"0000000"</color><color=#89DDFF>;</color>
    <color=#EEFFFF>String</color> <color=#EEFFFF>zeroesRes2</color> <color=#89DDFF>=</color> <color=#C3E88D>"A4C37D9E1FD03BA5E8EB64D307225A959"</color>
            <color=#89DDFF>+</color> <color=#C3E88D>"50A2211BDC83B4C1009600DCAD956182B5B5639B860"</color>
            <color=#89DDFF>+</color> <color=#C3E88D>"E8FC583A4A482FAC45E8CBA97996737B4E376C884C8"</color>
            <color=#89DDFF>+</color> <color=#C3E88D>"0BFD7D010"</color><color=#89DDFF>;</color>

    <color=#546E7A>/**</color>
<color=#546E7A>     * simple test example for Blake2b</color>
<color=#546E7A>     * one vector from "https://github.com/BLAKE2/"</color>
<color=#546E7A>     */</color>
    <color=#82AAFF>@Test</color>
    <color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>testsimple</color><color=#89DDFF>()</color> <color=#89DDFF>{</color>

        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>anyByteArray1</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>hex2bytes</color><color=#89DDFF>(</color><color=#EEFFFF>input1</color><color=#89DDFF>);</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>exp</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>hex2bytes</color><color=#89DDFF>(</color><color=#EEFFFF>hash1</color><color=#89DDFF>);</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>keyInBytes</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>hex2bytes</color><color=#89DDFF>(</color><color=#EEFFFF>key</color><color=#89DDFF>);</color>

        <color=#EEFFFF>Blake2b</color> <color=#EEFFFF>b</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>Blake2b</color><color=#89DDFF>(</color><color=#EEFFFF>keyInBytes</color><color=#89DDFF>);</color>
        <color=#EEFFFF>b</color><color=#89DDFF>.</color><color=#BB80B3>update</color><color=#89DDFF>(</color><color=#EEFFFF>anyByteArray1</color><color=#89DDFF>);</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>hash</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#F78C6C>64</color><color=#89DDFF>];</color>
        <color=#EEFFFF>hash</color> <color=#89DDFF>=</color> <color=#EEFFFF>b</color><color=#89DDFF>.</color><color=#BB80B3>doFinal</color><color=#89DDFF>();</color>

        <color=#EEFFFF>assertTrue</color><color=#89DDFF>(</color><color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>bytes2hex</color><color=#89DDFF>(</color><color=#EEFFFF>hash</color><color=#89DDFF>).</color><color=#BB80B3>equals</color><color=#89DDFF>(</color><color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>bytes2hex</color><color=#89DDFF>(</color><color=#EEFFFF>exp</color><color=#89DDFF>)));</color>
    <color=#89DDFF>}</color>

    <color=#82AAFF>@Test</color>
    <color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>testsimple2</color><color=#89DDFF>()</color> <color=#89DDFF>{</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>anyByteArray1</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>hex2bytes</color><color=#89DDFF>(</color><color=#EEFFFF>input1</color><color=#89DDFF>);</color>

        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>exp</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>hex2bytes</color><color=#89DDFF>(</color><color=#EEFFFF>hash1</color><color=#89DDFF>);</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>keyInBytes</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>hex2bytes</color><color=#89DDFF>(</color><color=#EEFFFF>key</color><color=#89DDFF>);</color>

        <color=#EEFFFF>Blake2b</color> <color=#EEFFFF>b</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>Blake2b</color><color=#89DDFF>(</color><color=#EEFFFF>keyInBytes</color><color=#89DDFF>);</color>
        <color=#EEFFFF>b</color><color=#89DDFF>.</color><color=#BB80B3>update</color><color=#89DDFF>(</color><color=#EEFFFF>anyByteArray1</color><color=#89DDFF>);</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>hash</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#F78C6C>64</color><color=#89DDFF>];</color>
        <color=#EEFFFF>hash</color> <color=#89DDFF>=</color> <color=#EEFFFF>b</color><color=#89DDFF>.</color><color=#BB80B3>doFinal</color><color=#89DDFF>();</color>

        <color=#EEFFFF>assertTrue</color><color=#89DDFF>(</color><color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>bytes2hex</color><color=#89DDFF>(</color><color=#EEFFFF>hash</color><color=#89DDFF>).</color><color=#BB80B3>equals</color><color=#89DDFF>(</color><color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>bytes2hex</color><color=#89DDFF>(</color><color=#EEFFFF>exp</color><color=#89DDFF>)));</color>
    <color=#89DDFF>}</color>

    <color=#82AAFF>@Test</color>
    <color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>testZeroes</color><color=#89DDFF>()</color> <color=#89DDFF>{</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>anyByteArray1</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>hex2bytes</color><color=#89DDFF>(</color><color=#EEFFFF>zeroes</color><color=#89DDFF>);</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>exp</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>hex2bytes</color><color=#89DDFF>(</color><color=#EEFFFF>zeroesRes</color><color=#89DDFF>);</color>

        <color=#EEFFFF>Blake2b</color> <color=#EEFFFF>b</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>Blake2b</color><color=#89DDFF>();</color>
        <color=#EEFFFF>b</color><color=#89DDFF>.</color><color=#BB80B3>update</color><color=#89DDFF>(</color><color=#EEFFFF>anyByteArray1</color><color=#89DDFF>);</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>hash</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#F78C6C>64</color><color=#89DDFF>];</color>
        <color=#EEFFFF>hash</color> <color=#89DDFF>=</color> <color=#EEFFFF>b</color><color=#89DDFF>.</color><color=#BB80B3>doFinal</color><color=#89DDFF>();</color>

        <color=#EEFFFF>assertTrue</color><color=#89DDFF>(</color><color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>bytes2hex</color><color=#89DDFF>(</color><color=#EEFFFF>hash</color><color=#89DDFF>).</color><color=#BB80B3>equals</color><color=#89DDFF>(</color><color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>bytes2hex</color><color=#89DDFF>(</color><color=#EEFFFF>exp</color><color=#89DDFF>)));</color>
    <color=#89DDFF>}</color>

    <color=#82AAFF>@Test</color>
    <color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>testZeroes2</color><color=#89DDFF>()</color> <color=#89DDFF>{</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>anyByteArray1</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>hex2bytes</color><color=#89DDFF>(</color><color=#EEFFFF>zeroes2</color><color=#89DDFF>);</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>exp</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>hex2bytes</color><color=#89DDFF>(</color><color=#EEFFFF>zeroesRes2</color><color=#89DDFF>);</color>

        <color=#EEFFFF>Blake2b</color> <color=#EEFFFF>b</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>Blake2b</color><color=#89DDFF>();</color>
        <color=#EEFFFF>b</color><color=#89DDFF>.</color><color=#BB80B3>update</color><color=#89DDFF>(</color><color=#EEFFFF>anyByteArray1</color><color=#89DDFF>);</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>hash</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#F78C6C>64</color><color=#89DDFF>];</color>
        <color=#EEFFFF>hash</color> <color=#89DDFF>=</color> <color=#EEFFFF>b</color><color=#89DDFF>.</color><color=#BB80B3>doFinal</color><color=#89DDFF>();</color>

        <color=#546E7A>// System.out.println(helper.bytes2hex(hash));</color>

        <color=#EEFFFF>assertTrue</color><color=#89DDFF>(</color><color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>bytes2hex</color><color=#89DDFF>(</color><color=#EEFFFF>hash</color><color=#89DDFF>).</color><color=#BB80B3>equals</color><color=#89DDFF>(</color><color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>bytes2hex</color><color=#89DDFF>(</color><color=#EEFFFF>exp</color><color=#89DDFF>)));</color>
    <color=#89DDFF>}</color>

    <color=#546E7A>/**</color>
<color=#546E7A>     * parsing and testing against all official test vectors</color>
<color=#546E7A>     * from "https://github.com/BLAKE2/"</color>
<color=#546E7A>     */</color>
    <color=#82AAFF>@Test</color>
    <color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>testAllVectors</color><color=#89DDFF>()</color> <color=#89DDFF>{</color>

        <color=#EEFFFF>JSONArray</color> <color=#EEFFFF>jsonObj</color> <color=#89DDFF>=</color> <color=#EEFFFF>jsonParser</color><color=#89DDFF>(</color><color=#EEFFFF>fileBlake2b</color><color=#89DDFF>);</color>
        <color=#BB80B3>for</color> <color=#89DDFF>(</color><color=#BB80B3>int</color> <color=#EEFFFF>i</color> <color=#89DDFF>=</color> <color=#F78C6C>0</color><color=#89DDFF>;</color> <color=#EEFFFF>i</color> <color=#89DDFF><</color> <color=#EEFFFF>jsonObj</color><color=#89DDFF>.</color><color=#BB80B3>length</color><color=#89DDFF>();</color> <color=#89DDFF>++</color><color=#EEFFFF>i</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>JSONObject</color> <color=#EEFFFF>o</color> <color=#89DDFF>=</color> <color=#89DDFF>(</color><color=#EEFFFF>JSONObject</color><color=#89DDFF>)</color> <color=#EEFFFF>jsonObj</color><color=#89DDFF>.</color><color=#BB80B3>get</color><color=#89DDFF>(</color><color=#EEFFFF>i</color><color=#89DDFF>);</color>

            <color=#EEFFFF>JSONObject</color> <color=#EEFFFF>inputs</color> <color=#89DDFF>=</color> <color=#EEFFFF>o</color><color=#89DDFF>.</color><color=#BB80B3>getJSONObject</color><color=#89DDFF>(</color><color=#C3E88D>"inputs"</color><color=#89DDFF>);</color>
            <color=#EEFFFF>JSONObject</color> <color=#EEFFFF>outputs</color> <color=#89DDFF>=</color> <color=#EEFFFF>o</color><color=#89DDFF>.</color><color=#BB80B3>getJSONObject</color><color=#89DDFF>(</color><color=#C3E88D>"outputs"</color><color=#89DDFF>);</color>

            <color=#EEFFFF>String</color> <color=#EEFFFF>in</color> <color=#89DDFF>=</color> <color=#EEFFFF>inputs</color><color=#89DDFF>.</color><color=#BB80B3>getString</color><color=#89DDFF>(</color><color=#C3E88D>"in"</color><color=#89DDFF>);</color>
            <color=#EEFFFF>String</color> <color=#EEFFFF>k</color> <color=#89DDFF>=</color> <color=#EEFFFF>inputs</color><color=#89DDFF>.</color><color=#BB80B3>getString</color><color=#89DDFF>(</color><color=#C3E88D>"key"</color><color=#89DDFF>);</color>

            <color=#EEFFFF>String</color> <color=#EEFFFF>res</color> <color=#89DDFF>=</color> <color=#EEFFFF>outputs</color><color=#89DDFF>.</color><color=#BB80B3>getString</color><color=#89DDFF>(</color><color=#C3E88D>"res"</color><color=#89DDFF>);</color>

            <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>input</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>hex2bytes</color><color=#89DDFF>(</color><color=#EEFFFF>in</color><color=#89DDFF>);</color>
            <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>key</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>hex2bytes</color><color=#89DDFF>(</color><color=#EEFFFF>k</color><color=#89DDFF>);</color>
            <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>hash</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>hex2bytes</color><color=#89DDFF>(</color><color=#EEFFFF>res</color><color=#89DDFF>);</color>

            <color=#EEFFFF>Blake2b</color> <color=#EEFFFF>b</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>Blake2b</color><color=#89DDFF>(</color><color=#EEFFFF>key</color><color=#89DDFF>);</color>
            <color=#EEFFFF>b</color><color=#89DDFF>.</color><color=#BB80B3>update</color><color=#89DDFF>(</color><color=#EEFFFF>input</color><color=#89DDFF>);</color>
            <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>output</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#F78C6C>64</color><color=#89DDFF>];</color>
            <color=#EEFFFF>output</color> <color=#89DDFF>=</color> <color=#EEFFFF>b</color><color=#89DDFF>.</color><color=#BB80B3>doFinal</color><color=#89DDFF>();</color>

            <color=#EEFFFF>assertTrue</color><color=#89DDFF>(</color><color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>bytes2hex</color><color=#89DDFF>(</color><color=#EEFFFF>hash</color><color=#89DDFF>).</color><color=#BB80B3>equals</color><color=#89DDFF>(</color><color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>bytes2hex</color><color=#89DDFF>(</color><color=#EEFFFF>output</color><color=#89DDFF>)));</color>
        <color=#89DDFF>}</color>
    <color=#89DDFF>}</color>

    <color=#546E7A>/**</color>
<color=#546E7A>     * Test output Length of h with keyed hashing</color>
<color=#546E7A>     */</color>
    <color=#82AAFF>@Test</color>
    <color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>testOutputLength1</color><color=#89DDFF>()</color> <color=#89DDFF>{</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>anyByteArray1</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>hex2bytes</color><color=#89DDFF>(</color><color=#EEFFFF>input1</color><color=#89DDFF>);</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>keyInBytes</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>hex2bytes</color><color=#89DDFF>(</color><color=#EEFFFF>key</color><color=#89DDFF>);</color>

        <color=#EEFFFF>Blake2b</color> <color=#EEFFFF>b</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>Blake2b</color><color=#89DDFF>(</color><color=#EEFFFF>keyInBytes</color><color=#89DDFF>);</color>
        <color=#EEFFFF>b</color><color=#89DDFF>.</color><color=#BB80B3>update</color><color=#89DDFF>(</color><color=#EEFFFF>anyByteArray1</color><color=#89DDFF>);</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>hash</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#F78C6C>64</color><color=#89DDFF>];</color>
        <color=#EEFFFF>hash</color> <color=#89DDFF>=</color> <color=#EEFFFF>b</color><color=#89DDFF>.</color><color=#BB80B3>doFinal</color><color=#89DDFF>();</color>

        <color=#EEFFFF>assertTrue</color><color=#89DDFF>(</color><color=#EEFFFF>hash</color><color=#89DDFF>.</color><color=#BB80B3>length</color> <color=#89DDFF>==</color> <color=#EEFFFF>b</color><color=#89DDFF>.</color><color=#BB80B3>getOutputSize</color><color=#89DDFF>());</color>
    <color=#89DDFF>}</color>

    <color=#546E7A>/**</color>
<color=#546E7A>     * Test output Length of h without keyed hashing</color>
<color=#546E7A>     */</color>
    <color=#82AAFF>@Test</color>
    <color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>testOutputLength2</color><color=#89DDFF>()</color> <color=#89DDFF>{</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>anyByteArray1</color> <color=#89DDFF>=</color> <color=#EEFFFF>helper</color><color=#89DDFF>.</color><color=#BB80B3>hex2bytes</color><color=#89DDFF>(</color><color=#EEFFFF>input1</color><color=#89DDFF>);</color>

        <color=#EEFFFF>Blake2b</color> <color=#EEFFFF>b</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>Blake2b</color><color=#89DDFF>();</color>
        <color=#EEFFFF>b</color><color=#89DDFF>.</color><color=#BB80B3>update</color><color=#89DDFF>(</color><color=#EEFFFF>anyByteArray1</color><color=#89DDFF>);</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>hash</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#F78C6C>64</color><color=#89DDFF>];</color>
        <color=#EEFFFF>hash</color> <color=#89DDFF>=</color> <color=#EEFFFF>b</color><color=#89DDFF>.</color><color=#BB80B3>doFinal</color><color=#89DDFF>();</color>

        <color=#EEFFFF>assertTrue</color><color=#89DDFF>(</color><color=#EEFFFF>hash</color><color=#89DDFF>.</color><color=#BB80B3>length</color> <color=#89DDFF>==</color> <color=#EEFFFF>b</color><color=#89DDFF>.</color><color=#BB80B3>getOutputSize</color><color=#89DDFF>());</color>
    <color=#89DDFF>}</color>

    <color=#546E7A>/**</color>
<color=#546E7A>     * Test output Length of h without key and</color>
<color=#546E7A>     * empty input</color>
<color=#546E7A>     */</color>
    <color=#82AAFF>@Test</color>
    <color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>testOutputLength3</color><color=#89DDFF>()</color> <color=#89DDFF>{</color>
        <color=#EEFFFF>Blake2b</color> <color=#EEFFFF>b</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>Blake2b</color><color=#89DDFF>();</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>hash</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#F78C6C>64</color><color=#89DDFF>];</color>
        <color=#EEFFFF>hash</color> <color=#89DDFF>=</color> <color=#EEFFFF>b</color><color=#89DDFF>.</color><color=#BB80B3>doFinal</color><color=#89DDFF>();</color>

        <color=#EEFFFF>assertTrue</color><color=#89DDFF>(</color><color=#EEFFFF>hash</color><color=#89DDFF>.</color><color=#BB80B3>length</color> <color=#89DDFF>==</color> <color=#EEFFFF>b</color><color=#89DDFF>.</color><color=#BB80B3>getOutputSize</color><color=#89DDFF>());</color>
    <color=#89DDFF>}</color>

    <color=#82AAFF>@Test</color>
    <color=#BB80B3>public</color> <color=#BB80B3>void</color> <color=#82AAFF>testBlake2bConstructor</color><color=#89DDFF>()</color> <color=#89DDFF>{</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>key</color> <color=#89DDFF>=</color> <color=#89DDFF>{};</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>_salt</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#F78C6C>16</color><color=#89DDFF>];</color>
        <color=#BB80B3>int</color> <color=#EEFFFF>_digestLength</color> <color=#89DDFF>=</color> <color=#F78C6C>1</color><color=#89DDFF>;</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>_personalization</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#BB80B3>byte</color><color=#89DDFF>[</color><color=#F78C6C>16</color><color=#89DDFF>];</color>

        <color=#BB80B3>new</color> <color=#EEFFFF>Blake2b</color><color=#89DDFF>(</color><color=#EEFFFF>key</color><color=#89DDFF>,</color> <color=#EEFFFF>_digestLength</color><color=#89DDFF>,</color> <color=#EEFFFF>_salt</color><color=#89DDFF>,</color> <color=#EEFFFF>_personalization</color><color=#89DDFF>);</color>

        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>act</color> <color=#89DDFF>=</color> <color=#89DDFF>{};</color>
        <color=#BB80B3>byte</color><color=#89DDFF>[]</color> <color=#EEFFFF>exp</color> <color=#89DDFF>=</color> <color=#89DDFF>{};</color>

        <color=#EEFFFF>assertArrayEquals</color><color=#89DDFF>(</color><color=#EEFFFF>exp</color><color=#89DDFF>,</color> <color=#EEFFFF>act</color><color=#89DDFF>);</color>
    <color=#89DDFF>}</color>

    <color=#546E7A>// ====================================================================</color>
    <color=#546E7A>// Helper functions:</color>

    <color=#546E7A>/**</color>
<color=#546E7A>     * Helper-function</color>
<color=#546E7A>     * reads test vector file</color>
<color=#546E7A>     * creates test vector object</color>
<color=#546E7A>     */</color>

    <color=#BB80B3>private</color> <color=#EEFFFF>JSONArray</color> <color=#82AAFF>jsonParser</color><color=#89DDFF>(</color><color=#EEFFFF>File</color> <color=#EEFFFF>f</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
        <color=#EEFFFF>BufferedReader</color> <color=#EEFFFF>br</color><color=#89DDFF>;</color>
        <color=#EEFFFF>String</color> <color=#EEFFFF>all</color> <color=#89DDFF>=</color> <color=#C3E88D>""</color><color=#89DDFF>;</color>
        <color=#BB80B3>try</color> <color=#89DDFF>{</color>
            <color=#EEFFFF>br</color> <color=#89DDFF>=</color> <color=#BB80B3>new</color> <color=#EEFFFF>BufferedReader</color><color=#89DDFF>(</color><color=#BB80B3>new</color> <color=#EEFFFF>FileReader</color><color=#89DDFF>(</color><color=#EEFFFF>f</color><color=#89DDFF>));</color>
            <color=#EEFFFF>String</color> <color=#EEFFFF>line</color><color=#89DDFF>;</color>
            <color=#BB80B3>while</color> <color=#89DDFF>((</color><color=#EEFFFF>line</color> <color=#89DDFF>=</color> <color=#EEFFFF>br</color><color=#89DDFF>.</color><color=#BB80B3>readLine</color><color=#89DDFF>())</color> <color=#89DDFF>!=</color> <color=#89DDFF>null</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
                <color=#EEFFFF>all</color> <color=#89DDFF>+=</color> <color=#EEFFFF>line</color><color=#89DDFF>;</color>
            <color=#89DDFF>}</color>
        <color=#89DDFF>}</color> <color=#BB80B3>catch</color> <color=#89DDFF>(</color><color=#EEFFFF>Exception</color> <color=#EEFFFF>e</color><color=#89DDFF>)</color> <color=#89DDFF>{</color>
        <color=#89DDFF>}</color>
        <color=#BB80B3>return</color> <color=#BB80B3>new</color> <color=#EEFFFF>JSONArray</color><color=#89DDFF>(</color><color=#EEFFFF>all</color><color=#89DDFF>);</color>
    <color=#89DDFF>}</color>
<color=#89DDFF>}</color>