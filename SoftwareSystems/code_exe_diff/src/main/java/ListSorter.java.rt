<color=#7401DF>import</color> java.util.ArrayList;
<color=#7401DF>import</color> java.util.Arrays;
<color=#7401DF>import</color> java.util.List;

<color=#8000FF>public</color> <color=#8000FF>class</color> <color=#045FB4>ListSorter</color> {
    <color=#8000FF>public</color> List<Integer> mergeSort(List<Integer> list) {
        <color=#8000FF>int</color>[] intArray = listToArray(list);
        mSort(intArray, 0, intArray.<color=#045FB4>length</color> - 1);
        <color=#8000FF>return</color> arrayToList(intArray);
    }

    <color=#6E6E6E>// Merges two subarrays of arr[].</color>
    <color=#6E6E6E>// First subarray is arr[l..m]</color>
    <color=#6E6E6E>// Second subarray is arr[m+1..r]</color>
    <color=#8000FF>private</color> <color=#8000FF>void</color> merge(<color=#8000FF>int</color> arr[], <color=#8000FF>int</color> l, <color=#8000FF>int</color> m, <color=#8000FF>int</color> r)
    {
        <color=#6E6E6E>// Find sizes of two subarrays to be merged</color>
        <color=#8000FF>int</color> n1 = m - l + 1;
        <color=#8000FF>int</color> n2 = r - m;
  
        /* Create temp arrays */
        <color=#8000FF>int</color> L[] = <color=#8000FF>new</color> <color=#8000FF>int</color>[n1];
        <color=#8000FF>int</color> R[] = <color=#8000FF>new</color> <color=#8000FF>int</color>[n2];
  
        /*Copy data to temp arrays*/
        <color=#8000FF>for</color> (<color=#8000FF>int</color> i = 0; i < n1; ++i)
            L[i] = arr[l + i];
        <color=#8000FF>for</color> (<color=#8000FF>int</color> j = 0; j < n2; ++j)
            R[j] = arr[m + 1 + j];
  
        /* Merge the temp arrays */
  
        <color=#6E6E6E>// Initial indexes of first and second subarrays</color>
        <color=#8000FF>int</color> i = 0, j = 0;
  
        <color=#6E6E6E>// Initial index of merged subarray array</color>
        <color=#8000FF>int</color> k = l;
        <color=#8000FF>while</color> (i < n1 && j < n2) {
            <color=#8000FF>if</color> (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            }
            <color=#8000FF>else</color> {
                arr[k] = R[j];
                j++;
            }
            k++;
        }
  
        /* Copy remaining elements of L[] if any */
        <color=#8000FF>while</color> (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }
  
        /* Copy remaining elements of R[] if any */
        <color=#8000FF>while</color> (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }
  
    <color=#6E6E6E>// Main function that sorts arr[l..r] using</color>
    <color=#6E6E6E>// merge()</color>
    <color=#8000FF>private</color> <color=#8000FF>void</color> mSort(<color=#8000FF>int</color> arr[], <color=#8000FF>int</color> l, <color=#8000FF>int</color> r)
    {
        <color=#8000FF>if</color> (l < r) {
            <color=#6E6E6E>// Find the middle point</color>
            <color=#8000FF>int</color> m =l+ (r-l)/2;
  
            <color=#6E6E6E>// Sort first and second halves</color>
            mSort(arr, l, m);
            mSort(arr, m + 1, r);
  
            <color=#6E6E6E>// Merge the sorted halves</color>
            merge(arr, l, m, r);
        }
    }

    <color=#8000FF>public</color> List<Integer> quickSort(List<Integer> list) {
        <color=#8000FF>int</color>[] intArray = listToArray(list);
        qSort(intArray, 0, intArray.<color=#045FB4>length</color> - 1);
        <color=#8000FF>return</color> arrayToList(intArray);
    }

    <color=#6E6E6E>// A utility function to swap two elements</color>
    <color=#8000FF>private</color> <color=#8000FF>void</color> swap(<color=#8000FF>int</color>[] arr, <color=#8000FF>int</color> i, <color=#8000FF>int</color> j)
    {
        <color=#8000FF>int</color> temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
    
    /* This function takes last element as pivot, places
    the pivot element at its correct position in sorted
    array, and places all smaller (smaller than pivot)
    to left of pivot and all greater elements to right
    of pivot */
    <color=#8000FF>private</color> <color=#8000FF>int</color> partition(<color=#8000FF>int</color>[] arr, <color=#8000FF>int</color> low, <color=#8000FF>int</color> high)
    {
        
        <color=#6E6E6E>// pivot</color>
        <color=#8000FF>int</color> pivot = arr[high]; 
        
        <color=#6E6E6E>// Index of smaller element and</color>
        <color=#6E6E6E>// indicates the right position</color>
        <color=#6E6E6E>// of pivot found so far</color>
        <color=#8000FF>int</color> i = (low - 1); 
    
        <color=#8000FF>for</color>(<color=#8000FF>int</color> j = low; j <= high - 1; j++)
        {
            
            <color=#6E6E6E>// If current element is smaller </color>
            <color=#6E6E6E>// than the pivot</color>
            <color=#8000FF>if</color> (arr[j] < pivot) 
            {
                
                <color=#6E6E6E>// Increment index of </color>
                <color=#6E6E6E>// smaller element</color>
                i++; 
                swap(arr, i, j);
            }
        }
        swap(arr, i + 1, high);
        <color=#8000FF>return</color> (i + 1);
    }
    
    /* The main function that implements QuickSort
            arr[] --> Array to be sorted,
            low --> Starting index,
            high --> Ending index
    */
    <color=#8000FF>private</color> <color=#8000FF>void</color> qSort(<color=#8000FF>int</color>[] arr, <color=#8000FF>int</color> low, <color=#8000FF>int</color> high)
    {
        <color=#8000FF>if</color> (low < high) 
        {
            
            <color=#6E6E6E>// pi is partitioning index, arr[p]</color>
            <color=#6E6E6E>// is now at right place </color>
            <color=#8000FF>int</color> pi = partition(arr, low, high);
    
            <color=#6E6E6E>// Separately sort elements before</color>
            <color=#6E6E6E>// partition and after partition</color>
            qSort(arr, low, pi - 1);
            qSort(arr, pi + 1, high);
        }
    }

    <color=#8000FF>public</color> List<Integer> bubbleSort(List<Integer> list) {
        <color=#8000FF>int</color>[] intArray = listToArray(list);
        bubbleSort(intArray);
        <color=#8000FF>return</color> arrayToList(intArray);
    }

    <color=#8000FF>private</color> <color=#8000FF>void</color> bubbleSort(<color=#8000FF>int</color> arr[])
    {
        <color=#8000FF>int</color> n = arr.<color=#045FB4>length</color>;
        <color=#8000FF>for</color> (<color=#8000FF>int</color> i = 0; i < n-1; i++)
            <color=#8000FF>for</color> (<color=#8000FF>int</color> j = 0; j < n-i-1; j++)
                <color=#8000FF>if</color> (arr[j] > arr[j+1])
                {
                    <color=#6E6E6E>// swap arr[j+1] and arr[j]</color>
                    <color=#8000FF>int</color> temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                }
    }

    <color=#8000FF>private</color> <color=#8000FF>int</color>[] listToArray(List<Integer> list) {
        <color=#8000FF>return</color> list.<color=#045FB4>stream</color>()
                .<color=#045FB4>mapToInt</color>(Integer::intValue)
                .<color=#045FB4>toArray</color>();
    }

    <color=#8000FF>private</color> List<Integer> arrayToList(<color=#8000FF>int</color>[] array) {
        <color=#8000FF>return</color> <color=#8000FF>new</color> ArrayList<>(Arrays.<color=#045FB4>asList</color>(Arrays.<color=#045FB4>stream</color>(array).<color=#045FB4>boxed</color>().<color=#045FB4>toArray</color>(Integer[]::<color=#8000FF>new</color>)));
    }
}